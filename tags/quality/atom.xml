<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quality on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/quality/</link>
    <description>Recent content in Quality on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 09 May 2015 14:32:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/quality/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Does TDD really lead to good design?</title>
      <link>http://codurance.com/blog/does-tdd-lead-to-good-design/</link>
      <pubDate>Sat, 09 May 2015 14:32:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/does-tdd-lead-to-good-design/</guid>
      <description>

&lt;p&gt;Recently I tweeted that &lt;a href=&#34;https://twitter.com/sandromancuso/status/588503877235781632&#34;&gt;TDD can’t lead to a good design if we don’t know what good design looks like&lt;/a&gt;. I was also saying that we probably should teach design before TDD (or at least, at the same time). This tweet led to a discussions with &lt;a href=&#34;https://twitter.com/jbrains&#34;&gt;J.B. Rainsberger&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/RonJeffries&#34;&gt;Ron Jeffries&lt;/a&gt;, and a few others. J.B. and I ended up having a live &lt;a href=&#34;https://www.youtube.com/watch?v=ty3p5VDcoOI&#34;&gt;discussion on Hangout on Air&lt;/a&gt; later on.&lt;/p&gt;

&lt;p&gt;If you look back to many of my talks, blogs, and even my book, you will find multiple occasions where I say that TDD is a design tool. So what changed? Why I don’t say the same thing anymore?&lt;/p&gt;

&lt;h3 id=&#34;why-did-i-change-my-mind&#34;&gt;Why did I change my mind?&lt;/h3&gt;

&lt;p&gt;After paying more attention to how I work and how many other developers work, I realised that not many people are driving good design through TDD. Although I love the RED-GREEN-REFACTORING rhythm, having a “refactoring” step is not enough to call TDD a design tool.&lt;/p&gt;

&lt;p&gt;TDD doesn’t prescribe how you should design. What it does is to annoy you constantly, asking “Are you sure about this? Is it good enough? Can you make it better?” This annoyance (or constant reminder to look at your design and thing if it can be improved) is a great thing, but not enough.&lt;/p&gt;

&lt;p&gt;In my view, TDD is a software development &lt;em&gt;workflow&lt;/em&gt; which provides me with many benefits, including a constant reminder to make my code better. What it means to make my code better, is not part of TDD.&lt;/p&gt;

&lt;h4 id=&#34;aren-t-you-forgetting-about-the-4-rules-of-simple-design&#34;&gt;Aren’t you forgetting about the 4 Rules of Simple Design?&lt;/h4&gt;

&lt;p&gt;Ah, yes… But no. I’m not forgetting about them. &lt;a href=&#34;https://twitter.com/sandromancuso/status/589098111559213056&#34;&gt;4 Rules of Simple Design are NOT part of TDD&lt;/a&gt; and I’m purely discussing TDD here. 4 Rules of Simple Design is normally the design guidelines that many experienced TDD practitioners use (including myself, among other techniques) during the refactoring phase.&lt;/p&gt;

&lt;p&gt;4 Rules of Simple Design is one of the many design guidelines we have available. &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&#34;&gt;SOLID&lt;/a&gt; is another. &lt;a href=&#34;http://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-Driven Design&lt;/a&gt; is another. Many other design principles and patterns are also available as good guidelines. Those are the things we need to have in our mind during “refactoring” phase. Or, putting it in a different way, having a good understanding of the existing design guidelines is what will lead you to a better design.&lt;/p&gt;

&lt;p&gt;TDD is a workflow (not a design tool) where during the refactoring phase you apply your existing knowledge of software design combined with design techniques that may help you to get to a better design.&lt;/p&gt;

&lt;h3 id=&#34;not-all-tdds-are-the-same&#34;&gt;Not all TDDs are the same&lt;/h3&gt;

&lt;p&gt;There are two main styles of TDD with significant differences between them, mainly when it comes to design.&lt;/p&gt;

&lt;h4 id=&#34;classicist&#34;&gt;Classicist&lt;/h4&gt;

&lt;p&gt;The Classicist approach is the original approach to TDD created by Kent Beck. It’s also known as &lt;em&gt;Detroit School&lt;/em&gt; of TDD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Main characteristics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design happens during the refactoring phase.&lt;/li&gt;
&lt;li&gt;Normally tests are state-based tests.&lt;/li&gt;
&lt;li&gt;During the refactoring phase, the unit under test may grow to multiple classes.&lt;/li&gt;
&lt;li&gt;Mocks are rarely used, unless when isolating external systems.&lt;/li&gt;
&lt;li&gt;No up-front design considerations are made. Design completely emerges from code.&lt;/li&gt;
&lt;li&gt;It’s a great way to avoid over-engineering.&lt;/li&gt;
&lt;li&gt;Easier to understand and adopt due to state-based tests and no design up-front.&lt;/li&gt;
&lt;li&gt;Often used in conjunction with the 4 Rules of Simple Design.&lt;/li&gt;
&lt;li&gt;Good for exploration, when we know what the input and desired output are but we don’t really know how the implementation looks like.&lt;/li&gt;
&lt;li&gt;Great for cases where we can’t rely on a domain expert or domain language (data transformation, algorithms, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Problems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exposing state for tests purpose only.&lt;/li&gt;
&lt;li&gt;Refactoring phase is normally bigger when compared to Outside-In approach (more on that below).&lt;/li&gt;
&lt;li&gt;Unit under test becomes bigger than a class when classes emerge during the refactoring phase. This is fine when we look at that test in isolation but as classes emerge, they create life of their own, being reused by other parts of the application. As these other classes evolve, they may break completely unrelated tests, since the tests use their real implementation instead of a mock.&lt;/li&gt;
&lt;li&gt;Refactoring (design improvement) step is often skipped by inexperienced practitioners, leading to a cycle that looks more like RED-GREEN-RED-GREEN-…-RED-GREEN-MASSIVE REFACTORING.&lt;/li&gt;
&lt;li&gt;Due to its exploratory nature, some classes under test are created according to the “I think I’ll need this class with this interface (public methods)”, making them not fit well when connected to the rest of the system.&lt;/li&gt;
&lt;li&gt;Can be slow and wasteful since quite often we already know that we cannot have so many responsibilities in the class under test. The classicist advice is to wait for the refactoring phase to fix the design, only relying on concrete evidence to extract other classes. Although this is good for novices, this is pure waste for more experienced developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;outside-in&#34;&gt;Outside-In&lt;/h4&gt;

&lt;p&gt;Outside-In TDD, also known as &lt;em&gt;London School&lt;/em&gt; or &lt;em&gt;mockist&lt;/em&gt;, is a TDD style developed and adopted by some of the first XP practitioners in London. It later inspired the creation of BDD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Main characteristics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Different from the classicist, Outside-In TDD prescribes a direction in which we start test-driving our code: from outside (first class to receive an external request) to the inside (classes that will contain single pieces of behaviour that satisfy the feature being implemented).&lt;/li&gt;
&lt;li&gt;We normally start with an acceptance test which verifies if the feature as a whole works. The acceptance test also serves as a guide for the implementation.&lt;/li&gt;
&lt;li&gt;With a failing acceptance test informing why the feature is not yet complete (no data returned, no message sent to a queue, no data stored in a database, etc.), we start writing unit tests. The first class to be tested is the class handling an external request (a controller, queue listener, event handler, the entry point for a component, etc.)&lt;/li&gt;
&lt;li&gt;As we already know that we won’t build the entire application in a single class, we make some assumptions of which type of collaborators the class under test will need. We then write tests that verify the collaboration between the class under test and its collaborators.&lt;/li&gt;
&lt;li&gt;Collaborators are identified according to all the things the class under test needs to do when its public method is invoked. Collaborators names and methods should come from the domain language (nouns and verbs).&lt;/li&gt;
&lt;li&gt;Once a class is tested, we pick the first collaborator (which was created with no implementation) and test-drive its behaviour, following the same approach we used for the previous class. This is why we call outside-in: we start from classes that are closer to the input of the system (outside) and move towards the inside of our application as more collaborators are identified.&lt;/li&gt;
&lt;li&gt;Design starts in the &lt;em&gt;red&lt;/em&gt; phase, while writing the tests.&lt;/li&gt;
&lt;li&gt;Tests are about collaboration and behaviour, not state.&lt;/li&gt;
&lt;li&gt;Design is refined during the &lt;em&gt;refactoring&lt;/em&gt; phase.&lt;/li&gt;
&lt;li&gt;Each collaborator and its public methods are always created to &lt;em&gt;serve&lt;/em&gt; an existing client class, making the code read very well.&lt;/li&gt;
&lt;li&gt;Refactoring phases are much smaller, when compared to the classicist approach.&lt;/li&gt;
&lt;li&gt;Promotes a better encapsulation since no state is exposed for test purposes only,&lt;/li&gt;
&lt;li&gt;More aligned to the &lt;em&gt;tell, don’t ask&lt;/em&gt; approach.&lt;/li&gt;
&lt;li&gt;More aligned to the original ideas of Object Oriented Programming: tests are about objects sending messages to other objects instead of checking their state.&lt;/li&gt;
&lt;li&gt;Suitable for business applications, where names and verbs can be  extracted from user stories and acceptance criteria.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Problems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Much harder for novices to adopt since a higher level of design skill is necessary.&lt;/li&gt;
&lt;li&gt;Developers don’t get feedback from code in order to create collaborators. They need to &lt;em&gt;visualise&lt;/em&gt; collaborators while writing the test.&lt;/li&gt;
&lt;li&gt;May lead to over-engineering due to premature type (collaborators) creation.&lt;/li&gt;
&lt;li&gt;Not suitable for exploratory work or behaviour that is not specified in a user story (data transformation, algorithms, etc).&lt;/li&gt;
&lt;li&gt;Bad design skills may lead to an explosion of mocks.&lt;/li&gt;
&lt;li&gt;Behavioural tests are harder to write than state tests.&lt;/li&gt;
&lt;li&gt;Knowledge of Domain Driven Design and other design techniques, including 4 Rules of Simple Design, are required while writing tests.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;which-tdd-style-should-we-use&#34;&gt;Which TDD style should we use?&lt;/h3&gt;

&lt;p&gt;Both. All. They are just tools and as such, they should be used according to your needs. Experienced TDD practitioners jump from one style to another without ever worrying which style they are using.&lt;/p&gt;

&lt;h3 id=&#34;macro-and-micro-design&#34;&gt;Macro and micro design&lt;/h3&gt;

&lt;p&gt;There are two types of design: macro and micro design. Micro design is what we do while test driving code, mainly using the classicist approach. Macro design goes beyond the feature we are implementing. It’s about how we model our domain at a much higher level, how we split our application, layers, services, etc. Macro design helps us with the overall organisation of the application and provides ways for teams and developers to work in parallel without stepping on each other toes. Macro design refers to how the business sees the application and techniques like Domain-Driven Design are commonly used. Macro design also helps with consistency throughout the application. TDD won’t help you with macro design.&lt;/p&gt;

&lt;p&gt;Macro design is normally taken into account when using Outside-In TDD, but Outside-In on its own is not enough to define the macro design of an application.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Over the years I’ve seen many applications that have been test-driven and were still a pain to work with. OK, I admit that they were significantly better than the majority of the legacy applications which had no tests that I had to maintain before that.&lt;/p&gt;

&lt;p&gt;Any developer can make a mess regardless if they are writing tests or not. Developers can also test drive crap regardless of which TDD style they are using.&lt;/p&gt;

&lt;p&gt;TDD is &lt;strong&gt;not&lt;/strong&gt; a design tool. It’s a software development &lt;em&gt;workflow&lt;/em&gt; that has prompts for code improvement in its lifecycle. In these prompts (writing tests and refactoring), developers need to know some design guidelines (4 Rules of Simple Design, Domain Driven Design, SOLID, Patterns, Law of Demeter, Tell, Don’t Ask, POLA/S, Design by Contract, Feature Envy, cohesion, coupling, Balanced Abstraction Principle, etc) in order to make their code better. Just saying &lt;em&gt;refactoring&lt;/em&gt; isn’t enough to call TDD a design tool.&lt;/p&gt;

&lt;p&gt;Many developers blame TDD and mocks for slowing them down. They end up giving up on TDD because they struggle to get the result they want. In my opinion, no developer really struggles to understand the RED-GREEN-REFACTOR lifecycle. What they struggle with is how to design software well.&lt;/p&gt;

&lt;p&gt;The great thing about TDD is that it is constantly asking us “Hey, can you make your code better? See how hard testing this class is becoming? OK, you made it work. Here’s your green bar. Now make it better.” Besides that, you are on your own.&lt;/p&gt;

&lt;p&gt;TDD becomes much easier when we understand what good design looks like. Practicing and understanding the wealth of design guidelines available will make TDD much easier and useful. It will also reduce its learning curve and hopefully increase its adoption.&lt;/p&gt;

&lt;p&gt;Extremes are bad. We are going from BDUF (Big Design Up Front) to &lt;em&gt;no design at all&lt;/em&gt;. Throwing away our design knowledge is a mistake. Sure, we should not go back to the dark ages and over-engineer everything but thinking that we should only focus on micro design is also a mistake. If you are working on your own, doing a few katas, or working on a small application, then yes, do whatever you like. But if you are part of bigger team developing something that is significantly bigger than a kata, you will be doing your team a favour if you paid more attention to macro design and how you structure your code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Q&amp;A about The Software Craftsman</title>
      <link>http://codurance.com/blog/interview-with-sandro-mancuso/</link>
      <pubDate>Wed, 06 May 2015 01:26:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/interview-with-sandro-mancuso/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Our co-founder &lt;a href=&#34;http://twitter.com/sandromancuso&#34;&gt;Sandro Mancuso&lt;/a&gt; was &lt;a href=&#34;http://www.infoq.com/articles/mancuso-software-craftsman&#34;&gt;interviewed by Ben Linders from InfoQ&lt;/a&gt;. Below is the full transcript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the book &lt;a href=&#34;http://goo.gl/KgxKaw&#34;&gt;The Software Craftsman&lt;/a&gt;, Professionalism, Pragmatism, Pride Sandro Mancuso explores how craftmanship plays a role in agile software development. The book contains stories, examples and practical advice for software developers and other professionals involved in software projects to achieve technical excellence and customer satisfaction.&lt;/p&gt;

&lt;p&gt;InfoQ readers can download a &lt;a href=&#34;http://ptgmedia.pearsoncmg.com/images/9780134052502/samplepages/9780134052502.pdf&#34;&gt;sample of the book &amp;ldquo;The Software Craftsman&amp;rdquo;&lt;/a&gt; to get an impression of this book.&lt;/p&gt;

&lt;p&gt;InfoQ interviewed Mancuso about how companies can suffer from an agile hangover, why technical excellence matters and how to convince managers of that, productive partnerships, anti patterns in candidate interviews, creating a culture of learning and his practical approach to craftsmanship and doing technical practices.&lt;/p&gt;

&lt;h3 id=&#34;infoq-you-mentioned-that-with-agile-the-realization-that-the-team-as-a-whole-was-responsible-for-all-the-different-aspects-of-a-software-project-was-a-game-changer-can-you-elaborate-on-this&#34;&gt;InfoQ: You mentioned that with agile &amp;ldquo;the realization that the team as a whole was responsible for all the different aspects of a software project was a game changer&amp;rdquo;. Can you elaborate on this?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; Before we had silos and hierarchies. “Smart” people would define the requirements and design the system for a few months, if not years. They would then pass a pile of documents to the development team and tell them how much time the team would have to build the software. After all, it was just to type some code on the keyboard following the well-defined specifications. All the “thinking” had been done already. I guess we all know what happened to the vast majority of these projects.&lt;/p&gt;

&lt;p&gt;A software project is composed by many interdependent activities, ranging from a business idea to software available to be used. There are only three reasons to why software is built: make money, save money, or protect revenue. The more we delay to have software deployed to production, the more we delay to achieve one or more of these three things. If the end goal of a software project is to benefit from the value that the software will provide, anything that is done before the software goes live should be reduced to a minimum.&lt;/p&gt;

&lt;p&gt;Reducing waste is one of the main focuses of Lean and Agile and one way to achieve that is to shorten the feedback loop and improve communication. Instead of waiting for months (if not years) to have some software to show to clients and validate business ideas, we can have a team composed by business and developers that, together, constantly interacting with each other, can deliver small chunks of software very often. In some organisations, very often means multiple times a day.&lt;/p&gt;

&lt;p&gt;Having the whole team responsible for all the different aspects of a project reduces the feedback loop (ideas are quickly validated or invalidated) and can provide a much faster return on investment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-your-book-talks-about-how-companies-suffer-an-agile-hangover-what-do-you-mean-with-this&#34;&gt;InfoQ: Your book talks about how companies suffer an agile hangover. What do you mean with this?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; This is a term that &lt;a href=&#34;http://twitter.com/mashooq&#34;&gt;Mashooq Badar&lt;/a&gt; and I came up with a few years ago, almost as a joke. We were talking about companies that suddenly wake up, after a few years of Agile transformation, to realise that all those Post-Its on the wall and all the Agile coaches they hired really didn’t do much to increase the quality of their software and neither helped developers to get better. After a few years having fun in the “Post-It party”, some companies end up realising that the way they are developing software now is not really better than what it was before: they are not delivering software faster, they don’t have less bugs in production, they can’t go live as often as they wanted, they still have a QA phase at the end of each release, and there’s still no trust between business and developers. The Agile Hangover is the realisation that nothing (or at least, very little) was done to actually improve the quality of their software; it’s the realisation that in a software project the most important deliverable is the software itself and not the processes around it.&lt;/p&gt;

&lt;p&gt;Agile processes bring loads of benefits to organisations, where increasing visibility and reducing the feedback loop are the main ones. A small and quick feedback loop is what enables agility. However, if you only have an improvement in the process but still keep the same old developers working in the same old way when it comes to software development practices, being surprised that things are not better seems very naive to me. More and more we are seeing companies and managers complaining about Agile and saying that this Agile thing doesn’t work. Yes, that’s also one of the symptoms of the Agile Hangover.&lt;/p&gt;

&lt;p&gt;On a more positive note, Agile processes are helping companies to visualise their problems faster and putting them in a better position to fix their issues, which includes improving their technical capabilities. Companies that reach this stage of maturity (can visualise their issues and are willing to resolve them) are the ones that are in a better position to embrace Software Craftsmanship as a natural complement to their Agile adoption. It’s just a shame that some companies are taking far too long to realise that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-in-your-opinion-why-does-technical-excellence-matter-in-agile-how-does-it-make-a-difference&#34;&gt;InfoQ: In your opinion, why does technical excellence matter in agile? How does it make a difference?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; Agile was created to improve the way we deliver software. When we don’t focus on technical excellence, the quality of our software can drop to the point that it is very painful and slow to keep maintaining it. At this point, it doesn’t matter which Agile process you have because developers can’t go fast anymore, causing the company to loose its agility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-what-makes-it-so-difficult-to-convince-managers-that-technical-excellence-is-important-how-do-you-do-it&#34;&gt;InfoQ: What makes it so difficult to convince managers that technical excellence is important? How do you do it?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; There are good and bad managers. The good ones are the ones that keep themselves up-to-date with better ways of delivering a software project and also trust their teams to do the job. They are well informed, which makes conversations with the development team much easier. For the not so well informed managers, things are a bit more complicated because they don’t have enough knowledge to understand the seriousness of certain problems and the implications of certain decisions. I find Agile processes far more important when managers are not so well informed.&lt;/p&gt;

&lt;p&gt;As a first step to convince managers about technical excellence, I try a soft approach, with many conversations, explanations, and education. I also try to explain the value of certain practices when compared to the current approach. There are reasons why developers want to adopt certain technical practices or improve the system, and those reasons need to be expressed in a way that managers can understand. Let’s take TDD as an example. Instead of saying that we need more time to write tests, we need to say that we want to shorten our feedback loop when it comes to testing and deploying a new release into production. Let’s say we currently have a 2-week testing phase after a few weeks of development, done by a separate QA team. Wouldn’t it be nice to only push a button and be confident, in a matter of minutes, that our software is tested and good enough to go live? Wouldn’t it be great if we could press this button at anytime, as many times we want? That’s value for the business. Now let’s take continuous integration as another example. Wouldn’t it be nice if whenever a team member adds/changes some code, we could all be immediately that our system is still working and can be deployed into production? Wouldn’t be nice if we could impede that new code is created on top of buggy code, significantly reducing re-work and unnecessary maintenance? And what about pair-programming? Wouldn’t it be nice if we had absolutely no key-person dependency? If we never needed to wait for anyone to come back from holidays, or never be desperate because someone is leaving the company? Wouldn’t it be nice if everyone had a good level of understanding of all parts of the system? This is also value to the company. And what about keeping a constant velocity, regardless how old or big the system gets? Those are only a few of the benefits of focusing on technical excellence.&lt;/p&gt;

&lt;p&gt;However, we cannot ignore that certain practices may come with an initial cost and managers may refuse them because of that. In this case, I would ask them how much value our current practices are bringing when compared to the ones we are suggesting. How long is our current feedback loop? How many times in a year (or any other period of time) do we feel comfortable to go live with a new release? Are there any other practices out there that could make us better? These are the type of conversations I like to have with managers. It’s not about a specific technical practice, but about the value that a technical practice bring when compared to our current approach.&lt;/p&gt;

&lt;p&gt;Another thing I always push for is to make everything very visible: have a Scrum/Kanban board showing the team’s progress (or lack of it), have build radiators showing the health of our system, and also communicate every problem to the team (and manager) straightaway. There is a thing I’ve learned from Mashooq Badar: If you internalise a problem, it is your problem. If you communicate the problem to the rest of the team, it’s everyone’s problem. Making problems visible normally would force managers care about them, or at least help us to do our job in order to solve them. Ignoring problems that were clearly highlighted by the team may be very detrimental to a manager’s position and will force them to play a more active role in finding the solution. And in the event where nothing else is working I would escalate and also make sure that all our concerns are done in writing and sent to the appropriate people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-the-manifesto-for-craftsmanship-talks-about-productive-partnerships-can-you-explain-what-they-are-and-how-they-can-help-to-produce-better-software&#34;&gt;InfoQ: The manifesto for craftsmanship talks about productive partnerships. Can you explain what they are, and how they can help to produce better software?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; A career of a software craftsman goes way beyond any project or company. However, every craftsman wants to build a career on top of successful projects—projects they are proud of. Every time a craftsman joins a project, he or she are putting their career and reputations on the line.&lt;/p&gt;

&lt;p&gt;In order to build a successful career and a great reputation, it is paramount that we see each engagement as a partnership, regardless if we are a permanent employee, contractor, or consultant. The contractual model with our clients should not make us behave (or be treated) in a different way. Once we are in the team, we should be fully committed to the success of that project.&lt;/p&gt;

&lt;p&gt;Being in a partnership with our clients means that we should do whatever it is in our power to make the project succeed, offering ideas, alternatives, and solutions. Keeping our heads down and doing what we are told is not being in a partnership. We can do far more than that. We know what technology can do to help our clients and a key part of our job is to provide them options. Successful projects mean happy clients/employers and a successful career.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-you-mentioned-that-sometimes-developers-objections-against-technical-practices-take-for-instance-pair-programming-some-love-it-and-others-hate-it-why-do-developers-object-against-working-in-pairs-any-suggestions-how-to-deal-with-it&#34;&gt;InfoQ: You mentioned that sometimes developers objections against technical practices. Take for instance pair programming, some love it, and others hate it. Why do developers object against working in pairs? Any suggestions how to deal with it?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; I don’t think there is a single answer to this question. People are different and each person might have a very different reason to why she doesn’t like to pair. A few common ones I found over the years are: lack of confidence, shyness, lack of trust, work load, management pressure, fear of exposing their ignorance, feeling of not being productive, personality clashes, job security (not willing to share what she knows), fear that someone will find that she can’t do things on her own. The list goes on.&lt;/p&gt;

&lt;p&gt;The first thing that must be addressed is management support. Developers are far less inclined to adopt XP practices when they fear that their managers will disapprove. It needs to be clear for the development team that they are free to do whatever they think is best to deliver quality software in a timely manner.&lt;/p&gt;

&lt;p&gt;The second thing to be addressed is team spirit. It’s the whole team responsibility to create an environment where it is OK to expose our ignorance. In fact, exposing our ignorance should be encouraged. This should be treated as a sign that people are keen to learn. “Hey, I don’t know much about our deployment process. Can I pair with someone on this in the next task?”&lt;/p&gt;

&lt;p&gt;When a developer is not so keen to pair with others, it’s the responsibility of the other developers to make this person feel comfortable pairing with them. The best trick I use is to invite someone that doesn’t like to pair to “help” me. “Hi Paul, I’m working on this part of the application but I’m struggling a bit. Would you mind to sit down with me and help me a little bit?” As soon as the person sits next to you, you are already pairing. Ask her opinion. Involve her in your thought process. If you have a better idea about how to solve something, don’t criticise the other person’s idea. Make your idea a suggestion. If the person rejects your suggestion, don’t try to force it. Ask her questions and let her figure out the shortcomings of her own ideas.&lt;/p&gt;

&lt;p&gt;Last, but not least, there is the business aspect. It’s important that every developer understands that a software project is not about them. Having people working in isolation brings a big risk to the business. Pairing should be encouraged not only because of quality but also to reduce the key person dependency risk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-your-book-contains-a-chapter-describing-interview-anti-patterns-why-did-you-decide-to-include-this&#34;&gt;InfoQ: Your book contains a chapter describing interview anti patterns. Why did you decide to include this?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; Every company wants to hire “the best” people, but the truth is, they have no clue how. Go to any technical community, call a group of developers and ask them about their interview experiences. Grab a seat and a drink first because you are about to hear the longest rant of your life.&lt;/p&gt;

&lt;p&gt;Recruitment is an essential part of any business and developers, technical leaders, and hiring managers need to learn how to interview. They need to learn what they should or shouldn’t do during an interview. Experienced developers are in extremely high-demand and very rarely looking for a job. If a company gets a chance to bring one in for an interview, they cannot screw it up. Experienced developers are not only there to be interviewed; they are there to interview the company as well, starting by the interviewers.&lt;/p&gt;

&lt;p&gt;My idea with the second half of the book was to help companies to attract and retain software craftsmen and that’s why I dedicated a couple of chapters to recruitment and interviews.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-you-stated-that-creating-a-culture-of-learning-is-one-of-the-most-efficient-ways-of-injecting-passion-into-a-company-what-can-organizations-do-to-have-empowered-employees-who-want-to-learn-and-develop-themselves&#34;&gt;InfoQ: You stated that &amp;ldquo;creating a culture of learning is one of the most efficient ways of injecting passion into a company&amp;rdquo;. What can organizations do to have empowered employees who want to learn and develop themselves?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; First they need to put their money where their mouth is. It’s quite common to hear managers saying that they want passionate people, but as soon as some employees ask for a couple hours a week to practice and share knowledge, the answer is: “Sorry guys, we need to meet this deadline and we can’t afford to miss a couple of hours per week… at least not in the next… five years.”&lt;/p&gt;

&lt;p&gt;Creating a culture of learning is much simpler and cheaper than many companies think. They just need to get out of the way and let it happen. Maybe buy a few pizzas here and there. I know because we’ve done it in a global department inside an investment bank without asking for any management support. In fact, we didn’t tell them anything. When they realized, there were already quite a few of us meeting regularly, coding together, and sharing ideas.&lt;/p&gt;

&lt;p&gt;We just need one or two people willing to organize something and an empty meeting room (or any other space where people can get together). Meetings can happen at lunchtime, once or twice a week. This is how we started. I told people that I was going through the “Seven Languages in Seven Weeks” book and asked if they wanted to join me. At first, just two people joined. Then, as a week or two went by, developers kept seeing us with our laptops having fun at lunchtime and also talking about the things we were learning during coffee breaks. They got more excited and decided to join in. At some point, we were running a few sessions a week (hands-on sessions, talks, discussions) about different things, with more than 20 developers.&lt;/p&gt;

&lt;p&gt;When people are having fun, others will join in. Enlightened companies will appreciate the efforts made by their employees and will do whatever they can to nurture their passion, giving them time to learn.&lt;/p&gt;

&lt;p&gt;Companies should never force people to get together so that they can “improve themselves.” When people are forced, it becomes work and that is not the idea. Let the people organise themselves. Let them decide what they want to learn and how often they are going to meet. The only thing the company (managers in this case) need to do is to make sure that everyone knows that they don’t need to ask authorisation to take a couple of hours here and there to meet and learn. People normally understand the urgency of their work and can plan accordingly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-in-your-book-you-wrote-about-pragmatism-a-practical-approach-to-craftsmanship-and-doing-technical-practices-can-you-elaborate-on-that&#34;&gt;InfoQ: In your book you wrote about pragmatism, a practical approach to craftsmanship and doing technical practices. Can you elaborate on that?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; Software Craftsmanship is becoming more and more popular. With that, more developers are calling themselves craftsmen and embracing Software Craftsmanship values. Companies are also trying to embrace Software Craftsmanship and are paying far more attention to the quality of the software they produce.  At the same time that this is a good thing, when certain ideas become popular, their core message gets diluted and often misunderstood. Agile is a great example of that. How many companies claim to be working in an Agile fashion today? If we brought some of the Agile originators into these companies, how many companies would they say that are really working according to the values they defined? My fear is that, if we are not careful, Software Craftsmanship will go towards the same direction.&lt;/p&gt;

&lt;p&gt;One of the core values of Software Craftsmanship is “productive partnership” [with our customers.] In summary, that means, helping our customers to achieve whatever they want to achieve in a sustainable way, via well-crafted software. However, well-crafted software is pointless if it is not providing any value to customers. It’s pointless to have code that is beautifully written, fully tested, and designed according to the latest fad, if it can’t be delivered in time and at an affordable price. Understanding our customer’s needs is paramount for any craftsman. We also need to understand that writing software for a large investment bank is different from writing software for a small startup. Building software for an insurance company is different from creating an online store for a small business. It’s important we understand the context we are in and adapt our process accordingly. What is the cost of a bug? In certain places, a bug in production may be catastrophic while in others, it’s probably much cheaper than not going live at all.&lt;/p&gt;

&lt;p&gt;Our industry loves extremes: From BDUF (Big Design Up Front) to no design at all. From long cycles of manual testing to layers and layers of automated testing. From monolith applications to hundreds of small classes being deployed as [micro]services. It seems that everyone is looking for a magical recipe and trying to apply it everywhere. Where before people were complaining about lack of quality, now they are complaining that this “quality” thing is too expensive and takes too long.&lt;/p&gt;

&lt;p&gt;Yes, of course we have values. Of course we care about the quality of our work. But above all, we should be pragmatic and get things done. Good practices are good until we find better ones to replace them. Some developers are treating certain practices, tools, design styles, and programming paradigms as a religion, forgetting that they have a software to deliver and, most importantly, a customer paying for it. At the end of the day, the main judges of the quality of our work are our customers. Regardless of which tools we use or how we call ourselves, if our clients are unhappy, we cannot say we are doing a good job.&lt;/p&gt;

&lt;p&gt;Mastering our tools and practices is a way to reduce the quality cost, and that can be achieved by deliberate practice. Customers should not pay more because we decided to use a certain practice or tool. Typing has never been the bottleneck in a software project, and neither should be any of the practices and tools we chose to use. Well-crafted code is a means to an end, where the end is customer satisfaction. Failing to understand that is failing to understand Software Craftsmanship.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Please see the &lt;a href=&#34;http://www.infoq.com/articles/mancuso-software-craftsman&#34;&gt;original interview&lt;/a&gt; on the &lt;a href=&#34;http://www.infoq.com/articles/mancuso-software-craftsman&#34;&gt;InfoQ website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>User Story Guidelines</title>
      <link>http://codurance.com/blog/user-stories-guidelines/</link>
      <pubDate>Fri, 20 Mar 2015 21:22:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/user-stories-guidelines/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Disclaimer: This post was extracted from an internal Codurance document used to help our apprentices to learn how we work. We all understand that each project is different and that by no means we can apply exactly the same techniques and practices everywhere. However, the text below serves not only as a foundation but also as a guideline for all of us when it comes to user stories. There are many good books and posts written about user stories. By no means this post is meant to be a summary of all the good practices around this area.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;User stories are a good way to gather requirements, agree on what needs to be done, and provide visibility of the work being done to clients. They also help us prioritise the work to be done according to the value they add at a given point in time.&lt;/p&gt;

&lt;p&gt;Below are a few guidelines in how we work with user stories.&lt;/p&gt;

&lt;h2 id=&#34;capturing-requirements&#34;&gt;Capturing requirements&lt;/h2&gt;

&lt;p&gt;The main objective of creating user stories is to understand what needs to be done. They document the expected behaviour that an application needs to provide. This is best achieved through a close collaboration between product owner (who represents the business needs and are in charge of priorities) , business analysts, QAs and the rest of the development team.&lt;/p&gt;

&lt;h2 id=&#34;user-story-lifecycle&#34;&gt;User story lifecycle&lt;/h2&gt;

&lt;p&gt;User stories start as an idea for the behaviour. This behaviour must also be associated to some value that will be added to the business once implemented.&lt;/p&gt;

&lt;p&gt;At first, a user story is just an idea and it only has a title describing the behaviour expected, with no details on. E.g. Music Player, Report fixed income trades, Display user feed. Product Owner elicits the stories from the business. Team members may also add stories to the product backlog in collaboration with the product owner.&lt;/p&gt;

&lt;p&gt;The Product Owner must prioritise the stories that the development team will work on in the next iteration. This is done by moving the stories to the top of the product backlog, in order of importance. This is done for just a few stories, not all. The stories at the top of the backlog have the highest business value at that point in time.&lt;/p&gt;

&lt;p&gt;Once stories are prioritised, they should be refined. At this point the Product Owner will start specifying the behaviour expected. They will enough details so that the developers have enough information to start implementing the story.&lt;/p&gt;

&lt;h2 id=&#34;user-story-refinement&#34;&gt;User story refinement&lt;/h2&gt;

&lt;p&gt;A story must have the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The value that it brings to the business (or specific actor/role)&lt;/li&gt;
&lt;li&gt;The detailed description of the behaviour expected, preferably with some examples, if applicable.&lt;/li&gt;
&lt;li&gt;The acceptance criteria, that means, everything that needs to be done by the development team so that the product owner can “accept” the story (agree that the story is done.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;user-story-template&#34;&gt;User story template&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;original&lt;/em&gt; template for a user story was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As a &amp;lt;actor/role&amp;gt;
I would like to &amp;lt;desired action&amp;gt;
So that &amp;lt;business value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our preferred template is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In order to &amp;lt;get some value&amp;gt;
As a &amp;lt;actor/role&amp;gt;
I would like to &amp;lt;desired action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The latter template helps us focus on the business value first. In many occasions, when using the default template, we were able to complete the first two steps and struggle to complete the third. The problem with not focusing on the third step is that we may end up building features that don’t really have any business value. Focusing on writing the business value first, forces us to discuss the real relevance of the story.&lt;/p&gt;

&lt;p&gt;Besides the business description, a story should be enriched with examples whenever possible.&lt;/p&gt;

&lt;p&gt;The final part is the Acceptance Criteria. This is where we describe details of the expected behaviour including the edge cases. The acceptance criteria is what is used by the product owner to “accept” a story. Acceptance Criteria is the ideal source for the automated tests.&lt;/p&gt;

&lt;h3 id=&#34;example-story-1-credit-card-payment&#34;&gt;Example Story 1: Credit Card Payment&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;In order to buy the items I need
As a customer
I would like to specify the credit card I want to use.

Acceptance criteria

* User must to have at least one item in the shopping basket in order to go to make the payment
* £2.00 fee should be added when amount to be paid is less than £10.00
* Accepted Credit Cards are: Visa, MasterCard, and American Express
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-story-2-playlists&#34;&gt;Example Story 2: Playlists&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;In order to easily find and listen to my favourite songs
As a music fan
I would like to organise my songs into playlists.

Acceptance criteria

* A playlist can be empty
* A song can be added to multiple playlists
* A song can only be added once to a playlist
* Playlists should have a unique name

Examples

| Playlist name | Songs                                 |
| Punk/Rock     | God Save The Queen, American Jesus    |
| Classic Rock  | Sultans of Swing, Sweet Child of Mine | 
| General       | Sultans of Swing, Censura             | 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;_Further reading: &lt;a href=&#34;http://en.wikipedia.org/wiki/Specification_by_example&#34;&gt;Specification by Example&lt;/a&gt;_&lt;/p&gt;

&lt;h2 id=&#34;breaking-stories-into-tasks&#34;&gt;Breaking stories into tasks&lt;/h2&gt;

&lt;p&gt;In order to estimate a story, developers should break down the stories into technical tasks. Each task should reflect a small and measurable piece of work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task for Example Story 2: Playlists&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s assume we are building a web application with AngularJS in the front end and Java, Dropwizard, and MongoDB in the backend.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the API used by the front end.&lt;/li&gt;
&lt;li&gt;UI changes for capturing a new playlist name (see mockup)&lt;/li&gt;
&lt;li&gt;Dropwizard endpoint for playlist creation&lt;/li&gt;
&lt;li&gt;Playlist service / repository interface&lt;/li&gt;
&lt;li&gt;Playlist persistence on MongoDB&lt;/li&gt;
&lt;li&gt;UI changes for adding songs to playlist (see mockup)&lt;/li&gt;
&lt;li&gt;Dropwizard endpoint for adding songs to playlist&lt;/li&gt;
&lt;li&gt;Persist songs added to playlist in MongoDB&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Should items 7 and 8 be part of this story? The short answer is &lt;em&gt;no&lt;/em&gt;. Although related, the tasks represent two different concepts: creating playlists and adding songs to playlists. More about that below.&lt;/p&gt;

&lt;h3 id=&#34;breaking-stories-in-to-smaller-stories&#34;&gt;Breaking stories in to smaller stories&lt;/h3&gt;

&lt;p&gt;Sometimes we know we need to break a story into smaller stories just looking at the name or description of it. E.g: Process a trade, Music player, etc. What type of trade? How many types do we have? Do they have different rules? Even processing a single trade can be massive. Do we need to enrich the data? Do we need to report the trade to different regulators? Do the trades come from a single source? Do they have the same format? We can also have loads of questions about a music player. Are we playing music that is stored locally? Are we streaming? If yes, from which sources? How many formats should we support? Should we be able to fast-forward, pause, and rewind? Do we start playing a song from where we stopped previously? Do we display any information about the song being played? If yes, where do we get the information from?&lt;/p&gt;

&lt;p&gt;As you can see, we cannot have a story that caters for an entire feature. Another way of putting it is, Processing a Trade and Music Player are not stories, they are features. Features are often referred to as epics however we believe that feature is a better term.&lt;/p&gt;

&lt;p&gt;When refining stories, it is our job as developers to ask all these questions to the product owners. Depending on the answers, we should create stories that will represent the different behaviours.&lt;/p&gt;

&lt;h4 id=&#34;what-happens-when-the-product-owner-doesn-t-know-the-answer&#34;&gt;What happens when the product owner doesn’t know the answer?&lt;/h4&gt;

&lt;p&gt;Well, there are a few possibilities here. Sometimes it is possible to help the product owner giving a few suggestions and explaining the cost/trade-offs of each one of them. Sometimes the whole team can just brainstorm ideas and pick one. However, depending on the domain, developers may not be equipped with enough business knowledge to even make suggestions. In these cases, we can create a story representing the behaviour being discussed and add it to the backlog. Whenever the product owner gets an answer, she will then prioritise that story or simply delete it from the backlog.&lt;/p&gt;

&lt;h2 id=&#34;estimation&#34;&gt;Estimation&lt;/h2&gt;

&lt;p&gt;There is a big debate about estimation. However, the debate is more about estimation in general, mainly big up-front estimation (search for #noestimates hashtag on Twitter for more.)&lt;/p&gt;

&lt;p&gt;We find the act of estimating top priority stories valuable, mainly in cases where the team is not mature enough (doesn’t master all the technologies used in the system, communication with business is not optimal, lack of business domain, etc.)&lt;/p&gt;

&lt;p&gt;Estimating a user story forces us to think about all the technical tasks we need to implement in order to complete the story. Once we have the list of tasks, we can then start estimating them in isolation. Let’s take the tasks for the Playlist story:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the API used by the front end (2 hours)&lt;/li&gt;
&lt;li&gt;UI changes for capturing a new playlist name (3 hours)&lt;/li&gt;
&lt;li&gt;Dropwizard endpoint for playlist creation (2 hours)&lt;/li&gt;
&lt;li&gt;Playlist service / repository interface to add playlists (2 hours)&lt;/li&gt;
&lt;li&gt;Playlist persistence on MongoDB (1 hour)&lt;/li&gt;
&lt;li&gt;UI changes for adding songs to playlist (12 hours)&lt;/li&gt;
&lt;li&gt;Dropwizard endpoint for adding songs to playlist (2 hours)&lt;/li&gt;
&lt;li&gt;Persist songs added to playlist in MongoDB (1 hour)&lt;/li&gt;
&lt;li&gt;[ADDED] Playlist service / repository interface to add songs to play list (3 hours)&lt;/li&gt;
&lt;li&gt;[ADDED] Notification event that new playlist was created (2 hours)&lt;/li&gt;
&lt;li&gt;[ADDED] Notification event that song was added to playlist (2 hours)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;estimation-side-effects&#34;&gt;Estimation side-effects&lt;/h3&gt;

&lt;p&gt;When trying to estimate the tasks, we realised we forgot a few tasks (9, 10, and 11), so we added them. The total hours estimated for this story is 32 hours. Adding more tasks made it clear that this story must be split into two: create playlists and add songs to playlists.&lt;/p&gt;

&lt;p&gt;Another interesting thing about estimating this story is that we now noticed that if we count our days as if they only had 5 productive hours (uninterrupted coding hours), this story would take approximately 6.4 days. This is a little too big for a user story, which is another reason to break the story in two.&lt;/p&gt;

&lt;h4 id=&#34;how-small-is-small&#34;&gt;How small is small?&lt;/h4&gt;

&lt;p&gt;Think about Single Responsibility Principle (SRP). Yes, the one from SOLID. Our user stories should represent a single, small, and testable concept.&lt;/p&gt;

&lt;p&gt;As a guideline, a story should not be bigger than &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; (one third) of an iteration. That means, if you are working on a two-week iteration, stories should not be bigger than 3 days. Tasks, on the other hand, should not be bigger than half-day (2 to 4 hours.)&lt;/p&gt;

&lt;h2 id=&#34;spikes&#34;&gt;Spikes&lt;/h2&gt;

&lt;p&gt;Let’s take the following task as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5. Playlist persistence on MongoDB (1 hour)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this is the first task where we needed to use MongoDB and we never did any MongoDB persistence in the past, there is a chance that we don’t really know what we need to do and how long it is going to take. We need to research a little bit, maybe even try a few things out before we can estimate the task.&lt;/p&gt;

&lt;p&gt;That’s what spikes are for. Spikes are a time-boxed investigation activity where the outcome of it is documenting the results of the investigation and also stories and tasks refinements, including estimations. Once we spend a day or two investigating how to install, connect, and store data on MongoDB, we are in a better position create/adjust tasks and estimate them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spikes should not be done as part of a story&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spikes are done in isolation, never as part of a story. If the story depends on the investigation done by the spike, the spike should be prioritised and the story should remain on the backlog. Once the spike is done, the story can then be refined and scheduled to the following iteration.&lt;/p&gt;

&lt;p&gt;Spike is a special type of story where the value is a better understanding of what or how something can be achieved.&lt;/p&gt;

&lt;h2 id=&#34;technical-stories&#34;&gt;Technical stories&lt;/h2&gt;

&lt;p&gt;Generally, they should be avoided. We should only have stories that provide business value. Technical tasks should be added to business stories instead. The reason for that is to always focus on delivering value to our customers instead of going crazy with architecture and infrastructure.&lt;/p&gt;

&lt;h3 id=&#34;when-to-use-technical-stories&#34;&gt;When to use technical stories&lt;/h3&gt;

&lt;p&gt;Technical stories are quite common at the beginning of a project. There are many things that need to be in place before we start working. E.g. Continuous Integration, UAT/Test environment, source control, etc. There is also loads of infrastructure/architecture work that needs to be done in order to satisfy the first stories. E.g. Create databases, package and deploy the application, etc. On top of that, there are always non-functional requirements that also need to be met. E.g.: performance, security, logging, etc.&lt;/p&gt;

&lt;h4 id=&#34;express-business-value&#34;&gt;Express business value&lt;/h4&gt;

&lt;p&gt;Technical stories cannot be ignored. However, when writing them, we need to express the business value they bring. E.g. Protect users data, support a bigger number of concurrent users, improve the user experience with better response time, etc.&lt;/p&gt;

&lt;p&gt;Expressing the business value of a technical story is extremely important. This gives the business a better understanding of why certain things need to be done. Business can also analyse the risks of not doing certain things and prioritise them accordingly.&lt;/p&gt;

&lt;h3 id=&#34;technical-versus-business-stories&#34;&gt;Technical versus Business stories&lt;/h3&gt;

&lt;p&gt;Whenever possible, we should not have infrastructure/architectural tasks inside business stories. E.g. We should not have a task related to add databases to a cluster in a business story about creating a client.&lt;/p&gt;

&lt;p&gt;Non-functional requirements like performance improvement, caches, clusters, communication protocols, should have their own technical stories.&lt;/p&gt;

&lt;h2 id=&#34;i-n-v-e-s-t&#34;&gt;I.N.V.E.S.T.&lt;/h2&gt;

&lt;p&gt;The INVEST mnemonic was created by Bill Wake as a reminder of the characteristics of a good quality user story, as may be used in a Scrum backlog or XP project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;ndependent:   The user story should be self-contained, in a way that there is no inherent dependency on another user story.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt;egotiable:   User stories, up until they are part of an iteration, can always be changed and rewritten.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;aluable: A user story must deliver value to the end user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;stimable:    You must always be able to estimate the size of a user story.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;calable (small sized):   User stories should not be so big as to become impossible to plan/task/prioritize with a certain level of certainty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;estable: The user story or its related description must provide the necessary information to make test development possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more about INVEST, check its &lt;a href=&#34;http://en.wikipedia.org/wiki/INVEST_%28mnemonic%29&#34;&gt;wikipedia page&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-should-we-care-about-all-these&#34;&gt;Why should we care about all these?&lt;/h2&gt;

&lt;p&gt;There are a few reasons to why we do all the things described above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visibility:&lt;/strong&gt; Working in small increments provides good visibility of what has been done, what is being done, and what is left to be done. Tasks and stories are constantly on the move, navigating quickly through the different lanes in our Scrum boards, from &lt;em&gt;TO DO&lt;/em&gt; to &lt;em&gt;DONE&lt;/em&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback:&lt;/strong&gt; Business and development team have a constant feedback of how things are going. This allows both to react quickly and change priorities. If something goes wrong with a story, we may only loose a few hours or days of work and not weeks or months.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Team morale:&lt;/strong&gt; Morale is always up when we constantly achieve goals, that means, moving tasks and stories to done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agility:&lt;/strong&gt; Working in small batches allow us to deploy often, get feedback quickly, and adapt when necessary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Team organisation:&lt;/strong&gt; With well-define and small stories and tasks, it is easier to split and parallelise work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;This post was written by Sandro Mancuso in collaboration with Mashooq Badar.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rethinking Pair Programming</title>
      <link>http://codurance.com/blog/rethinking-pair-programming/</link>
      <pubDate>Sun, 15 Mar 2015 22:49:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/rethinking-pair-programming/</guid>
      <description>

&lt;p&gt;By default, we always do our work in pairs. We strongly believe that the quality achieved by two people working on the same task is superior to when done by a single person. However, there are times where pairing is not very efficient.&lt;/p&gt;

&lt;h2 id=&#34;pair-programming-pitfalls&#34;&gt;Pair programming pitfalls&lt;/h2&gt;

&lt;p&gt;In a professional environment, pairing with developers who have a different software development foundation can be slow, tiring, and quite frustrating. Let’s explore a few pair programming pitfalls.&lt;/p&gt;

&lt;h3 id=&#34;pair-programming-can-be-slow-and-frustrating&#34;&gt;Pair programming can be slow and frustrating&lt;/h3&gt;

&lt;p&gt;Having to explain and agree on every single variable name can be extremely annoying. Things get even worse when discussing design decisions. Debates can last minutes, if not hours. Frustration kicks in. How many times, while pairing, we though: “Oh, come on man. How can you disagree with this? It’s common sense. Can we stop debating and just finish the bloody story?” Over the years I came to learn that common sense doesn’t exist. It’s only a phrase people use when they run out of arguments.&lt;/p&gt;

&lt;p&gt;**How to improve it: **Pair-programming becomes far more efficient and pleasant when developers don’t need to discuss basic concepts like the size of a method, Single Responsibility Principle, how to name a variable, and some basic software design principles. When developers have a similar foundation, they can purely focus on finding a better solution to the problem instead of wasting their time with unnecessary discussions. One way to bring the whole team to the same level of understanding is to organise regular technical meetings (hands-on sessions, book club, roundtable discussions, etc.), define team standards, retrospectives, and code reviews.&lt;/p&gt;

&lt;h3 id=&#34;pair-programming-can-be-very-tiring&#34;&gt;Pair programming can be very tiring&lt;/h3&gt;

&lt;p&gt;Spending the whole day pairing with someone can be very tiring. We need to justify and agree on every single line of code. Things that are trivial for one developer may not be as trivial for another developer. As eXtreme Programming becomes more popular, pair programming is becoming mandated in certain companies. Developers are asked to arrive at the same time, break for lunch at the same time, and leave at the same time, just because they need to be pairing full time. By the end of the day, developers are exhausted, as they had no time for themselves.&lt;/p&gt;

&lt;p&gt;**How to improve it: **Developers need some alone time. Regular breaks are important. Using the Pomodoro technique is a good way to force regular breaks. More tips below.&lt;/p&gt;

&lt;h3 id=&#34;pair-programming-can-stifle-creativity&#34;&gt;Pair programming can stifle creativity&lt;/h3&gt;

&lt;p&gt;One of our clients recently asked me if their UX and UI teams should also do their work in pairs. Overall, I think it is a good idea, however, there are times that you need space to create and innovate. There are times when you have a few half-baked ideas you want to explore but you are not in a position to verbalise them yet. This is also true for software design. Sometimes, we need some alone time in order to create. Creativity and innovation very rarely emerge in an environment where you are pressured by time or by a person sitting next to you waiting for you to explain what you are planning to do.&lt;/p&gt;

&lt;p&gt;**How to improve it: **It should be OK for any team member to express her desire to work on a task alone. That doesn’t mean that other team members will not review her work. After working alone for a short period of time, the person could then present her ideas to the rest of the team and choose a pair to polish and finish the work.&lt;/p&gt;

&lt;h3 id=&#34;inexperienced-developers-not-always-benefit-from-pairing&#34;&gt;Inexperienced developers not always benefit from pairing&lt;/h3&gt;

&lt;p&gt;Pair programming is a great way to mentor inexperienced developers. However, it cannot happen 100% of the time. Speaking to our apprentices, they said that although it was great to have someone &lt;em&gt;teaching&lt;/em&gt; them full time, they also needed some time alone to do their own research and make their own mistakes. Developers learn by doing it and they need some space to do things at their own speed. Our apprentices felt that although they were learning a lot from our craftsmen, they were not assimilating everything.&lt;/p&gt;

&lt;p&gt;Pairing an experienced developer with an inexperienced developer is a great way to give the inexperienced developer an idea of how things work. However, the side effect of this is not always positive: the inexperienced developer ends up not spending enough time researching, trying things out, and making mistakes. The inexperienced developer may learn how the more experienced developer does things but she can’t fully understand why.&lt;/p&gt;

&lt;p&gt;**How to improve it: ** A better way to mentor inexperienced developers would be to start a task as a pair, give some high-level directions, and then let the inexperienced developer do the task on her own. If she gets stuck, she can always ask for help. Once she is done, the experienced developer should review her work. At that point, if improvements are suggested, both developers can compare the different approaches.&lt;/p&gt;

&lt;h2 id=&#34;general-guidelines&#34;&gt;General guidelines&lt;/h2&gt;

&lt;p&gt;Like a football team, developers should have the same goals and work as a team. However, we also need to provide space for individual creativity. The best football teams win games not only because of their great teamwork but also because of their individual talent. A single individual play can change the whole game.&lt;/p&gt;

&lt;p&gt;Some people work better in the morning. Others, like myself, work far better in the evenings. But it is important to have a time where the whole team is together, working in pairs. We recently agreed as a team to have our “pairing hours” from 10am to 5pm. This way, people can have some time alone either early in the morning or late in the afternoon.&lt;/p&gt;

&lt;p&gt;By default, we prefer to work in pairs. We have no doubts about the benefits of pair programming. However, we also believe that providing space for individual creativity and learning is essential.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Balanced Abstraction Principle</title>
      <link>http://codurance.com/blog/balanced-abstraction-principle/</link>
      <pubDate>Tue, 27 Jan 2015 10:30:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/balanced-abstraction-principle/</guid>
      <description>

&lt;p&gt;One of the things that make code complicated to read and understand is when the instructions inside a method are at different levels of abstraction.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that our application only allows the logged-in user to see trips from her friends. If users are not friends, no trips should be displayed.&lt;/p&gt;

&lt;p&gt;An example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Trip&amp;gt; tripsByFriend(User user, User loggedInUser) {
    return (user.friends().contains(loggedInUser))    
                    ? userRepository.findTripsBy(user.id())
                    : Collections.emptyList();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the code above, all the instructions in the body of the method are in different levels of abstraction. We have instructions validating friendship, instructions that fetch the list of trips of a friend via a collaborator, and a low level Java API that return an empty and immutable list. On top of that, we have the business behaviour itself.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s look at a refactored version of the same method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;Trip&amp;gt; tripsByFriend(User user, User loggedInUser) {
    return (user.isFriendsWith(loggedInUser)) 
                    ? tripsBy(user)
                    : noTrips();
}

private List&amp;lt;Trip&amp;gt; tripsBy(User user) {
    userRepository.findTripsBy(friend.id());
}

private List&amp;lt;Trip&amp;gt; noTrips() {
    return Collections.emptyList();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this new version, we extracted the low-level abstractions to private methods and also moved some behaviour to the User class. With this change, all the instructions are on the same level of abstraction, making it clear what the business rule is. The public method is now telling us a story, without worrying about technical implementation details. The code now reads without any bumps: &amp;ldquo;If user is friends with the logged-in user, return trips by user, otherwise return no trips.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;balanced-abstraction-principle-bap&#34;&gt;Balanced Abstraction Principle (BAP)&lt;/h3&gt;

&lt;p&gt;The Balanced Abstraction Principle defines that all code constructs grouped by a higher-level construct should be on the same level of abstraction. That means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All instructions inside a method should be at the same level of abstraction&lt;/li&gt;
&lt;li&gt;All public methods inside a class should be at the same level of abstraction&lt;/li&gt;
&lt;li&gt;All classes inside a package/namespace&lt;/li&gt;
&lt;li&gt;All sibling packages/namespace inside a parent package/namespace&lt;/li&gt;
&lt;li&gt;All modules, sub-systems, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The principle also applies to tests—all tests for a single unit (method, class, module, system) should be at the same level of abstraction.&lt;/p&gt;

&lt;h3 id=&#34;bap-and-srp&#34;&gt;BAP and SRP&lt;/h3&gt;

&lt;p&gt;Code that complies with the Single Responsibility Principle has a higher chance to also be compliant to the Balanced Abstraction Principle. However, this is not always the case and the opposite is not always true.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In order to achieve well-crafted code, we need to take many design principles into consideration and I believe that the Balanced Abstraction Principle (BAP) is a missing piece in the SOLID principles and overall software design.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code quality cannot be measured</title>
      <link>http://codurance.com/blog/quality-cannot-be-measured/</link>
      <pubDate>Sun, 14 Dec 2014 00:27:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/quality-cannot-be-measured/</guid>
      <description>

&lt;p&gt;We cannot effectively measure what we can&amp;rsquo;t precisely define. And this is definitely true when it comes to software quality. What is software quality? What does quality mean? Quality for whom? Compared to what? In which context? Are we talking about quality from a developer&amp;rsquo;s perspective, from a manager&amp;rsquo;s perspective, or from a user&amp;rsquo;s perspective?&lt;/p&gt;

&lt;p&gt;From a developer&amp;rsquo;s perspective, I don&amp;rsquo;t think it is possible to measure quality to a satisfactory degree. Static analyses tools, code coverage, and a few other code metrics are a good thing when used by developers; they help us to identify areas of our code that could potentially be improved. However, although I think metrics help us to identify bad code, they fail to identify good code. Code with high-test coverage is not the same as well-tested code. Small methods with zero or few parameters are not the same as clean code. Highly cohesive code (low &lt;a href=&#34;http://www.aivosto.com/project/help/pm-oo-cohesion.html#LCOM4&#34;&gt;LCOM4&lt;/a&gt;) is not the same as code that express the business domain. Loose-coupled code is not the same as code that can be easily maintained. Numbers can be gamed, and believe me, I&amp;rsquo;ve been there.&lt;/p&gt;

&lt;p&gt;Software quality metrics used by managers or anyone else that doesn&amp;rsquo;t have the skills to create well-crafted code should be extremely discouraged. When used by managers, metrics can cause more harm than good. Instead of being used as an aid to make our code better, metrics end up being used as bonus targets and finger pointing.&lt;/p&gt;

&lt;p&gt;Software design is all about trade-offs and no software quality tool will ever be able to understand the rationale behind each design decision. For example: decoupling classes and creating indirections are good practices; they allow us to easily test and expand our code. However, the excessive use of indirections, and decoupling every single class from each other, may lead to a totally over-engineered code base.&lt;/p&gt;

&lt;h3 id=&#34;what-is-quality&#34;&gt;What is quality?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;quality&lt;/em&gt;: the standard of something as measured against other things of a similar kind; the degree of excellence of something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What is this standard that we are talking about here? What are the other things of similar kind we are comparing our code base to?&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think there is a simple way to define quality. Quality is contextual and subject to comparisons. There is also a human and time factor to quality. Quality for whom? At what point in time?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Quality is something that is valuable to someone at some point in time&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is by far the best (and vaguest) definition of quality I&amp;rsquo;ve seen. It came from a combination of ideas captured in an old &lt;a href=&#34;http://www.shino.de/2010/07/22/quality-is-value-to-some-person-at-some-time/&#34;&gt;blog post&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/mgaertne&#34;&gt;Markus Gartner&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-do-we-want-to-measure-software-quality&#34;&gt;Why do we want to measure software quality?&lt;/h3&gt;

&lt;p&gt;There are many reasons to why we want to measure quality. Some developers like to use metrics to identify areas of the code that could be improved. Others use metric as a quality gate; if the code doesn&amp;rsquo;t satisfy a certain &amp;ldquo;quality&amp;rdquo; criteria, the build fails.&lt;/p&gt;

&lt;p&gt;Managers may have different reasons to why they want to measure quality. Although they may say otherwise, the most common reasons to why they want software quality to be measured are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of trust.&lt;/li&gt;
&lt;li&gt;Fear of being responsible for things they don&amp;rsquo;t understand.&lt;/li&gt;
&lt;li&gt;Find other people to blame in case something goes wrong.&lt;/li&gt;
&lt;li&gt;Try to find a justification for the general dissatisfaction among the people building or using the software.&lt;/li&gt;
&lt;li&gt;Show they are in control.&lt;/li&gt;
&lt;li&gt;Cover their backside, showing that they are doing something to control quality (ticking a box).&lt;/li&gt;
&lt;li&gt;Annual targets and bonuses (normally associated to the percentage of test coverage).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the exception of a few developers and academics, the people that are keener to find a way to measure software quality are the ones that don&amp;rsquo;t write software on a daily basis. Many of them don&amp;rsquo;t even understand how some of the metrics are calculated, but they want a way to control what they don&amp;rsquo;t understand. How many times have we heard stories about managers who &lt;em&gt;force&lt;/em&gt; their teams to keep test coverage above a certain percentage? Do they really know what it means? Would they be able to help the teams to achieve that? Can they distinguish good tests from bad tests?&lt;/p&gt;

&lt;h3 id=&#34;when-do-we-want-to-measure-quality&#34;&gt;When do we want to measure quality?&lt;/h3&gt;

&lt;p&gt;The desire to measure quality is intensified when things are not going well: people are unhappy; some team members are not suitable for the job; too many bugs; there&amp;rsquo;s always problems with new releases; few releases per year; things are taking too long to be done; lack of trust; people are often wondering what others are doing and who is responsible for what. But when asked, almost no one can explain exactly where the software lacks quality or how it could be fixed.&lt;/p&gt;

&lt;p&gt;On the other hand, we very rarely see people talking about measuring software quality when the project is going well: team is composed by good professionals; people are working well with each other; people respect and trust the opinion of their teammates; software is released often and with zero or few cosmetic bugs; good communication and team spirit;&lt;/p&gt;

&lt;h3 id=&#34;code-metrics&#34;&gt;Code metrics&lt;/h3&gt;

&lt;p&gt;Code analysis tools are great when used by developers as an aid to find areas of the system that could be improved. They are great to highlight things that are not always easily seen with a naked eye. They may also be very helpful when working with legacy code. However, the problem with code metrics is that making sure that the code complies to specific metrics is very different from saying that the code has quality. Having high test coverage is not the same as having good tests. Having loose coupled and high cohesive code doesn&amp;rsquo;t mean code that express the business domain or that is very easy to understand. Code with low cyclomatic complexity doesn&amp;rsquo;t mean code that behaves according business specifications and is bug free.&lt;/p&gt;

&lt;h3 id=&#34;non-code-related-metrics&#34;&gt;Non-code related metrics&lt;/h3&gt;

&lt;p&gt;How long does it take to build a new feature? How hard is to deploy the application? How many bugs are found in production every time we go live? How often do we go live? How fast can we safely and confidently change the software to accommodate the ever changing business requirements? Those are all things that we could associate with code quality, but can they be really associated to it? Are all these things only related to the quality of the code? Let&amp;rsquo;s take two common non-code related metrics as examples.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Number of bugs:&lt;/strong&gt; What type of bugs have been raised? Are they related to the bad state of the code base, the lack of skills of the developer that implemented the code, bad requirements, or a complete lack of communication between business, developers, and testers?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time to deliever a feature:&lt;/strong&gt; Why are we unhappy about the time it took us to deliver a feature? Is is because of bad estimations? Is it because we were doing something that we haven&amp;rsquo;t done before and we had to explore different alternatives? Were we blocked by other teams or internal bureaucracy? How does this feature compare to previous features implemented in the system? Are they similar? Completely different?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there are just too many variables involved, which makes it impossible to have a precise way to measure quality.&lt;/p&gt;

&lt;p&gt;Can we really judge the quality of our code according to the amount of time we take to build a new feature or number of bugs? I don&amp;rsquo;t think so. Does the state of the code base impact on our speed of delivery and number of bugs? Yes, definitely. Is the state of the code base the sole responsible for delays and bugs? No. But, as a developer, can we feel that the state of the code is dragging us down and helping us to make mistakes? Absolutely. Can we define a set of metrics that would define quality according to how we feel? I really doubt.&lt;/p&gt;

&lt;h3 id=&#34;same-role-different-perceptions&#34;&gt;Same role, different perceptions&lt;/h3&gt;

&lt;p&gt;On top of the difficulty to map any type of metrics to quality, there is an additional complexity. We are assuming that a single developer could express his or her notion of quality and then derive some code metrics from it. But do all developers in the team share the same notion of quality? Do developers outside that team and company share the same notion of quality?&lt;/p&gt;

&lt;p&gt;Do Ruby and Java developers share the same notion of code quality? Do game developers share the same notion of quality with developers in the financial industry? Or social network industry?&lt;/p&gt;

&lt;p&gt;With so many different opinions about what code quality means, how can we measure quality? How can we precisely say which degree of quality a code base has?&lt;/p&gt;

&lt;h3 id=&#34;feeling-quality&#34;&gt;Feeling quality&lt;/h3&gt;

&lt;p&gt;What I want from a code base is to be able to quickly and confidently make the changes, and most importantly, be satisfied with the solution. I don&amp;rsquo;t want be scared every time I touch certain areas of the code. I want to easily navigate through the code and always finding what I&amp;rsquo;m looking for. I don&amp;rsquo;t want to be unplesantly surprised, wasting time looking for things that don&amp;rsquo;t exist or are not in the right place. I don&amp;rsquo;t want to constantly get stuck, but if that ever happens, I want to have that piece of mind that anyone around me can quickly unstuck me. I don&amp;rsquo;t want to waste time fixing bugs, but if I need to fix a bug, I don&amp;rsquo;t want to spend more than a few minutes. When I look at the system from above, I want to clearly understand what that system is about and what it does. I want to deploy the application to production as often as possible. I want to be able to change the code almost as fast as the business change their minds, making sure that whatever I&amp;rsquo;m delivering is exactly what they expect. As a developer, this is what quality looks like for me.&lt;/p&gt;

&lt;h3 id=&#34;a-few-thoughts&#34;&gt;A few thoughts&lt;/h3&gt;

&lt;p&gt;No code analysis tool will ever guarantee quality. They can probably highlight the lack of quality but never inform that the code is of high quality. Although I believe that code quality cannot be measured, I believe that it can be felt. This general feeling of quality software is only achieved when we have great professionals working well together, trusting and respecting each other. Conversations between team members flow easily, information is as precise as they can be, division of labor happens naturally, and in the few occasions when things don&amp;rsquo;t go according to plan, the whole team gets together to solve the problem. When we work in an environment like that, we didn&amp;rsquo;t need metrics to tell us we are producing quality software. Every one simply feels it.&lt;/p&gt;

&lt;p&gt;By no means I&amp;rsquo;m against using code metrics. I just don&amp;rsquo;t feel they are enough to measure quality. I think metrics are great when used as a &lt;em&gt;bare-minimum&lt;/em&gt; quality gate and also an aid for developers to identify areas of improvement. However I also believe that the need to measure &lt;em&gt;quality&lt;/em&gt; normally comes from a general dissatisfaction caused by bad professionals and organisational disfunction.&lt;/p&gt;

&lt;p&gt;There are too many variables in a software project and many of them cannot be easily be measured, if at all. But if you ask the people involved in a project to rank the quality of their software in a scale of 1 to 10, they would give you a number, which in fact is more based on gut feel than any scientific measure. When you ask them to pinpoint the reasons why they ranked the quality in that way, you will see that none of them will say that the reason is because the code base scores 3.2 in the LCOM metric or that the test coverage is only 32% when it should have been 70%.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I believe that the only sensible thing we can do is to try to be the best we can be and always strive to do our best.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>