<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/scala/</link>
    <description>Recent content in Scala on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 15 May 2016 00:01:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/scala/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bowling Kata in Clojure, F# and Scala</title>
      <link>http://codurance.com/blog/bowling-kata-in-clojure-fsharp-scala/</link>
      <pubDate>Sun, 15 May 2016 00:01:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/bowling-kata-in-clojure-fsharp-scala/</guid>
      <description>

&lt;p&gt;In one of our evening apprenticeship meetings, a pair was doing the &lt;a href=&#34;http://codingdojo.org/cgi-bin/index.pl?KataBowling&#34;&gt;Bowling Kata&lt;/a&gt; in Java. After reviewing their code, I thought that it would be a good idea to do it myself.&lt;/p&gt;

&lt;p&gt;Every craftsman at Codurance is a polyglot developer and, although we have very similar values, we all have our own preferences when it comes to programming languages and coding styles. As you can imagine, we cannot always avoid cracking a joke or two about all the languages we donâ€™t like so much but other craftsmen in the company do. So, just for fun, quite a few of us decided to do the same kata using our language of choice. It was great to see the same problem solved with different languages. Although there are still a few craftsmen and apprentices working on solving the kata in different languages, here are 3 of my favourite solutions so far (in no particular order):&lt;/p&gt;

&lt;h2 id=&#34;clojure-by-mashooq&#34;&gt;Clojure (by Mashooq)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns bowling.core-test
  (:require [clojure.test :refer :all]
            [bowling.core :refer :all]))

(deftest bowling 
  (testing &amp;quot;strikes for all rolls&amp;quot;
    (is (= 300 (score &amp;quot;XXXXXXXXXXXX&amp;quot;))))

  (testing &amp;quot;normal scores&amp;quot;
    (is (= 99 (score &amp;quot;91919393929291219191&amp;quot;))))

  (testing &amp;quot;normal scores or misses&amp;quot;
    (is (= 90 (score &amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 93 (score &amp;quot;919-9-9-9-9-929-9-9-&amp;quot;))))
  
  (testing &amp;quot;mixture of stikes and normals&amp;quot;
    (is (= 98 (score &amp;quot;9-X8-9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 104 (score &amp;quot;9-X8-9-9-9-9-9-9-X23&amp;quot;)))
    (is (= 28 (score &amp;quot;--X81--------------&amp;quot;)))
    (is (= 27 (score &amp;quot;--X8-1-------------&amp;quot;))))
  
  (testing &amp;quot;spares for all rolls&amp;quot;
    (is (= 150 (score &amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot;))))

  (testing &amp;quot;mixture of spares and normals&amp;quot;
    (is (= 82 (score &amp;quot;9-8/--9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 84 (score &amp;quot;9-8/--9-9-9-9-9-9-9/1&amp;quot;)))
    (is (= 12 (score &amp;quot;--8/1---------------&amp;quot;)))
    (is (= 11 (score &amp;quot;--8/-1--------------&amp;quot;)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns bowling.core)

(defn- spare?[s] (= \/ s))
(defn- strike? [s] (= \X s))
(defn- spare-or-strike? [s] (or (spare? s) (strike? s)))
(defn- miss? [s] (or (= nil s) (= \- s)))

(defn- score-for [s] 
  (cond 
     (spare-or-strike? s)  10
     (miss? s)  0 
     :else (read-string (str s))))

(defn- score-roll [this-roll rem-rolls]
  (cond 
    (strike? this-roll) (+ 10 (score-for (first rem-rolls)) (score-for (first (rest rem-rolls))))
    (spare? this-roll) (+ 10 (score-for (first rem-rolls)))
    (spare? (first rem-rolls)) 0
    :else (score-for this-roll)))

(defn- score-rolls [acc rolls]
  (if (seq rolls)  
    (let [running-score (+ acc (score-roll (first rolls) (rest rolls)))]
      (score-rolls running-score (rest rolls)))
    acc))

(defn- expand-strikes [rolls]
  (seq (reduce str  (map #(if  (strike? %) &amp;quot;X-&amp;quot;  (str %)) (seq rolls)))))

(defn- deduct-extra-rolls [score rolls]
  (- score  (score-rolls 0 (drop 20 (expand-strikes rolls)))))

(defn score [rolls] 
  (deduct-extra-rolls (score-rolls 0 (seq rolls)) rolls))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/mashooq/katas/tree/master/clojure/bowling&#34;&gt;Mash&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;f-by-pedro&#34;&gt;F# (by Pedro)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;namespace BowlingV2.FSharpKatas

    module Bowling = 
        open System

        type private Rolls = Strike | Spare | Roll
        type private Pins = Pins of int
        type private Roll = Rolls * Pins
        
        let private maxRolls = 20
        let private maxPins = 10
        let private noPins = 0
        
        let private pinCountForRoll roll =
            let (Pins pins) = snd roll
            pins
            
        let private pinsFromRawRoll rawRoll =
            Pins (Int32.Parse(rawRoll.ToString()))
            
        let private sparePinsFromRawRoll rawRoll = 
            Pins (maxPins - Int32.Parse(rawRoll.ToString()))

        let private parse roll index rolls =
            let previousRoll = fun () -&amp;gt; Seq.item (index - 1) rolls
            match roll with
            | &#39;-&#39; -&amp;gt; Roll, Pins noPins
            | &#39;/&#39; -&amp;gt; Spare, sparePinsFromRawRoll(previousRoll())
            | &#39;X&#39; -&amp;gt; Strike, Pins maxPins
            | r -&amp;gt; Roll, pinsFromRawRoll r

        let private scoreRoll index rolls =
            let bonusRoll = fun(lookAhead) -&amp;gt;  
                if index + lookAhead &amp;lt; Seq.length rolls 
                then pinCountForRoll (Seq.item (index + lookAhead) rolls) 
                else noPins       

            let exceedsMaxRolls = fun() -&amp;gt;
                rolls 
                |&amp;gt; Seq.take index
                |&amp;gt; Seq.map (fun r -&amp;gt; match r with | (Strike, _) -&amp;gt; 2 | _ -&amp;gt; 1)
                |&amp;gt; Seq.sum &amp;gt;= maxRolls

            match Seq.item index rolls with
                | (_, _) when exceedsMaxRolls() -&amp;gt; noPins
                | (Spare, Pins pins) -&amp;gt; pins + bonusRoll 1
                | (Strike, Pins pins) -&amp;gt; pins + bonusRoll 1 + bonusRoll 2
                | (Roll, Pins pins) -&amp;gt; pins

        let scoreGame rolls =
            let parsedRolls = rolls |&amp;gt; Seq.mapi (fun index roll -&amp;gt; 
                                                    parse roll index rolls)

            parsedRolls
            |&amp;gt; Seq.mapi (fun index _ -&amp;gt; scoreRoll index parsedRolls)
            |&amp;gt; Seq.sum
                     
    module BowlingTests =
        open NUnit.Framework
        open Swensen.Unquote
        open Bowling

        [&amp;lt;Test&amp;gt;]
        let ``calculate scores with no strikes or spares``() =
            test &amp;lt;@ scoreGame &amp;quot;--&amp;quot; = 0 @&amp;gt; 
            test &amp;lt;@ scoreGame &amp;quot;1&amp;quot; = 1 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;13&amp;quot; = 4 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;13521&amp;quot; = 12 @&amp;gt;
            
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing a miss``() =
            test &amp;lt;@ scoreGame &amp;quot;1-5-&amp;quot; = 6 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot; = 90 @&amp;gt;
            
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing spares``() =
            test &amp;lt;@ scoreGame &amp;quot;1/&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/--&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/-5&amp;quot; = 15 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35-&amp;quot; = 21 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/3/23&amp;quot; = 30 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot; = 150 @&amp;gt;
        
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing strikes``() =
            test &amp;lt;@ scoreGame &amp;quot;X&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X--&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X--51&amp;quot; = 16 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X51&amp;quot; = 22 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;XXXXXXXXXXXX&amp;quot; = 300 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;XXXXXXXXXX12&amp;quot; = 274 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX45&amp;quot; = 103 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X35&amp;quot; = 149 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/&amp;quot; = 153 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/23&amp;quot; = 160 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/X&amp;quot; = 173 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/XX6&amp;quot; = 189 @&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/pedromsantos/FSharpKatas/blob/master/BowlingV2.fs&#34;&gt;Pedro&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;scala-by-sandro&#34;&gt;Scala (by Sandro)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.codurance.bowlingkata.full_scoring

import com.codurance.UnitSpec
import com.codurance.bowlingkata.full_scoring.BowlingFullScoreCalculator.scoreFor

class BowlingFullScoreCalculatorShould extends UnitSpec {

	&amp;quot;calculate scores with no strikes or spares&amp;quot; in {
		scoreFor(&amp;quot;11111111112222222222&amp;quot;) should be (30)
	}

	&amp;quot;calculate scores containing a miss&amp;quot; in {
		scoreFor(&amp;quot;--------------------&amp;quot;) should be (0)
		scoreFor(&amp;quot;1-1----------------1&amp;quot;) should be (3)
		scoreFor(&amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot;) should be (90)
	}

	&amp;quot;calculate scores containing spares&amp;quot; in {
		scoreFor(&amp;quot;5/11------------3/11&amp;quot;) should be (26)
		scoreFor(&amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot;) should be (150)
	}

	&amp;quot;calculate scores containing strikes&amp;quot; in {
		scoreFor(&amp;quot;XXXXXXXXXXXX&amp;quot;) should be(300)
		scoreFor(&amp;quot;XXXXXXXXXX12&amp;quot;) should be(274)
		scoreFor(&amp;quot;1/35XXX458/X3/23&amp;quot;) should be(160)
		scoreFor(&amp;quot;1/35XXX458/X3/XX6&amp;quot;) should be(189)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.codurance.bowlingkata.full_scoring

object BowlingFullScoreCalculator {

	def scoreFor(rolls: String): Int = totalScore(rolls.split(&amp;quot;&amp;quot;).toList)

	private def totalScore(rolls: List[String], index: Int = 0, score: Int = 0): Int = {
		lazy val MISS  = &amp;quot;-&amp;quot;
		lazy val SPARE = (&amp;quot;/&amp;quot;, () =&amp;gt; 10 - rollScoreAt(index - 1) + if_(index &amp;lt; 19, rollScoreAt(index + 1)))
		lazy val STRIKE = (&amp;quot;X&amp;quot;, () =&amp;gt; 10 + if_(index + numberOfPreviousStrikes() &amp;lt; 18,
                                               rollScoreAt(index + 1) + rollScoreAt(index + 2)))

		def numberOfPreviousStrikes() = rolls.mkString.take(index).count(_ == &#39;X&#39;)

		def rollScoreAt(index: Int): Int =
			rolls(index) match {
				case STRIKE._1 =&amp;gt; 10
				case SPARE._1  =&amp;gt; 10 - rolls(index - 1).toInt
				case MISS      =&amp;gt; 0
				case pins      =&amp;gt; pins.toInt
			}

		rolls.drop(index) match {
			case STRIKE._1 :: _ =&amp;gt; totalScore(rolls, index + 1, score + STRIKE._2())
			case SPARE._1 :: _  =&amp;gt; totalScore(rolls, index + 1, score + SPARE._2())
			case MISS :: _      =&amp;gt; totalScore(rolls, index + 1, score)
			case n :: _         =&amp;gt; totalScore(rolls, index + 1, score + n.toInt)
			case List()         =&amp;gt; score
		}
	}

	private def if_(condition: Boolean, ifTrue: =&amp;gt; Int): Int = if (condition) ifTrue else 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/sandromancuso/bowling_kata_scala&#34;&gt;Sandro&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;fun-passion-and-respect&#34;&gt;Fun, passion, and respect&lt;/h2&gt;

&lt;p&gt;Having fun at work, be surrounded by passionate and talented craftsmen, the respect we have for each other, and the willingness to learn and share, are some of the things I love the most about the Coduranceâ€™s culture. What started as apprentices practicing with a kata transformed into a great way to learn and share knowledge among craftsmen and apprentices. Some of our craftsmen and apprentices are also working on their solutions in Kotlin, Haskell, Java, and C#.&lt;/p&gt;

&lt;p&gt;As among ourselves we will probably never agree which one we prefer, we will let you choose which one you like the most. :)&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&#34;https://twitter.com/mashooq&#34;&gt;Mash&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/pedromsantos&#34;&gt;Pedro&lt;/a&gt; for the Clojure and F# implementations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Changing Scalatra and sbt default directories</title>
      <link>http://codurance.com/blog/changing-scalatra-and-sbt-default-directories/</link>
      <pubDate>Sun, 22 Nov 2015 23:54:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/changing-scalatra-and-sbt-default-directories/</guid>
      <description>&lt;p&gt;Conventions are not always good. I recently started a new internal web project
at Codurance and I decided to use Scala. As I&amp;rsquo;m not a fan of big
frameworks, I chose &lt;a href=&#34;http://www.scalatra.org/&#34;&gt;Scalatra&lt;/a&gt; as a micro web framework.&lt;/p&gt;

&lt;p&gt;The first challenge was that I wanted to organise my application with a
different directory structure. By default, &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; and Scalatra use the same convention used by &lt;a href=&#34;https://maven.apache.org/&#34;&gt;maven&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; /src/main/scala       // source code
&amp;gt; /src/main/resources   // production resources
&amp;gt; /scr/test/scala       // tests
&amp;gt; /scr/test/resouces    // test resources
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the past few years I&amp;rsquo;ve been experimenting with different directory structure for my projects. I want my directories to be more meaningful when it comes to explain the business domain. The new directory structure is part of what I call &lt;em&gt;Interaction Driven Design (IDD)&lt;/em&gt; and a full talk on it can be found in our &lt;a href=&#34;http://codurance.com/videos/&#34;&gt;videos area&lt;/a&gt;. I give a lot of details about the rational behind the new directory structure on that talk.&lt;/p&gt;

&lt;p&gt;The directory structure I would like to use for this new project is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; /src/core/scala          // source code for my core domain
&amp;gt; /src/core-test/scala     // tests for my core domain

&amp;gt; /src/data/resources      // resources for data migration and test data
&amp;gt; /src/data/scala          // code for data migration and test data

&amp;gt; /src/web/resources       // delivery mechanism resources
&amp;gt; /src/web/scala           // delivery mechanism code (controllers, API, etc)
&amp;gt; /src/web/webapp          // web files (WEB-INF folder, css, javascript, Jade templates, etc)
&amp;gt; /src/web-test/scala      // tests for my delivery mechanism
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again, the directory structure above will make more sense if you watch the &lt;a href=&#34;http://codurance.com/videos/&#34;&gt;Interaction Driven Design (IDD) talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The biggest challenge was to rename the default directory &lt;em&gt;main&lt;/em&gt; to &lt;em&gt;web&lt;/em&gt;. That broke the whole world. Here are the changes I had to make to fix it all:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.sbt&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;unmanagedSourceDirectories in Compile := Seq((baseDirectory.value / &amp;quot;src/core/scala&amp;quot;),
                                     (baseDirectory.value / &amp;quot;src/data/scala&amp;quot;),
                                     (baseDirectory.value / &amp;quot;src/web/scala&amp;quot;))

unmanagedResourceDirectories in Compile += baseDirectory.value / &amp;quot;src/data/resources&amp;quot;

unmanagedSourceDirectories in Test := Seq((baseDirectory.value / &amp;quot;src/core-test/scala&amp;quot;),
                                      (baseDirectory.value / &amp;quot;src/web-test/scala&amp;quot;))

webappSrc in webapp &amp;lt;&amp;lt;= (baseDirectory in Compile) map { _ / &amp;quot;src/web/webapp&amp;quot; }

webappDest in webapp &amp;lt;&amp;lt;= (baseDirectory in Compile) map { _ / &amp;quot;src/web/webapp&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last two lines &lt;em&gt;webappSrc&lt;/em&gt; and &lt;em&gt;webappDest&lt;/em&gt; were needed because I also use a class that starts &lt;a href=&#34;http://www.eclipse.org/jetty/&#34;&gt;Jetty&lt;/a&gt; by hand where I hook the Scalatra listener.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JettyLauncher.scala&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.eclipse.jetty.server.Server
import org.eclipse.jetty.servlet.DefaultServlet
import org.eclipse.jetty.webapp.WebAppContext
import org.scalatra.servlet.ScalatraListener

object JettyLauncher {

    def main(args: Array[String]) {
        val port = if(System.getenv(&amp;quot;PORT&amp;quot;) != null) System.getenv(&amp;quot;PORT&amp;quot;).toInt else 8089
    
        val server = new Server(port)
        val context = new WebAppContext()
        context.setClassLoader(JettyLauncher.getClass.getClassLoader)
        context setContextPath &amp;quot;/&amp;quot;
        context.setResourceBase(&amp;quot;src/web/webapp&amp;quot;)
        context.addEventListener(new ScalatraListener)
        context.addServlet(classOf[DefaultServlet], &amp;quot;/&amp;quot;)
    
        server.setHandler(context)
    
        server.start
        server.join
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When executing this class, the &lt;em&gt;ScalatraBootstrap&lt;/em&gt; could not be found and that&amp;rsquo;s why I had to add the following line to my &lt;em&gt;JettyLauncher&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;gt; context.setClassLoader(JettyLauncher.getClass.getClassLoader)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scalatra relies on the default directory &lt;em&gt;main&lt;/em&gt; to find &lt;em&gt;ScalatraBootstrap&lt;/em&gt; and this is how I managed to make sure the &lt;em&gt;ScalatraBootstrap&lt;/em&gt; could be found.&lt;/p&gt;

&lt;p&gt;Note that I also had to change the resource base, pointing to the &lt;em&gt;web&lt;/em&gt; folder instead of &lt;em&gt;main&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;gt; context.setResourceBase(&amp;quot;src/web/webapp&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As I use &lt;a href=&#34;http://scalate.github.io/scalate/documentation/jade.html&#34;&gt;Jade&lt;/a&gt; templates via &lt;a href=&#34;http://scalate.github.io/scalate/&#34;&gt;Scalate&lt;/a&gt;, I had to change the Scalate template configuration on &lt;strong&gt;build.scala&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.scala&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;object MonitorBuild extends Build {
    val Organization = &amp;quot;com.codurance&amp;quot;
    val Name = &amp;quot;monitor&amp;quot;
    val Version = &amp;quot;0.1.0-SNAPSHOT&amp;quot;
    val ScalaVersion = &amp;quot;2.11.6&amp;quot;
    val ScalatraVersion = &amp;quot;2.4.0.RC1&amp;quot;
    
    lazy val project = Project(
        &amp;quot;monitor&amp;quot;,
        file(&amp;quot;.&amp;quot;),
        settings = ScalatraPlugin.scalatraSettings ++ scalateSettings ++ Seq(
    
            // dependencies and some other stuff here
    
            scalateTemplateConfig in Compile &amp;lt;&amp;lt;= (sourceDirectory in Compile) { base =&amp;gt;
                Seq(
                    TemplateConfig(
                        new RichFile(new File(&amp;quot;src&amp;quot;)) / &amp;quot;web&amp;quot; / &amp;quot;webapp&amp;quot; / &amp;quot;WEB-INF&amp;quot; / &amp;quot;templates&amp;quot;,
                        Seq.empty, 
                        Seq(
                            Binding(&amp;quot;context&amp;quot;, &amp;quot;_root_.org.scalatra.scalate.ScalatraRenderContext&amp;quot;, importMembers = true, isImplicit = true)
                        ), 
                        Some(&amp;quot;templates&amp;quot;)
                    )
                )
            }
        )
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important line above is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;gt; new RichFile(new File(&amp;quot;src&amp;quot;)) / &amp;quot;web&amp;quot; / &amp;quot;webapp&amp;quot; / &amp;quot;WEB-INF&amp;quot; / &amp;quot;templates&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which makes Scalate find the templates in the &lt;em&gt;web&lt;/em&gt; directory instead of &lt;em&gt;main&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Make sure you have these lines in the &lt;strong&gt;plugins.sbt&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;&amp;gt; addSbtPlugin(&amp;quot;com.mojolly.scalate&amp;quot; % &amp;quot;xsbt-scalate-generator&amp;quot; % &amp;quot;0.5.0&amp;quot;)
&amp;gt;
&amp;gt; addSbtPlugin(&amp;quot;org.scalatra.sbt&amp;quot; % &amp;quot;scalatra-sbt&amp;quot; % &amp;quot;0.4.0&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t need to change anything on my &lt;strong&gt;web.xml&lt;/strong&gt; and &lt;strong&gt;ScalatraBootstrap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The configuration described above allows me to run the application via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; ./sbt container:start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that is how I normally run the application locally and also allows me to create a fat jar file and execute the &lt;em&gt;JettyLauncher&lt;/em&gt; class that is how I run in production:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; java -cp &amp;lt;myapplication&amp;gt;.jar com.codurance.JettyLauncher
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fat jar file is created via:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; ./sbt assembly
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how the collapsed directory structure looks on &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;
&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2015-11-21-folder-structure-collapsed.jpg&#34;  class=&#34;img img-responsive style-screengrab&#34; style=&#34;max-height: 98px;&#34;/&gt;

and this is how it looks when expanded:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2015-11-21-folder-structure-expanded.jpg&#34;  class=&#34;img img-responsive style-screengrab&#34; style=&#34;max-height: 500px;&#34;/&gt;


&lt;p&gt;Although it took me a while to figure all this out, I&amp;rsquo;m happy to be able to structure my project the way it makes sense to us.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first walking skeleton</title>
      <link>http://codurance.com/blog/My-first-walking-skeleton/</link>
      <pubDate>Wed, 26 Aug 2015 09:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/My-first-walking-skeleton/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;A Walking Skeleton is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.
&lt;footer&gt; &lt;cite&gt;&lt;a href=&#34;http://alistair.cockburn.us/index.php/Walking_skeleton&#34;&gt;Alistair Cockburn&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the goals I had for my apprenticeship was to learn more about Continuous Integration and Continuous Deployment. Building my own little pet project fit in nicely with that, and I wanted to try a couple of new things with it.
A concept I was very curious about was the &lt;a href=&#34;http://blog.codeclimate.com/blog/2014/03/20/kickstart-your-next-project-with-a-walking-skeleton/&#34;&gt;Walking Skeleton&lt;/a&gt;. I read about it in &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt; and as I understood it, it was a way to test-drive my architecture and reduce risk in the beginning of my project.&lt;/p&gt;

&lt;h3 id=&#34;taking-on-the-challenge&#34;&gt;Taking on the challenge&lt;/h3&gt;

&lt;p&gt;I had started the project in &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; and used &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt; as a build tool, both of which I&amp;rsquo;d never used before in a project. As I had limited experience with functional programming, I watched the videos from the Coursera Lectures on &lt;a href=&#34;https://www.coursera.org/course/progfun&#34;&gt;Functional Programming Principles in Scala&lt;/a&gt;. Solving some of the riddles there was quite fun! Unfortunately, that didn&amp;rsquo;t help with the hurdles and hiccups of using SBT and a couple of plugins that didn&amp;rsquo;t play well with the newest Scala version. Quite a couple of times I got stuck and had to ask my mentor for help. But pairing with him always brought a great deal of motivation and progress.&lt;/p&gt;

&lt;h3 id=&#34;making-the-first-steps&#34;&gt;Making the first steps&lt;/h3&gt;

&lt;p&gt;The next task was to decide how to get the integration up and running quickly.
I first set up a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&#34;&gt;Hello World&lt;/a&gt; and deploying it to &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-scala#set-up&#34;&gt;Heroku&lt;/a&gt;. I decided to pass on using play and use as few plugins and frameworks as possible.&lt;/p&gt;

&lt;p&gt;My initial steps were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a &lt;a href=&#34;https://github.com/codurance/gr8craft&#34;&gt;repository&lt;/a&gt; for my project&lt;/li&gt;
&lt;li&gt;open a console in the directory of the local clone of the repository&lt;/li&gt;
&lt;li&gt;install SBT with &lt;code&gt;brew install sbt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create a &lt;a href=&#34;https://github.com/codurance/gr8craft/tree/7bcf1bfb42ec87cfddeb48cf8c5160b4834adbd4&#34;&gt;simple HelloWorld and SBT config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;install Heroku with &lt;code&gt;brew install heroku&lt;/code&gt; and &lt;code&gt;heroku login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create the app on Heroku with &lt;code&gt;heroku create&lt;/code&gt; (I renamed it later)&lt;/li&gt;
&lt;li&gt;deploy with &lt;code&gt;git push heroku&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;show the log with &lt;code&gt;heroku logs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, not everything worked as intended from the start. As you can see from my commit history, it took a few tries and pairing with my mentor to get the app really working and the Hello World output to show up in the logs.
 SBT was particularly challenging, as it was so unfamiliar. Once I got it working on my machine, it was easy to deploy and run on Heroku, though.&lt;/p&gt;

&lt;h3 id=&#34;defining-the-domain&#34;&gt;Defining the domain&lt;/h3&gt;

&lt;p&gt;The idea I wanted to implement was a &lt;a href=&#34;https://twitter.com/gr8craft&#34;&gt;small bot&lt;/a&gt; helping developers to remember good design principles while they were reading twitter. I registered a twitter account and, with the help of my mentor, decided on it&amp;rsquo;s first feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: Hourly Article Tweet
  As a follower of gr8craft
  I want hourly tweets to software design articles in my timeline
  so that they inspire me to do better design
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I described the initial domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Clock&amp;quot; reaches &amp;quot;Full Hour&amp;quot; triggers &amp;quot;Tweet&amp;quot; contains &amp;quot;Link&amp;quot; points to &amp;quot;Article&amp;quot; is stored in &amp;quot;Shelf&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I wrote an acceptance test for the feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: Hour reached
    Given the next article on the shelf about &amp;quot;DDD&amp;quot; can be found at &amp;quot;http://t.co/lqJDZlGcJE&amp;quot;
    When the hour is reached
    Then gr8craft tweets &amp;quot;Your hourly recommended article about DDD: http://t.co/lqJDZlGcJE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-driving-the-skeleton&#34;&gt;Test-driving the skeleton&lt;/h3&gt;

&lt;p&gt;I set up my first test with &lt;a href=&#34;https://cucumber.io/&#34;&gt;Cucumber&lt;/a&gt;, tweeting against the real Twitter API using &lt;a href=&#34;http://twitter4j.org&#34;&gt;twitter4j&lt;/a&gt; and asserting that the last tweet was actually the expected one. I set up a testing account especially for this purpose. Before each test run, I clean up the timeline so as not to run into the problem of having twitter reject duplicated tweets. Another problem was that Twitter shortened the link I posted, making it hard to test if it was actually the link I was expecting. By using the shortened version directly I avoided setting up a complicated assertion to see that the shortened version was redirecting to the same location.
The ApplicationRunner was developed test-driven using mocks.&lt;/p&gt;

&lt;p&gt;Initially, I didn&amp;rsquo;t know how the scheduling would work. That&amp;rsquo;s why I started with a fake scheduler that would use the real clock to set up a trigger for new tweets. When I got a little further in I realized that using a scheduled thread executor was much simpler and easier to tests, so I changed that.&lt;/p&gt;

&lt;p&gt;I implemented the application and went on to figure out the scheduling. My first refactoring was ahead - I started by test-driving the new way of scheduling: updating the  &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/9ec1e4b8a479a4055e373c6e7295abdc08edd22e&#34;&gt;ScheduledExecutor&lt;/a&gt; and using &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/9bab89bc5768b4803b1c797d5c869863a56aea84&#34;&gt;TweetRunner&lt;/a&gt; to do the actual work. I wanted to test the scheduler, so I made the time interval configurable and used Scala Test&amp;rsquo;s &lt;a href=&#34;http://doc.scalatest.org/2.0/index.html#org.scalatest.concurrent.Eventually$&#34;&gt;Eventually&lt;/a&gt; to give it a few tries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(classOf[JUnitRunner])
class ScheduledExecutorShould extends FunSuite with Matchers with Eventually with BeforeAndAfter with OneInstancePerTest {

  var wasScheduled = false
  val scheduler = new ScheduledExecutor(NANOSECONDS, new Runnable {
    override def run(): Unit = wasScheduled = true
  })

  after(scheduler.shutdown())

  test(&amp;quot;schedule the runnable&amp;quot;) {
    scheduler.schedule()

    ensureRunnableWasScheduled
    scheduler.isShutDown shouldBe false
  }

  test(&amp;quot;shutdown the runnable&amp;quot;) {
    scheduler.schedule()
    ensureRunnableWasScheduled

    scheduler.shutdown()

    scheduler.isShutDown shouldBe true
  }

  def ensureRunnableWasScheduled: Unit = {
    eventually(timeout(5.seconds), interval(1.seconds)) {
      wasScheduled shouldBe true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that was left is to change my Cucumber steps and application to use the new Scheduling mechanism and TweetRunner. The tests were green and I could see the result on the &lt;a href=&#34;https://twitter.com/gr8crafttest&#34;&gt;testing account&lt;/a&gt;. Success!&lt;/p&gt;

&lt;h3 id=&#34;making-it-run-properly&#34;&gt;Making it run properly&lt;/h3&gt;

&lt;p&gt;To make the new application run on Heroku, I needed to &lt;a href=&#34;http://twitter4j.org/en/configuration.html&#34;&gt;configure the twitter4j environment variables&lt;/a&gt; there. I didn&amp;rsquo;t want to publish them by adding them to the github repository and had used a file to configure them locally.
Heroku allows for easy configuration of environment variables via the website or the command line. I chose the latter and configured them by simply executing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku config:add oauth.consumerKey=**********
heroku config:add oauth.consumerSecret=************
heroku config:add oauth.accessToken=**************************************************
heroku config:add oauth.accessTokenSecret=******************************************
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logging-the-essentials&#34;&gt;Logging the essentials&lt;/h3&gt;

&lt;p&gt;It is important to log the interaction with external resources like Twitter and the Scheduler, and to record errors in the right place. If you wait to do this for too long, it can make maintaining your application a real pain. I already benefitted from having the logging to localize problems.&lt;/p&gt;

&lt;p&gt;I introduced &lt;a href=&#34;http://slf4s.org/&#34;&gt;slf4s&lt;/a&gt; and &lt;a href=&#34;http://logback.qos.ch/&#34;&gt;logback&lt;/a&gt; into the mix. This allowed me to easily log from any Scala class by using the &lt;em&gt;Logging&lt;/em&gt; trait:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class TwitterApiService(twitter: Twitter) extends TwitterService with Logging {
  ...
  def sendToTwitter(tweet: String): Unit = {
    log.info(&amp;quot;sending tweet to Twitter: &amp;quot; + tweet)

    twitter.updateStatus(tweet)

    log.info(&amp;quot;successfully tweeted &amp;quot; + tweet)
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since twitter4j was generating a lot of noise communicating with the Twitter API, I had to create a logback configuration file and set it to a different logging level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;appender name=&amp;quot;STDOUT&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;
        &amp;lt;encoder&amp;gt;
            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
    &amp;lt;/appender&amp;gt;

    &amp;lt;logger name=&amp;quot;twitter4j&amp;quot; level=&amp;quot;INFO&amp;quot;/&amp;gt;

    &amp;lt;root level=&amp;quot;debug&amp;quot;&amp;gt;
        &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
    &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-up-continuous-integration&#34;&gt;Setting up Continuous Integration&lt;/h3&gt;

&lt;p&gt;There were a few tasks left to making the whole thing run not only by manually running the cucumber test in the IDE. I noticed not all the tests were executing in the IDE. That&amp;rsquo;s because it was looking for JUnit tests. This was an easy fix by adding &lt;code&gt;@RunWith(classOf[JUnitRunner])&lt;/code&gt;. Now to make the cucumber tests run when I executed &lt;code&gt;sbt test&lt;/code&gt; on the console, I needed to add &lt;a href=&#34;https://github.com/sbt/junit-interface&#34;&gt;JUnit Interface&lt;/a&gt; to my SBT dependencies. I had decided against using a SBT Cucumber plugin, as the ones I found were incompatible with the newest version of Scala.&lt;/p&gt;

&lt;p&gt;To set up Continuous Integration, I installed &lt;code&gt;brew install travis&lt;/code&gt; and created a simple &lt;a href=&#34;http://docs.travis-ci.com/user/languages/scala/&#34;&gt;Travis&lt;/a&gt; configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;language: scala
scala:
- 2.11.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, Travis can use SBT to automatically build and test without further configuration. The only thing I don&amp;rsquo;t like is that all dependencies have to be loaded again for every build, which makes it kind of slow.
Travis needed to know the authentication for the twitter4j configuration too. I thought this would be easy to do just by encrypting the variables in &lt;a href=&#34;http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables&#34;&gt;travis.yml&lt;/a&gt;.
However, since Travis uses bash, it doesn&amp;rsquo;t allow for dots in the variable name. I created a workaround by setting custom environment variables and using them to programmatically configure twitter4j:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;def createTwitter(suffix: String = &amp;quot;&amp;quot;): Twitter = {
   val configuration = new ConfigurationBuilder()
     .setDebugEnabled(true)
     .setOAuthConsumerKey(readEnvironmentVariable(suffix, &amp;quot;twitter4jconsumerKey&amp;quot;))
     .setOAuthConsumerSecret(readEnvironmentVariable(suffix, &amp;quot;twitter4jconsumerSecret&amp;quot;))
     .setOAuthAccessToken(readEnvironmentVariable(suffix, &amp;quot;twitter4jaccessToken&amp;quot;))
     .setOAuthAccessTokenSecret(readEnvironmentVariable(suffix, &amp;quot;twitter4jaccessTokenSecret&amp;quot;))
     .build()

   new TwitterFactory(configuration).getInstance()
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The suffix is used so that I can have a different configuration for the production code and the tests, which run on a different Twitter account. Of course, I had to set these variables in my local command line, IDE and on Heroku as
well.&lt;/p&gt;

&lt;p&gt;I added the variables to the Travis config automatically via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;travis encrypt twitter4jconsumerKey4testing=********** --add env.matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still, the tests were failing on Travis since the retry timeout was not high enough. Once the problem was found, it was easy to fix and the build was finally green.&lt;/p&gt;

&lt;h3 id=&#34;deploying-to-heroku-automatically&#34;&gt;Deploying to Heroku automatically&lt;/h3&gt;

&lt;p&gt;That was surprisingly easy! I just used the &lt;a href=&#34;http://docs.travis-ci.com/user/deployment/heroku/&#34;&gt;wizard provided by Travis&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;travis setup heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I answered three simple questions and it automatically added the &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/2570086f4ba9927f956141a552bc64cd932b10dd&#34;&gt;necessary information&lt;/a&gt; to my travis.yml. It just worked!&lt;/p&gt;

&lt;h3 id=&#34;configuring-alternative-step-definitions-for-cucumber&#34;&gt;Configuring alternative step definitions for Cucumber&lt;/h3&gt;

&lt;p&gt;Since I am running my Cucumber tests via JUnit, I could configure them with options to provide a location for the StepDefinitions. This way, I could use the same scenario definition with both the real Twitter API and a mocked version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(classOf[Cucumber])
@CucumberOptions(glue = Array(&amp;quot;gr8craft.features&amp;quot;))
class CucumberFeatures {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;coming-to-a-conclusion&#34;&gt;Coming to a conclusion&lt;/h3&gt;

&lt;p&gt;My next goal is to introduce a database with multiple articles, so that the bot will provide value to followers. I will then expand the domain and move along to the next feature, which will allow the bot to answer to mentions.&lt;/p&gt;

&lt;p&gt;One of the lessons I learned over the last few weeks was (again) the value of pairing and code reviews. When I was stuck, pairing with my mentor or asking him for advice helped me instantly. He could see things from a different perspective, cover my blind spots, give encouragement and ideas and provide insights. I am very grateful for this support.&lt;/p&gt;

&lt;p&gt;With this approach, I quickly found that my idea of how scheduling would work was off and I could easily refactor to cater for it. And I figured out the quirks of setting up the automatic testing, integration and deployment, which will pay off with every change I make.&lt;/p&gt;

&lt;p&gt;I think the Walking Skeleton approach is a lot of effort at the start and it takes some time to see it work. But it&amp;rsquo;s worth it, but once it runs you get a very rewarding feeling. And you reduce the risk of something going wrong later on when you don&amp;rsquo;t expect it and didn&amp;rsquo;t plan for it.&lt;/p&gt;

&lt;p&gt;I encourage you to try a Walking Skeleton when you start your next project!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google&#43; Sign-In with Scalatra</title>
      <link>http://codurance.com/blog/google-plus-sign-in-with-scalatra/</link>
      <pubDate>Thu, 10 Jul 2014 15:35:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/google-plus-sign-in-with-scalatra/</guid>
      <description>

&lt;h3 id=&#34;the-requirements&#34;&gt;The requirements&lt;/h3&gt;

&lt;p&gt;For one of our internal pet-projects at Codurance, we decided to have authentication and authorisation using &lt;a href=&#34;https://developers.google.com/+/&#34;&gt;Google+ Sign-in&lt;/a&gt;. Google+ Sign-In is able to authenticate anyone with a Google email account (gmail or business) using OAuth 2.0. However, we wanted to restrict the application to Codurance craftsmen only, that means, people with a Codurance email address.&lt;/p&gt;

&lt;p&gt;The application had also to redirect us to the desired URL, in case we tried to access a deep URL without being authenticated.&lt;/p&gt;

&lt;h3 id=&#34;technology-stack&#34;&gt;Technology stack&lt;/h3&gt;

&lt;p&gt;In this project we are using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scalatra.org/&#34;&gt;Scalatra&lt;/a&gt; as a web micro-framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jade-lang.com/&#34;&gt;Jade&lt;/a&gt; as template engine&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;sbt&lt;/a&gt; as our build tool.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/json4s/json4s&#34;&gt;json4s&lt;/a&gt; for JSON manipulation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stackmob/newman&#34;&gt;Newman&lt;/a&gt; as HTTP client library&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;h4 id=&#34;authentication-filter&#34;&gt;Authentication Filter&lt;/h4&gt;

&lt;p&gt;First we need to add an AuthenticationFilter to our Scalatra application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import javax.servlet.ServletContext

import com.codurance.cerebro.controllers.MainController
import com.codurance.cerebro.security.AuthenticationFilter
import org.scalatra._

class ScalatraBootstrap extends LifeCycle {
    override def init(context: ServletContext) {
        context.mount(new AuthenticationFilter, &amp;quot;/*&amp;quot;)
        context.mount(new MainController, &amp;quot;/*&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in the AuthenticationFilter, we need to redirect to the sign-in page when we don&amp;rsquo;t have a user in the session. We also need to exclude the pages and URLs that don&amp;rsquo;t need a user to be logged in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.codurance.cerebro.security

import org.scalatra.ScalatraFilter

class AuthenticationFilter extends ScalatraFilter {
    before() {
        if (isProtectedUrl &amp;amp;&amp;amp; userIsNotAuthenticated) {
            redirect(&amp;quot;/signin?originalUri=&amp;quot; + originalURL)
        }
    }

    def originalURL(): String = {
        val url = Option(request.getRequestURI).getOrElse(&amp;quot;/main&amp;quot;)
        if (url.startsWith(&amp;quot;/signin&amp;quot;)) &amp;quot;/main&amp;quot; else url
    }

    def userIsNotAuthenticated: Boolean = {
        request.getSession.getAttribute(&amp;quot;user&amp;quot;) == null
    }

    def isProtectedUrl(): Boolean = {
        val url = request.getRequestURI();
        !(url.equals(&amp;quot;/signin&amp;quot;) || url.equals(&amp;quot;/authorise&amp;quot;) || url.equals(&amp;quot;/not-authorised&amp;quot;))
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about filters, check the &lt;a href=&#34;http://www.scalatra.org/&#34;&gt;Scalatra&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h4 id=&#34;signin-jade&#34;&gt;signin.jade&lt;/h4&gt;

&lt;p&gt;Then we need a sign-in page, that is displayed when the user is not authenticated.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jade&#34;&gt;- attributes(&amp;quot;title&amp;quot;) = &amp;quot;Cerebro&amp;quot;
- attributes(&amp;quot;layout&amp;quot;) = &amp;quot;/WEB-INF/templates/layouts/no-header.jade&amp;quot;

-@ val originalUri: String

h1 Welcome to Cerebro!

p= &amp;quot;Please sigin in using google id!&amp;quot;
p URI: #{originalUri}

:!javascript
    function onSignInCallback(authResult) {
        if (authResult[&#39;access_token&#39;]) {
            $.ajax({
                type: &#39;POST&#39;,
                url: &#39;/authorise&#39;,
                contentType: &#39;application/x-www-form-urlencoded; charset=utf-8&#39;,
                data: {authCode: authResult.code },
                success: function(result) {
                    window.location.replace(&#39;#{originalUri}&#39;);
                },
                error: function(result) {
                    window.location.replace(&#39;/not-authorised&#39;);
                }
            });
        }
    }

#gConnect
    button(class=&#39;g-signin&#39;
    data-scope=&#39;https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email&#39;
    data-requestvisibleactions=&#39;http://schemas.google.com/AddActivity&#39;
    data-clientId=&#39;&amp;lt;&amp;lt;YOUR_CLIENT_ID&amp;gt;&amp;gt;&#39;
    data-accesstype=&#39;offline&#39; data-callback=&#39;onSignInCallback&#39;
    data-theme=&#39;dark&#39;
    data-cookiepolicy=&#39;single_host_origin&#39;)

script(src=&#39;https://plus.google.com/js/client:plusone.js&#39;)
script(src=&#39;//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are not using Jade or want more details, check the &lt;a href=&#34;https://developers.google.com/+/web/signin/add-button&#34;&gt;official documentation&lt;/a&gt; about how to &lt;a href=&#34;https://developers.google.com/+/web/signin/add-button&#34;&gt;add the sign-in button&lt;/a&gt; to your page.&lt;/p&gt;

&lt;p&gt;This should be enough to trigger the Google authentication form when clicking on the Sign-In button. Once the authentication is done, the callback function will send us a POST with the &amp;ldquo;authCode&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;main-controller&#34;&gt;Main Controller&lt;/h4&gt;

&lt;p&gt;We then need a controller that will respond to all these requests, displays the respective pages, and do the authorisation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.codurance.cerebro.controllers

import javax.servlet.http.{HttpServletResponse, HttpServletRequest}

class BaseController extends CerebroStack {

    def display(page: String, attributes: (String, Any)*)(implicit request: HttpServletRequest, response: HttpServletResponse): String = {
        contentType = &amp;quot;text/html&amp;quot;
        val all_attributes = attributes :+ (&amp;quot;user&amp;quot;, session.getAttribute(&amp;quot;user&amp;quot;))
        jade(page, all_attributes: _*)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.codurance.cerebro.controllers

import com.codurance.cerebro.security.CoduranceAuthorisation.authorise

import scala.Predef._

class MainController extends BaseController {

    get(&amp;quot;/&amp;quot;) {
        display(&amp;quot;main&amp;quot;)
    }

    get(&amp;quot;/main&amp;quot;) {
        display(&amp;quot;main&amp;quot;)
    }

    get(&amp;quot;/signin&amp;quot;) {
        display(&amp;quot;signin&amp;quot;, &amp;quot;originalUri&amp;quot; -&amp;gt; request.getParameter(&amp;quot;originalUri&amp;quot;))
    }

    get(&amp;quot;/not-authorised&amp;quot;) {
        display(&amp;quot;not-authorised&amp;quot;)
    }

    post(&amp;quot;/authorise&amp;quot;) {
        val authCode: String = params.getOrElse(&amp;quot;authCode&amp;quot;, halt(400))
        authorise(authCode)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The MainController responds to &amp;ldquo;/authorise&amp;rdquo;, which invokes the authorisation function defined inside CoduranceAuthorisation. Note that we receive the &amp;ldquo;authCode&amp;rdquo; from the Google+ authentication. Once the user was authenticated, we had to make the application available just for users using a Codurance email. For that, we had to invoke the &lt;a href=&#34;https://developers.google.com/+/api/latest/people&#34;&gt;Google+ People API&lt;/a&gt; to get more information (email address, domain, etc).&lt;/p&gt;

&lt;p&gt;The authorise function would then check if the user belongs to the Codurance domain and add her to the session.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.codurance.cerebro.security

import java.net.URL
import javax.servlet.http.{HttpSession, HttpServletResponse, HttpServletRequest}
import javax.servlet.http.HttpServletResponse._

import com.google.api.client.googleapis.auth.oauth2.{GoogleAuthorizationCodeTokenRequest, GoogleTokenResponse}
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.jackson.JacksonFactory
import com.stackmob.newman._
import com.stackmob.newman.dsl._

import scala.concurrent.Await
import scala.concurrent.duration._

object CoduranceAuthorisation {

    implicit val httpClient = new ApacheHttpClient

    val GOOGLE_PLUS_PEOPLE_URL = &amp;quot;https://www.googleapis.com/plus/v1/people/me?fields=aboutMe%2Ccover%2FcoverPhoto%2CdisplayName%2Cdomain%2Cemails%2Clanguage%2Cname&amp;amp;access_token=&amp;quot;
    val CLIENT_ID: String = &amp;quot;&amp;lt;&amp;lt;YOUR_CLIENT_ID&amp;gt;&amp;gt;&amp;quot;
    val CLIENT_SECRET = &amp;quot;&amp;lt;&amp;lt;YOUR_CLIENT_SECRET&amp;gt;&amp;gt;&amp;quot;
    val API_KEY = &amp;quot;&amp;lt;&amp;lt;YOUR_API_KEY&amp;gt;&amp;gt;&amp;quot;
    val APPLICATION_NAME = &amp;quot;&amp;lt;&amp;lt;YOUR_APP_NAME&amp;gt;&amp;gt;&amp;quot;
    val JSON_FACTORY = new JacksonFactory()
    val TRANSPORT = new NetHttpTransport()

    def authorise(authCode: String)(implicit session: HttpSession, response: HttpServletResponse): Unit = {
        val user = userFor(authCode)
        user.domain match {
            case Some(Domain(&amp;quot;codurance.com&amp;quot;)) =&amp;gt; {
                session.setAttribute(&amp;quot;user&amp;quot;, user)
                response.setStatus(SC_OK)
            }
            case _ =&amp;gt; response.setStatus(SC_UNAUTHORIZED)
        }
    }

    def userFor(authCode: String): User = {
        val tokenResponse: GoogleTokenResponse =
            new GoogleAuthorizationCodeTokenRequest(
                TRANSPORT, JSON_FACTORY, CLIENT_ID, CLIENT_SECRET, authCode, &amp;quot;postmessage&amp;quot;
            ).execute
        val url = new URL(GOOGLE_PLUS_PEOPLE_URL + tokenResponse.getAccessToken)
        val userInfo = Await.result(GET(url).apply, 10.seconds)
        GooglePlusJSONResponseParser.toUser(userInfo.bodyString, tokenResponse.toString)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that in the GOOGLE_PLUS_PEOPLE_URL we specify all the fields we are interested in, including the &lt;em&gt;domain&lt;/em&gt; and &lt;em&gt;emails&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GooglePlusJSONResponseParser&lt;/strong&gt; is a class that we created to parse the JSON response and convert into a User object. We are not showing it in order to keep this post short and focused. You can create your own JSON parser. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Don&amp;rsquo;t forget to import add the Google+ APIs to your sbt build file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    &amp;quot;com.google.apis&amp;quot; % &amp;quot;google-api-services-oauth2&amp;quot; % &amp;quot;v2-rev59-1.17.0-rc&amp;quot;,
    &amp;quot;com.google.apis&amp;quot; % &amp;quot;google-api-services-plus&amp;quot; % &amp;quot;v1-rev115-1.17.0-rc&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s about it. You now can display the name of the user on all your pages, using a default layout.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jade&#34;&gt;-@ val title: String
-@ val headline: String = title
-@ val body: String
-@ val user: com.codurance.cerebro.security.User

!!!
html
    head
        title= title
    body
        header
            div
                span Hello #{user.name.displayName}
        div
            h1= headline
            != body
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>