<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/testing/</link>
    <description>Recent content in Testing on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 31 Jan 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/testing/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Isolating integration tests and mocking dependencies with Spring Boot</title>
      <link>http://codurance.com/blog/isolating-integration-tests-with-the-spring-framework/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/isolating-integration-tests-with-the-spring-framework/</guid>
      <description>&lt;p&gt;Integration tests can be slow and unreliable because they depend on too many components in the system. Up to a certain point, this is unavoidable: integration tests are here to validate how each part of your system plays with other internal or external components.&lt;/p&gt;

&lt;p&gt;We can, however, improve some integration tests by only spinning up the required dependencies, instead of the whole system. Let&amp;rsquo;s imagine an application that depends on a database, a third-party REST API and a message queue:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-01-31-isolating-integration-tests-with-the-spring-framework.md/my-application.png&#34; alt=&#34;Our application with 3 dependencies&#34; title=&#34;Our application with 3 dependencies&#34; class=&#34;img img-responsive style-screengrab&#34; style=&#34;margin:auto;display:block;&#34;/&gt;


&lt;p&gt;Assume now that we would like our integration test to validate a behavior that only includes calls to the REST API but no call to the database or the message queue. To give a concrete example, let&amp;rsquo;s assume we want to check that our REST client is correctly configured to time out after 3 seconds.&lt;/p&gt;

&lt;p&gt;All we need for this is a small &lt;code&gt;Controller&lt;/code&gt; that will mock the REST API by waiting before returning an answer to the REST client. The wait time will be passed as a parameter in the query string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Profile(&amp;quot;restTemplateTimeout&amp;quot;)
@RestController
@RequestMapping(value = &amp;quot;/test&amp;quot;)
public class DelayedWebServerController {

  @RequestMapping(value = &amp;quot;/delayRestTemplate&amp;quot;, method = GET)
  public String answerWithDelay(@RequestParam Long waitTimeMs) {

    if (waitTimeMs &amp;gt; 0) {
      try {
        Thread.sleep(waitTimeMs);
      } catch (InterruptedException e) {
        throw new RuntimeException(e);
      }
    }

    return &amp;quot;Delayed Result&amp;quot;;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What is the &lt;code&gt;@Profile&lt;/code&gt; annotation used for? If we inject this controller into our standard application context, this has several drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The test will be slow: we only need to start one controller, not the whole thing&lt;/li&gt;
&lt;li&gt;Our controller will be picked up by Spring and injected into every other integration test, slowing down each integration test and maybe stepping on another test&amp;rsquo;s toes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A better alternative would be to spin up a minimal Spring Boot application exposing only our &lt;code&gt;DelayedWebServerController&lt;/code&gt;. We will also tell Spring Boot to scan only the packages we are interested in, and to exclude persistence-related auto-configuration since we do not need it to spin up a controller. This is done in a &lt;code&gt;Configuration&lt;/code&gt; class like this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Profile(&amp;quot;restTemplateTimeout&amp;quot;)
@Configuration
@EnableAutoConfiguration(
    exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class})
@ComponentScan(basePackages = &amp;quot;my.application.resttemplate.timeout&amp;quot;)
public class DelayedWebServerConfiguration {
    //The class is empty and only used to support the annotations
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Spring context configuration can get quite confusing, let us look at the annotations one after the other:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Profile&lt;/code&gt;: This tells Spring that this configuration should only be used when the &lt;code&gt;restTemplateTimeout&lt;/code&gt; profile is active. Further in this article, we will see how we enable this profile for a specific integration test. It is this annotation that prevents the configuration to be picked up by other unrelated integration tests. Note that our &lt;code&gt;DelayedWebServerController&lt;/code&gt; is identically annotated.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;/code&gt;: Standard annotation to tell Spring that this is a context configuration class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;: Here we disable some of the Spring Boot &amp;ldquo;magic&amp;rdquo; that we do not need for our specific test&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;: We speed up the Spring Boot application startup by only scanning one package instead of the whole project. Any Spring-annotated class that is outside of this package will not be picked up by Spring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is how the integration test looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(SpringJUnit4ClassRunner.class)
@WebIntegrationTest(&amp;quot;server.port:0&amp;quot;)
@SpringApplicationConfiguration(classes = DelayedWebServerConfiguration.class)
@ActiveProfiles(&amp;quot;restTemplateTimeout&amp;quot;)
public class RestTemplateShould {

  @Rule
  public ExpectedException thrown = none();

  @Value(&amp;quot;${local.server.port}&amp;quot;)
  private int port;

  @Autowired
  private RestTemplate restTemplate;

  @Test
  public void throw_timeout_if_response_lasts_more_than_two_seconds() {
    thrown.expect(ResourceAccessException.class);
    thrown.expectCause(instanceOf(SocketTimeoutException.class));

    callEndpointWithDelay(3000);
  }

  @Test
  public void do_not_throw_timeout_if_response_lasts_less_than_two_seconds() {
    callEndpointWithDelay(10);
  }

  private void callEndpointWithDelay(long delayMs) {
    restTemplate.getForObject(
        &amp;quot;http://localhost:&amp;quot; + port + &amp;quot;/test/delayRestTemplate?waitTimeMs=&amp;quot; + delayMs, String.class);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, all those classes are stored in our test source folder (usually &lt;code&gt;src/test/java&lt;/code&gt;) since they are not required for production.&lt;/p&gt;

&lt;p&gt;Let us have a look again at the annotations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RunWith&lt;/code&gt;: The test will use the Spring Junit runner who will take care of creating the Spring context for us.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@WebIntegrationTest&lt;/code&gt;: Tells Spring that this is an integration test running a web application, otherwise by default Spring will not run an HTTP server in test mode. We also set the &lt;code&gt;server.port&lt;/code&gt; to a value of &lt;code&gt;0&lt;/code&gt; so that Spring Boot choose a random port for the HTTP server to listen to. This allows to have several tests running in parallel, or to have another version of the application running in the background.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@SpringApplicationConfiguration&lt;/code&gt;: We tell Spring where it will find the &lt;code&gt;DelayedWebServerConfiguration&lt;/code&gt; class we created before.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ActiveProfiles&lt;/code&gt;: Enables the &lt;code&gt;restTemplateTimeout&lt;/code&gt; profile, otherwise the &lt;code&gt;Controller&lt;/code&gt; and the &lt;code&gt;Configuration&lt;/code&gt; will be filtered out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We now have an integration test running with a limited set of dependencies instead of the whole application. What if we wanted to go further and add mocks into the game? This may be required when a dependency does not have a dev environment or that it is too complicated to call from a developer&amp;rsquo;s workstation. In that case, we can add those mocks to the &lt;code&gt;Configuration&lt;/code&gt; class and they will be injected into the test&amp;rsquo;s Spring context.&lt;/p&gt;

&lt;p&gt;Here is a &lt;code&gt;Configuration&lt;/code&gt; example where we inject a custom &lt;code&gt;CustomerService&lt;/code&gt; mocked by Mockito instead of the default one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Profile(&amp;quot;validationTests&amp;quot;)
@Configuration
@EnableAutoConfiguration(
    exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class})
@ComponentScan(basePackages = {&amp;quot;my.application.controller&amp;quot;,
    &amp;quot;my.application.actions&amp;quot;})
public class ValidationEndToEndConfiguration {
    @Bean
  public CustomerService customerService() {
    return Mockito.mock(CustomerService.class);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this approach, we can make our integration tests more resilient. For slow or unreliable dependencies, it is more efficient to have the developers run their integration tests against a mocked version. However, do not forget that in the end your application will have to integrate with the real system, not the mocked one. For this reason, it makes sense to have the continuous integration server run the tests against the real system at the very least every day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Testing multithreaded code in Java</title>
      <link>http://codurance.com/blog/Testing-multithreaded-code-in-java/</link>
      <pubDate>Sun, 13 Dec 2015 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/Testing-multithreaded-code-in-java/</guid>
      <description>&lt;p&gt;Testing multithreaded code is a tough challenge. The first advice that you get when trying to test concurrency is to isolate your concurrent concerns in the code as much as possible. This a general design advice but in this case it&amp;rsquo;s even more important. Make sure to first properly unit test the logic that is wrapped by the concurrent construct. Otherwise you might spend a long time trying to figure out a concurrency problem that turns out to be flawed business logic in the end.&lt;/p&gt;

&lt;p&gt;Once you have got that covered, you can think about your strategy to test concurrent systems. &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34;&gt;GOOS&lt;/a&gt; covers how you can do it. &lt;a href=&#34;https://github.com/npryce/goos-code-examples/tree/master/testing-multithreaded-code/src/book/example/threading/races&#34;&gt;Here&lt;/a&gt; you can find the code that I&amp;rsquo;m going to explain:&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s have a look into the system under test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class AtomicBigCounter {
    private BigInteger count = BigInteger.ZERO;

    public BigInteger count() {
        return count;
    }

    public void inc() {
        count = count.add(BigInteger.ONE);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this class is not thread safe, as it&amp;rsquo;s exposing some state through the inc() method. The state is not thread safe (you could use AtomicInteger instead of BigInteger to fix that). To test that class we&amp;rsquo;ll include a non-concurrent and a concurrent test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test public void canIncreaseCounter(){
    ...
}

@Test public void canIncrementCounterFromMultipleThreadsSimultaneously()
    throws	InterruptedException {
    MultithreadedStressTester stressTester = new MultithreadedStressTester(25000);

    stressTester.stress(new Runnable() {
        public void run() {
            counter.inc();
        }
    });

    stressTester.shutdown();

    assertThat(&amp;quot;final count&amp;quot;, counter.count(),
    equalTo(BigInteger.valueOf(stressTester.totalActionCount())));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The stress tester will exercise the method n loops with m threads. As our method is incrementing by one, we should see that &lt;code&gt;n*m&lt;/code&gt; is equal to the &lt;code&gt;counter.count()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The interesting class is the MultithreadedStressTester though:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void stress(final Runnable action) throws InterruptedException {
    spawnThreads(action).await();
}

private CountDownLatch spawnThreads(final Runnable action) {
    final CountDownLatch finished = new CountDownLatch(threadCount);

    for (int i = 0; i &amp;lt; threadCount; i++) {
        executor.execute(new Runnable() {
            public void run() {
                try {
                    repeat(action);
                }
                finally {
                    finished.countDown();
                }
            }
        });
    }
    return finished;
}

private void repeat(Runnable action) {
    for (int i = 0; i &amp;lt; iterationCount; i++) {
        action.run();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you execute that test you will receive different results and sometimes it&amp;rsquo;s even passing! That&amp;rsquo;s because this test is not deterministic, we can&amp;rsquo;t assure how the threads will interleave in every execution. If we want to be as sure as possible that this test finds the possible bug, we should increase the number of threads and iterations, but with the obvious time trade-off.&lt;/p&gt;

&lt;p&gt;You can use a more deterministic approach using &lt;a href=&#34;https://github.com/google/thread-weaver&#34;&gt;Weaver&lt;/a&gt;. To understand how it works, let&amp;rsquo;s illustrate it with an example. Let&amp;rsquo;s say that we have an in-memory and not thread-safe store:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	private final Map&amp;lt;Level, Scores&amp;gt; scoresByLevel;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have some service that accesses a repository wrapping that store:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;1	Optional&amp;lt;Scores&amp;gt; scoresFromStore = scoreRepo.findBy(score.level());
2       if(scoresFromStore.isPresent()) {
3          scoreRepo.update(score.level(), score);
4       } else {
5          scoreRepo.save(score.level(), new Scores().add(score));
6       }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That service is a singleton living in a server that spawns a thread per request, so we&amp;rsquo;d like to execute that piece atomically. We could use the stress test non-deterministic approach or we could use Weaver. If we think deeply about this problem, we realise we want to test every combination of the following (as an example, Thread 1 executes line 1 in moment x and Thread 2 executes line 1 in moment x, would be -&amp;gt; T1/1 : T2/1)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;T1/1 : T2/1&lt;/li&gt;
&lt;li&gt;T1/1 : T2/2&lt;/li&gt;
&lt;li&gt;T1/1 : T2/3&lt;/li&gt;
&lt;li&gt;&amp;hellip;.&lt;/li&gt;
&lt;li&gt;T1/2 : T2/1&lt;/li&gt;
&lt;li&gt;T1/2 : T2/2&lt;/li&gt;
&lt;li&gt;T1/2 : T2/3&lt;/li&gt;
&lt;li&gt;&amp;hellip;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, we&amp;rsquo;ll have a problem if T1/5 and T2/2, as T1 didn&amp;rsquo;t save yet, and T2 has already got an empty score from store. That means that T1 will save a score in a level and then T2 will do the same, breaking the logic. And that&amp;rsquo;s exactly what Weaver does, it grabs a method and executes the above combinations using two threads.&lt;/p&gt;

&lt;p&gt;If I get rid of the preparation code (annotated with @ThreadedBefore), the test code will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@ThreadedMain
public void mainThread() {
    scoreService.save(LEVEL_ID, SCORE_VALUE, aUser);
}

@ThreadedSecondary
public void secondThread() {
    scoreService.save(LEVEL_ID, ANOTHER_SCORE_VALUE, aUser);
}

@ThreadedAfter
public void after() {
    Optional&amp;lt;Scores&amp;gt; scores = scoreRepo.findBy(aLevel());
    assertThat(scores.isPresent()).isTrue();
    assertThat(scores.get().contains(aScoreWith(aUser))).isTrue();
    assertThat(scores.get().contains(aDifferentScoreWith(aUser))).isTrue();
}

@Test
public void testThreading() {
    new AnnotatedTestRunner().runTests(this.getClass(), ScoreService.class);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This test will always fail, as it is deterministic. As you can see, testing concurrency is quite hard, and that&amp;rsquo;s why I&amp;rsquo;m a supporter of modern frameworks that try to hide that hassle into a platform or overcome the problem through immutable data. You can read more about it &lt;a href=&#34;http://felipefzdz.github.io/2015/01/02/concurrency-flavours/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>