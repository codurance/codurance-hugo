<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Continuous Deployment on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/continuous-deployment/</link>
    <description>Recent content in Continuous Deployment on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 01 Mar 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/continuous-deployment/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker meets Continuous Deployment</title>
      <link>http://codurance.com/blog/docker-meets-continuous-deployment/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/docker-meets-continuous-deployment/</guid>
      <description>

&lt;p&gt;About one year ago I had my first contact with Docker. This new kid on the block promised to relieve our poor computers from installation of all tools, languages, dependencies and operating systems. Isolated run environments emerged on developers&amp;rsquo; computers.&lt;/p&gt;

&lt;p&gt;While my ops teammates chose a more conservative approach, I started to use Docker with great joy. Despite many people describing Docker as a tool written by developers for development, our industry found new ways of using images and containers. Images of our applications and services became deployment units for tools like Kubernetes, Docker Swarm or Marathon.&lt;/p&gt;

&lt;p&gt;But how are these images created?&lt;/p&gt;

&lt;h2 id=&#34;setting-the-scene&#34;&gt;Setting The Scene&lt;/h2&gt;

&lt;p&gt;From a developer&amp;rsquo;s perspective, any application is manifested by its code, but there is still a long way to go before this code finds its way to a production environment. I want to show you how this process can be easier with &lt;strong&gt;Docker&lt;/strong&gt; and a &lt;strong&gt;Continuous Deployment&lt;/strong&gt; pipeline.&lt;/p&gt;

&lt;p&gt;First of all we need a small application with a HTTP API that we can call after it&amp;rsquo;s deployed. Let&amp;rsquo;s assume that we are using &lt;strong&gt;Gradle&lt;/strong&gt; to build the application and &lt;strong&gt;TeamCity&lt;/strong&gt; as a Continuous Integration server.&lt;/p&gt;

&lt;p&gt;We need to have &lt;strong&gt;Docker&lt;/strong&gt; installed on each &lt;strong&gt;TeamCity&lt;/strong&gt; build agent. We will also use this machine to run our application. In a real project we wouldn&amp;rsquo;t install &lt;strong&gt;TeamCity&lt;/strong&gt; agents on all machines. Instead we should use tools like Kubernetes that will take care of the application distribution.&lt;/p&gt;

&lt;h2 id=&#34;build&#34;&gt;Build&lt;/h2&gt;

&lt;p&gt;As a first step in our Continuous Deployment pipeline, before we even think about Docker images, we need to build our application. In this step we will download the source code, run all &lt;strong&gt;tests&lt;/strong&gt; and produce an &lt;strong&gt;artifact&lt;/strong&gt; containing all elements required to start and run our application.&lt;/p&gt;

&lt;p&gt;This build configuration is not very different to a step in a Continuous Deployment pipeline without &lt;strong&gt;Docker&lt;/strong&gt;. Alongside common parameters we have to define &lt;strong&gt;artifacts&lt;/strong&gt;, which will be generated after each build run. We are going to use them as a base for next steps in the pipeline.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;TeamCity&lt;/strong&gt; we define &lt;strong&gt;artifacts&lt;/strong&gt; by defining paths to files from the working directory (which is created for each run of a configuration). The working directory is a combination of the files downloaded from a version control system and the files generated during the execution of build steps. The working directory elements are defined in the version control settings and build steps.&lt;/p&gt;

&lt;p&gt;We need two artifacts. The first one is &lt;code&gt;Dockerfile&lt;/code&gt;. We already prepared this file in our source code and it will be stored in the &lt;code&gt;docker&lt;/code&gt; directory.
The next file is a &lt;strong&gt;&lt;em&gt;tar&lt;/em&gt;&lt;/strong&gt; file which will be generated by our &lt;strong&gt;Gradle&lt;/strong&gt; build. It contains a script that executes our code and all required libraries.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/build_config.png&#34; alt=&#34;Build Configuration&#34; title=&#34;Build Configuration&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Now we are ready to instruct our build configuration how to download our source code. We use GitHub as our code repository, so we just have to choose &lt;em&gt;Git&lt;/em&gt; as the type of our &lt;strong&gt;Version Control System&lt;/strong&gt; and provide the URL to our application.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/build_vcs.png&#34; alt=&#34;Version Control Configuration&#34; title=&#34;Version Control Configuration&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;With the source code in our working directory we can describe what to do with it. As I mentioned before we run all the &lt;strong&gt;tests&lt;/strong&gt; and generate an &lt;strong&gt;artifact&lt;/strong&gt; containing the start script and libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TeamCity&lt;/strong&gt; has predefined runners for different build tools. In this case we are going to use the &lt;strong&gt;Gradle&lt;/strong&gt; runner to &lt;strong&gt;test&lt;/strong&gt; and &lt;strong&gt;build&lt;/strong&gt;.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/build_step.png&#34; alt=&#34;Gradle Step&#34; title=&#34;Gradle Step&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Now we can run our build and as a result we should see our &lt;strong&gt;artifacts&lt;/strong&gt; in the &lt;em&gt;&amp;ldquo;Artifacts&amp;rdquo;&lt;/em&gt; tab.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/build_result.png&#34; alt=&#34;Build Result&#34; title=&#34;Build Result&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h2 id=&#34;release&#34;&gt;Release&lt;/h2&gt;

&lt;p&gt;Our code is no longer needed. We have all we need to build the docker image. Now we have to create our image and &lt;strong&gt;release&lt;/strong&gt; it with the right version. To simplify our example we are going to use the current build number to define an image version.
Next we will generate a file with this version. This file gives us the possibility to pass information about the version to the next steps.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a closer look at the &lt;code&gt;Dockerfile&lt;/code&gt;. We copy the content of &lt;code&gt;simple_application.tar&lt;/code&gt; (which contains all required libraries and scripts) to the image, by using the &lt;code&gt;ADD&lt;/code&gt; command. This command will automatically &lt;em&gt;untar&lt;/em&gt; all files inside the image. Next we expose the port of our HTTP API and we define how to launch our application by adding an &lt;code&gt;ENTRYPOINT&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;For example our &lt;code&gt;Dockerfile&lt;/code&gt; can look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;FROM java:8

ADD simple_application.tar .

EXPOSE 4567

ENTRYPOINT [&amp;quot;/simple_application/bin/simple_application&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Defining the build configuration is very simple. In general settings we define a new artifact: &lt;code&gt;image.version&lt;/code&gt;. The content of this file will be generated in the one of the build steps.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/release_config.png&#34; alt=&#34;Release Configuration&#34; title=&#34;Release Configuration&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Without the &lt;strong&gt;artifact&lt;/strong&gt; we won&amp;rsquo;t be able to build any image. We have to tell our build how to find the &lt;strong&gt;artifacts&lt;/strong&gt; generated during the &lt;strong&gt;Build&lt;/strong&gt; phase. We can do that by defining an &lt;strong&gt;Artifact Dependency&lt;/strong&gt; in &lt;strong&gt;TeamCity&lt;/strong&gt;. We just have to choose a build configuration, define the &lt;strong&gt;artifacts&lt;/strong&gt; from that build and &lt;strong&gt;TeamCity&lt;/strong&gt; will add them to the working directory.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/release_artifacts.png&#34; alt=&#34;Release Artifact Dependency&#34; title=&#34;Release Artifact Dependency&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;And finally we have to trigger this build automatically after all &lt;strong&gt;tests&lt;/strong&gt; run by the previous step pass. By introducing &lt;strong&gt;Finish Build Trigger&lt;/strong&gt; we can start this build just after &lt;strong&gt;TeamCity&lt;/strong&gt; successfully finishes building the application.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/release_trigger.png&#34; alt=&#34;Release Trigger&#34; title=&#34;Release Trigger&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Now we are ready for a release. Three build steps must be introduced: &lt;strong&gt;Build Image&lt;/strong&gt;, &lt;strong&gt;Push Image&lt;/strong&gt; and &lt;strong&gt;Save Version&lt;/strong&gt;.
This time we will use a different runner type: &lt;strong&gt;Command Line&lt;/strong&gt;. We can execute a shell script on a build agent. Because we have already installed &lt;strong&gt;Docker&lt;/strong&gt; on our build agent we can use the &lt;code&gt;docker&lt;/code&gt; command in our shell script.&lt;/p&gt;

&lt;h3 id=&#34;build-image&#34;&gt;Build Image&lt;/h3&gt;

&lt;p&gt;To build the image we need to execute the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build --tag registry.private/simple_application:%build.number% .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker&amp;rsquo;s &lt;code&gt;build&lt;/code&gt; command will take our &lt;code&gt;Dockerfile&lt;/code&gt; and build the image tagged as &lt;code&gt;registry.private/simple_application&lt;/code&gt; and the version &lt;code&gt;%build.number%&lt;/code&gt;.
The variable &lt;code&gt;%build.number%&lt;/code&gt; is a built-in &lt;strong&gt;TeamCity&lt;/strong&gt; variable containing the current build number.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/release_step_1.png&#34; alt=&#34;Release Build Image Step&#34; title=&#34;Release Build Image Step&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h3 id=&#34;push-image&#34;&gt;Push Image&lt;/h3&gt;

&lt;p&gt;The image created in the previous step exists only on the agent machine. To make the image available to others we need to store it in a repository. We can use &lt;strong&gt;Docker Hub&lt;/strong&gt;, but in our example we use a private repository available under the address &lt;code&gt;repository.private&lt;/code&gt;. We can execute the following command to push the image to the repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker push registry.private/simple_application:%build.number%
&lt;/code&gt;&lt;/pre&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/release_step_2.png&#34; alt=&#34;Release Push Image to Repository Step&#34; title=&#34;Release Push Image to Repository Step&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h3 id=&#34;save-version&#34;&gt;Save Version&lt;/h3&gt;

&lt;p&gt;The image is safely stored in the repository, but we need to do one more step: save the version of our image. Once again we run a shell script to generate an &lt;code&gt;image.version&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo %build.number% &amp;gt; image.version
&lt;/code&gt;&lt;/pre&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/release_step_3.png&#34; alt=&#34;Release Save Version Step&#34; title=&#34;Release Save Version Step&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h2 id=&#34;deploy&#34;&gt;Deploy&lt;/h2&gt;

&lt;p&gt;In the previous step we created an image which we can use now to deploy our application. We are going to create another build configuration: &lt;strong&gt;Deploy&lt;/strong&gt;. This build will run a Docker container on the &lt;strong&gt;TeamCity&lt;/strong&gt; agent based on the image from the &lt;strong&gt;Release&lt;/strong&gt; phase.&lt;/p&gt;

&lt;p&gt;Our build configuration must contain three elements. The first one is a trigger. Again, we use the &lt;strong&gt;Finish Build Trigger&lt;/strong&gt; with a dependency to the &lt;strong&gt;Release&lt;/strong&gt; build configuration.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/deploy_trigger.png&#34; alt=&#34;Deploy Trigger&#34; title=&#34;Deploy Trigger&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;The second element is a version string of our image. We can obtain this information from the &lt;strong&gt;artifact&lt;/strong&gt; created by the &lt;strong&gt;Release&lt;/strong&gt; build.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/deploy_artifact.png&#34; alt=&#34;Deploy Artifact&#34; title=&#34;Deploy Artifact&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;The last step is a little bit more complicated. Before we deploy the new version of the application the deployment script need to check if the container with the previous version is already deployed on the machine. If we have such a container we need to stop and remove it.
Next we read the current version from the &lt;strong&gt;artifact&lt;/strong&gt; and create the new container based this version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ -n &amp;quot;$(docker ps --filter label=simple_application -q)&amp;quot; ]; then 
   docker stop simple_application
   docker rm simple_application
fi;

version_to_deploy=$(cat image.version)
docker run -d -p 80:4567 \
           --name simple_application \
           --label simple_application \
           registry.private/simple_application:${version_to_deploy}
&lt;/code&gt;&lt;/pre&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-01-docker-meets-continuous-deployment/deploy_step.png&#34; alt=&#34;Deploy Step&#34; title=&#34;Deploy Step&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;The Continuous Deployment pipeline is ready. Now every change in the master branch of our repository will build, test, release and deploy our application.&lt;/p&gt;

&lt;h2 id=&#34;it-s-done&#34;&gt;It&amp;rsquo;s done.&lt;/h2&gt;

&lt;p&gt;The continuous deployment pipeline described in this post is of course simplified. Between our &lt;strong&gt;Release&lt;/strong&gt; and &lt;strong&gt;Deploy&lt;/strong&gt; steps we would like to do some
additional tests on a production-like environment or introduce &lt;a href=&#34;http://codurance.com/services/training/devops-training/&#34;&gt;zero downtime deployments&lt;/a&gt;, but our approach to any deployment should remain unchanged.&lt;/p&gt;

&lt;p&gt;Use the &lt;strong&gt;Docker&lt;/strong&gt; image. You can ensure a consistent execution environment for your application on every stage of the Continuous Deployment. Now you decide how the code is executed and you cannot blame admins anymore for installing a wrong version of Java or Ruby.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first walking skeleton</title>
      <link>http://codurance.com/blog/My-first-walking-skeleton/</link>
      <pubDate>Wed, 26 Aug 2015 09:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/My-first-walking-skeleton/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;A Walking Skeleton is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.
&lt;footer&gt; &lt;cite&gt;&lt;a href=&#34;http://alistair.cockburn.us/index.php/Walking_skeleton&#34;&gt;Alistair Cockburn&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the goals I had for my apprenticeship was to learn more about Continuous Integration and Continuous Deployment. Building my own little pet project fit in nicely with that, and I wanted to try a couple of new things with it.
A concept I was very curious about was the &lt;a href=&#34;http://blog.codeclimate.com/blog/2014/03/20/kickstart-your-next-project-with-a-walking-skeleton/&#34;&gt;Walking Skeleton&lt;/a&gt;. I read about it in &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt; and as I understood it, it was a way to test-drive my architecture and reduce risk in the beginning of my project.&lt;/p&gt;

&lt;h3 id=&#34;taking-on-the-challenge&#34;&gt;Taking on the challenge&lt;/h3&gt;

&lt;p&gt;I had started the project in &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; and used &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt; as a build tool, both of which I&amp;rsquo;d never used before in a project. As I had limited experience with functional programming, I watched the videos from the Coursera Lectures on &lt;a href=&#34;https://www.coursera.org/course/progfun&#34;&gt;Functional Programming Principles in Scala&lt;/a&gt;. Solving some of the riddles there was quite fun! Unfortunately, that didn&amp;rsquo;t help with the hurdles and hiccups of using SBT and a couple of plugins that didn&amp;rsquo;t play well with the newest Scala version. Quite a couple of times I got stuck and had to ask my mentor for help. But pairing with him always brought a great deal of motivation and progress.&lt;/p&gt;

&lt;h3 id=&#34;making-the-first-steps&#34;&gt;Making the first steps&lt;/h3&gt;

&lt;p&gt;The next task was to decide how to get the integration up and running quickly.
I first set up a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&#34;&gt;Hello World&lt;/a&gt; and deploying it to &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-scala#set-up&#34;&gt;Heroku&lt;/a&gt;. I decided to pass on using play and use as few plugins and frameworks as possible.&lt;/p&gt;

&lt;p&gt;My initial steps were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a &lt;a href=&#34;https://github.com/codurance/gr8craft&#34;&gt;repository&lt;/a&gt; for my project&lt;/li&gt;
&lt;li&gt;open a console in the directory of the local clone of the repository&lt;/li&gt;
&lt;li&gt;install SBT with &lt;code&gt;brew install sbt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create a &lt;a href=&#34;https://github.com/codurance/gr8craft/tree/7bcf1bfb42ec87cfddeb48cf8c5160b4834adbd4&#34;&gt;simple HelloWorld and SBT config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;install Heroku with &lt;code&gt;brew install heroku&lt;/code&gt; and &lt;code&gt;heroku login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create the app on Heroku with &lt;code&gt;heroku create&lt;/code&gt; (I renamed it later)&lt;/li&gt;
&lt;li&gt;deploy with &lt;code&gt;git push heroku&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;show the log with &lt;code&gt;heroku logs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, not everything worked as intended from the start. As you can see from my commit history, it took a few tries and pairing with my mentor to get the app really working and the Hello World output to show up in the logs.
 SBT was particularly challenging, as it was so unfamiliar. Once I got it working on my machine, it was easy to deploy and run on Heroku, though.&lt;/p&gt;

&lt;h3 id=&#34;defining-the-domain&#34;&gt;Defining the domain&lt;/h3&gt;

&lt;p&gt;The idea I wanted to implement was a &lt;a href=&#34;https://twitter.com/gr8craft&#34;&gt;small bot&lt;/a&gt; helping developers to remember good design principles while they were reading twitter. I registered a twitter account and, with the help of my mentor, decided on it&amp;rsquo;s first feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: Hourly Article Tweet
  As a follower of gr8craft
  I want hourly tweets to software design articles in my timeline
  so that they inspire me to do better design
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I described the initial domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Clock&amp;quot; reaches &amp;quot;Full Hour&amp;quot; triggers &amp;quot;Tweet&amp;quot; contains &amp;quot;Link&amp;quot; points to &amp;quot;Article&amp;quot; is stored in &amp;quot;Shelf&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I wrote an acceptance test for the feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: Hour reached
    Given the next article on the shelf about &amp;quot;DDD&amp;quot; can be found at &amp;quot;http://t.co/lqJDZlGcJE&amp;quot;
    When the hour is reached
    Then gr8craft tweets &amp;quot;Your hourly recommended article about DDD: http://t.co/lqJDZlGcJE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-driving-the-skeleton&#34;&gt;Test-driving the skeleton&lt;/h3&gt;

&lt;p&gt;I set up my first test with &lt;a href=&#34;https://cucumber.io/&#34;&gt;Cucumber&lt;/a&gt;, tweeting against the real Twitter API using &lt;a href=&#34;http://twitter4j.org&#34;&gt;twitter4j&lt;/a&gt; and asserting that the last tweet was actually the expected one. I set up a testing account especially for this purpose. Before each test run, I clean up the timeline so as not to run into the problem of having twitter reject duplicated tweets. Another problem was that Twitter shortened the link I posted, making it hard to test if it was actually the link I was expecting. By using the shortened version directly I avoided setting up a complicated assertion to see that the shortened version was redirecting to the same location.
The ApplicationRunner was developed test-driven using mocks.&lt;/p&gt;

&lt;p&gt;Initially, I didn&amp;rsquo;t know how the scheduling would work. That&amp;rsquo;s why I started with a fake scheduler that would use the real clock to set up a trigger for new tweets. When I got a little further in I realized that using a scheduled thread executor was much simpler and easier to tests, so I changed that.&lt;/p&gt;

&lt;p&gt;I implemented the application and went on to figure out the scheduling. My first refactoring was ahead - I started by test-driving the new way of scheduling: updating the  &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/9ec1e4b8a479a4055e373c6e7295abdc08edd22e&#34;&gt;ScheduledExecutor&lt;/a&gt; and using &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/9bab89bc5768b4803b1c797d5c869863a56aea84&#34;&gt;TweetRunner&lt;/a&gt; to do the actual work. I wanted to test the scheduler, so I made the time interval configurable and used Scala Test&amp;rsquo;s &lt;a href=&#34;http://doc.scalatest.org/2.0/index.html#org.scalatest.concurrent.Eventually$&#34;&gt;Eventually&lt;/a&gt; to give it a few tries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(classOf[JUnitRunner])
class ScheduledExecutorShould extends FunSuite with Matchers with Eventually with BeforeAndAfter with OneInstancePerTest {

  var wasScheduled = false
  val scheduler = new ScheduledExecutor(NANOSECONDS, new Runnable {
    override def run(): Unit = wasScheduled = true
  })

  after(scheduler.shutdown())

  test(&amp;quot;schedule the runnable&amp;quot;) {
    scheduler.schedule()

    ensureRunnableWasScheduled
    scheduler.isShutDown shouldBe false
  }

  test(&amp;quot;shutdown the runnable&amp;quot;) {
    scheduler.schedule()
    ensureRunnableWasScheduled

    scheduler.shutdown()

    scheduler.isShutDown shouldBe true
  }

  def ensureRunnableWasScheduled: Unit = {
    eventually(timeout(5.seconds), interval(1.seconds)) {
      wasScheduled shouldBe true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that was left is to change my Cucumber steps and application to use the new Scheduling mechanism and TweetRunner. The tests were green and I could see the result on the &lt;a href=&#34;https://twitter.com/gr8crafttest&#34;&gt;testing account&lt;/a&gt;. Success!&lt;/p&gt;

&lt;h3 id=&#34;making-it-run-properly&#34;&gt;Making it run properly&lt;/h3&gt;

&lt;p&gt;To make the new application run on Heroku, I needed to &lt;a href=&#34;http://twitter4j.org/en/configuration.html&#34;&gt;configure the twitter4j environment variables&lt;/a&gt; there. I didn&amp;rsquo;t want to publish them by adding them to the github repository and had used a file to configure them locally.
Heroku allows for easy configuration of environment variables via the website or the command line. I chose the latter and configured them by simply executing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku config:add oauth.consumerKey=**********
heroku config:add oauth.consumerSecret=************
heroku config:add oauth.accessToken=**************************************************
heroku config:add oauth.accessTokenSecret=******************************************
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logging-the-essentials&#34;&gt;Logging the essentials&lt;/h3&gt;

&lt;p&gt;It is important to log the interaction with external resources like Twitter and the Scheduler, and to record errors in the right place. If you wait to do this for too long, it can make maintaining your application a real pain. I already benefitted from having the logging to localize problems.&lt;/p&gt;

&lt;p&gt;I introduced &lt;a href=&#34;http://slf4s.org/&#34;&gt;slf4s&lt;/a&gt; and &lt;a href=&#34;http://logback.qos.ch/&#34;&gt;logback&lt;/a&gt; into the mix. This allowed me to easily log from any Scala class by using the &lt;em&gt;Logging&lt;/em&gt; trait:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class TwitterApiService(twitter: Twitter) extends TwitterService with Logging {
  ...
  def sendToTwitter(tweet: String): Unit = {
    log.info(&amp;quot;sending tweet to Twitter: &amp;quot; + tweet)

    twitter.updateStatus(tweet)

    log.info(&amp;quot;successfully tweeted &amp;quot; + tweet)
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since twitter4j was generating a lot of noise communicating with the Twitter API, I had to create a logback configuration file and set it to a different logging level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;appender name=&amp;quot;STDOUT&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;
        &amp;lt;encoder&amp;gt;
            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
    &amp;lt;/appender&amp;gt;

    &amp;lt;logger name=&amp;quot;twitter4j&amp;quot; level=&amp;quot;INFO&amp;quot;/&amp;gt;

    &amp;lt;root level=&amp;quot;debug&amp;quot;&amp;gt;
        &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
    &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-up-continuous-integration&#34;&gt;Setting up Continuous Integration&lt;/h3&gt;

&lt;p&gt;There were a few tasks left to making the whole thing run not only by manually running the cucumber test in the IDE. I noticed not all the tests were executing in the IDE. That&amp;rsquo;s because it was looking for JUnit tests. This was an easy fix by adding &lt;code&gt;@RunWith(classOf[JUnitRunner])&lt;/code&gt;. Now to make the cucumber tests run when I executed &lt;code&gt;sbt test&lt;/code&gt; on the console, I needed to add &lt;a href=&#34;https://github.com/sbt/junit-interface&#34;&gt;JUnit Interface&lt;/a&gt; to my SBT dependencies. I had decided against using a SBT Cucumber plugin, as the ones I found were incompatible with the newest version of Scala.&lt;/p&gt;

&lt;p&gt;To set up Continuous Integration, I installed &lt;code&gt;brew install travis&lt;/code&gt; and created a simple &lt;a href=&#34;http://docs.travis-ci.com/user/languages/scala/&#34;&gt;Travis&lt;/a&gt; configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;language: scala
scala:
- 2.11.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, Travis can use SBT to automatically build and test without further configuration. The only thing I don&amp;rsquo;t like is that all dependencies have to be loaded again for every build, which makes it kind of slow.
Travis needed to know the authentication for the twitter4j configuration too. I thought this would be easy to do just by encrypting the variables in &lt;a href=&#34;http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables&#34;&gt;travis.yml&lt;/a&gt;.
However, since Travis uses bash, it doesn&amp;rsquo;t allow for dots in the variable name. I created a workaround by setting custom environment variables and using them to programmatically configure twitter4j:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;def createTwitter(suffix: String = &amp;quot;&amp;quot;): Twitter = {
   val configuration = new ConfigurationBuilder()
     .setDebugEnabled(true)
     .setOAuthConsumerKey(readEnvironmentVariable(suffix, &amp;quot;twitter4jconsumerKey&amp;quot;))
     .setOAuthConsumerSecret(readEnvironmentVariable(suffix, &amp;quot;twitter4jconsumerSecret&amp;quot;))
     .setOAuthAccessToken(readEnvironmentVariable(suffix, &amp;quot;twitter4jaccessToken&amp;quot;))
     .setOAuthAccessTokenSecret(readEnvironmentVariable(suffix, &amp;quot;twitter4jaccessTokenSecret&amp;quot;))
     .build()

   new TwitterFactory(configuration).getInstance()
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The suffix is used so that I can have a different configuration for the production code and the tests, which run on a different Twitter account. Of course, I had to set these variables in my local command line, IDE and on Heroku as
well.&lt;/p&gt;

&lt;p&gt;I added the variables to the Travis config automatically via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;travis encrypt twitter4jconsumerKey4testing=********** --add env.matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still, the tests were failing on Travis since the retry timeout was not high enough. Once the problem was found, it was easy to fix and the build was finally green.&lt;/p&gt;

&lt;h3 id=&#34;deploying-to-heroku-automatically&#34;&gt;Deploying to Heroku automatically&lt;/h3&gt;

&lt;p&gt;That was surprisingly easy! I just used the &lt;a href=&#34;http://docs.travis-ci.com/user/deployment/heroku/&#34;&gt;wizard provided by Travis&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;travis setup heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I answered three simple questions and it automatically added the &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/2570086f4ba9927f956141a552bc64cd932b10dd&#34;&gt;necessary information&lt;/a&gt; to my travis.yml. It just worked!&lt;/p&gt;

&lt;h3 id=&#34;configuring-alternative-step-definitions-for-cucumber&#34;&gt;Configuring alternative step definitions for Cucumber&lt;/h3&gt;

&lt;p&gt;Since I am running my Cucumber tests via JUnit, I could configure them with options to provide a location for the StepDefinitions. This way, I could use the same scenario definition with both the real Twitter API and a mocked version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(classOf[Cucumber])
@CucumberOptions(glue = Array(&amp;quot;gr8craft.features&amp;quot;))
class CucumberFeatures {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;coming-to-a-conclusion&#34;&gt;Coming to a conclusion&lt;/h3&gt;

&lt;p&gt;My next goal is to introduce a database with multiple articles, so that the bot will provide value to followers. I will then expand the domain and move along to the next feature, which will allow the bot to answer to mentions.&lt;/p&gt;

&lt;p&gt;One of the lessons I learned over the last few weeks was (again) the value of pairing and code reviews. When I was stuck, pairing with my mentor or asking him for advice helped me instantly. He could see things from a different perspective, cover my blind spots, give encouragement and ideas and provide insights. I am very grateful for this support.&lt;/p&gt;

&lt;p&gt;With this approach, I quickly found that my idea of how scheduling would work was off and I could easily refactor to cater for it. And I figured out the quirks of setting up the automatic testing, integration and deployment, which will pay off with every change I make.&lt;/p&gt;

&lt;p&gt;I think the Walking Skeleton approach is a lot of effort at the start and it takes some time to see it work. But it&amp;rsquo;s worth it, but once it runs you get a very rewarding feeling. And you reduce the risk of something going wrong later on when you don&amp;rsquo;t expect it and didn&amp;rsquo;t plan for it.&lt;/p&gt;

&lt;p&gt;I encourage you to try a Walking Skeleton when you start your next project!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>