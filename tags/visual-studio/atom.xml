<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Visual Studio on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/visual-studio/</link>
    <description>Recent content in Visual Studio on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 25 Nov 2015 17:00:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/visual-studio/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mouseless Programming</title>
      <link>http://codurance.com/blog/mouseless-programming/</link>
      <pubDate>Wed, 25 Nov 2015 17:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/mouseless-programming/</guid>
      <description>

&lt;p&gt;To be honest, I used to be quite a power mouse user. Looking back and trying to figure out why I got addicted, it probably happened when Microsoft released Word 6.0 with its twenty-some toolbars with thirty-some buttons in each toolbar. I didn&amp;rsquo;t remember many shortcuts, except &lt;code&gt;ctrl+c&lt;/code&gt;, &lt;code&gt;ctrl+v&lt;/code&gt;, and &lt;code&gt;ctrl+s&lt;/code&gt;, which I did learn and instantly became a full-stack Word guru in the eyes of toolbar-only users.&lt;/p&gt;

&lt;p&gt;Slowly, but inevitably, IntelliJ IDEA and Visual Studio replaced my command-line Turbo Pascal and Fortran compilers. Few years later, one nice person showed me ReSharper&amp;hellip; Still, I&amp;rsquo;d rather made jokes about 3,721 IDE shortcuts and Spiderman skills to execute 9-fingers keyboard shortcut combinations, instead of learning one shortcut per week – and hence my right hand became a devoted Logitech docking station.&lt;/p&gt;

&lt;p&gt;But the truth is, when we&amp;rsquo;re coding, by switching between the keyboard and the mouse, we lose some time. It might not be a big number in terms of seconds, but over the course of the day it can add up to a significant sum. And there&amp;rsquo;s another side effect – if you need mouse often, it&amp;rsquo;s tempting to have several toolbars and nice gadget frames visible, which in turn decreases the available space for our core business, coding.
To get rid of this bad habit, I recorded two videos, one performing some common coding tasks using a mouse, and the second with the keyboard only. In the videos below, you can see the result.&lt;/p&gt;

&lt;h4 id=&#34;part-i-programming-with-mouse-and-keyboard&#34;&gt;Part I - Programming With Mouse and Keyboard&lt;/h4&gt;

&lt;iframe width=&#34;694&#34; height=&#34;390&#34; src=&#34;https://www.youtube.com/embed/g6kfdlUZARs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h4 id=&#34;part-ii-programming-with-keyboard-only&#34;&gt;Part II - Programming With Keyboard Only&lt;/h4&gt;

&lt;iframe width=&#34;694&#34; height=&#34;390&#34; src=&#34;https://www.youtube.com/embed/Rcf6cwP_J8M&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;To sum it up, mouseless programming took almost one minute less than programming with the mouse and the keyboard, which is around 15% improvement.&lt;/p&gt;

&lt;p&gt;The comparison is of course not a precise scientific experiment. Some actions were slower with one scenario, some with another one, but overall they should have a more or less the same effect. I used only the standard IDE and ReSharper with the IntelliJ IDEA keyboard scheme, except moving an open document to a new vertical tab group. I use this action often, that&amp;rsquo;s why I created a custom shortcut for it. I also take advantage of my custom &lt;a href=&#34;https://www.jetbrains.com/resharper/help/Templates__Applying_Templates__Creating_Files_from_Templates.html&#34;&gt;File Template&lt;/a&gt; and two &lt;a href=&#34;https://www.jetbrains.com/ruby/help/creating-and-editing-live-templates.html&#34;&gt;Live Templates&lt;/a&gt;, which I created in the ReSharper Template Explorer.  I&amp;rsquo;ll write more detailed about them in my next post – &amp;lsquo;Setting up a productive programming environment&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;To eliminate or at least minimise the bad habit, you can use a simple healing method – a 10 to 15 minutes &amp;lsquo;mouseless&amp;rsquo; session per day with these simple rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use only the keyboard.&lt;/li&gt;
&lt;li&gt;If you encounter a situation where you would usually use a mouse, search for a shortcut – in the IDE itself or on the internet, with a side-effect of getting accustomed with your default internet browser&amp;rsquo;s shortcuts.&lt;/li&gt;
&lt;li&gt;If you cannot find appropriate shortcut in approx. 3 minutes, use the mouse to continue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It could be a bit stressful in the beginning, sometimes you might have to even hide the mouse in a drawer to keep the discipline. But it gets better after each session, as you memorise new keyboard shortcuts and the mouse gradually becomes more and more obsolete, while productivity increases. Several tools can help finding a substitute for the mouse clicks. For example, Java developers have &lt;a href=&#34;https://plugins.jetbrains.com/plugin/4455?pr=idea&#34;&gt;Key Promoter&lt;/a&gt;, .NET developers might take a look at &lt;a href=&#34;https://github.com/JetBrains/resharper-presentation-assistant&#34;&gt;Presentation Assistant&lt;/a&gt; etc.&lt;/p&gt;

&lt;p&gt;It should not take you long to be able to use your favourite IDE in the full-screen mode, without any toolbars, focusing solely on coding. Moreover, if you are used to handling source control actions through visual dialogs, you might find out it&amp;rsquo;s much faster to use command line tools (e.g. Git Bash instead of the GitHub extension). Switching back to the normal IDE view will become a very rare event, reserved for slower operations or tasks that are too complex to be handled by the keyboard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional resources for the most common shortcuts:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shortcutworld.com&#34;&gt;Open, wiki-style Reference Database for Keyboard Shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://visualstudioshortcuts.com&#34;&gt;Visual Studio keyboard shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/resharper/docs/ReSharper_DefaultKeymap_VSscheme.pdf&#34;&gt;IntelliJ ReSharper Default Keymap Visual Studio Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/resharper/docs/ReSharper_DefaultKeymap_IDEAscheme.pdf&#34;&gt;IntelliJ ReSharper Default Keymap IDEA Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf&#34;&gt;IntelliJ IDEA Keymap Scheme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Many thanks to Sandro, Franzi, David, Mani, and Alessandro for suggestions and feedback for the blog post and videos.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Property based testing</title>
      <link>http://codurance.com/blog/property-based-testing/</link>
      <pubDate>Wed, 25 Nov 2015 09:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/property-based-testing/</guid>
      <description>

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;

&lt;p&gt;Craftsmanship in software strives for high, predictable, repeatable and affordable quality. This is the reason why we care about design, code reviews and of course testing.
Test Driven Development helps us create a flexible implementation that meets the expectations of our clients in terms of features, performance and quality. As professionals we have to master as many tools as possible to reach our goal of steadily providing value.&lt;/p&gt;

&lt;h3 id=&#34;property-based-testing&#34;&gt;Property based testing&lt;/h3&gt;

&lt;p&gt;The above is the reason why I am exploring Property Based Testing. I like to think about it as &lt;em&gt;&amp;ldquo;Let the machine do the heavy lifting for you&amp;rdquo;&lt;/em&gt; or as &lt;a href=&#34;http://vimeo.com/68383317&#34;&gt;John Huges&lt;/a&gt; says &lt;em&gt;&amp;ldquo;Don&amp;rsquo;t write tests, generate them&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I am not claiming that you should stop writing unit tests. I find that when driving the design &lt;a href=&#34;https://www.youtube.com/watch?v=XHnuMjah6ps&#34;&gt;Outside-in&lt;/a&gt; hence declaring the relations between my components, unit tests are the tool to use.
Sometimes when I want to discover deeper properties of my domain, I am faced with features that have more edge cases than my brain could handle.
In such cases, generating a wide array of inputs to test my program is appealing. This is where I think property testing becomes a viable tool.&lt;/p&gt;

&lt;p&gt;If you are asking &amp;ldquo;How can I set up a development environment in .NET that would allow me to experiment and work with this tool?&amp;rdquo; the following tutorial is for you.&lt;/p&gt;

&lt;h3 id=&#34;development-environment-details&#34;&gt;Development environment details&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Windows 10 Home Edition&lt;/li&gt;
&lt;li&gt;Visual Studio 2013 version 12 Update 5&lt;/li&gt;
&lt;li&gt;Resharper version 8.2.3&lt;/li&gt;
&lt;li&gt;NCrunch version 1.48.0.5&lt;/li&gt;
&lt;li&gt;FsCheck version 2.2.2&lt;/li&gt;
&lt;li&gt;FsCheck.NUnit version 2.2.2&lt;/li&gt;
&lt;li&gt;NUnit version 2.6.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;steps&#34;&gt;Steps&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open Visual Studio and create an F# Project&lt;/li&gt;
&lt;li&gt;Open the Nuget Package Manager following &lt;em&gt;TOOLS &amp;gt; Nuget Package Manager &amp;gt; Package Manager Console&lt;/em&gt; from the main menu and type

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Install-Package FsCheck&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Install-Package FsCheck.Nunit&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Comment out the content in &lt;strong&gt;FsCheckAddin.fs&lt;/strong&gt; file to allow &lt;a href=&#34;http://www.ncrunch.net/&#34;&gt;NCrunch&lt;/a&gt; to run the tests&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;    //[&amp;lt;NUnitAddin(Description = &amp;quot;FsCheck addin&amp;quot;)&amp;gt;] 
    //type FsCheckAddin() = 
    //  interface IAddin with 
    //      override x.Install host = 
    //          let tcBuilder = new FsCheckTestCaseBuilder() 
    //          host.GetExtensionPoint(&amp;quot;TestCaseBuilders&amp;quot;).Install(tcBuilder) 
    //          true 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In your test file add the following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;    module Properties = 
        
        open NUnit.Framework 
        open FsCheck
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add this test to enable &lt;a href=&#34;http://www.ncrunch.net/&#34;&gt;NCrunch&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;        //Needed to enable NCrunch 
        [&amp;lt;Ignore&amp;gt;][&amp;lt;Test&amp;gt;] 
        let ignoreMe() = () 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a static class whose methods are the properties you want to test. For this example I&amp;rsquo;ll test an incorrect implementation of a list - &lt;strong&gt;the reverse of a list is always equal to the original&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;        type ListProperties =     
            // Note: should fail     
            static member reverseIsAsTheOriginal (xs:int list) =          
                List.rev xs = xs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following test to verify the property defined in the &lt;code&gt;ListProperties&lt;/code&gt; type&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;        [&amp;lt;Test&amp;gt;] 
        let verifyAll () =      
            Check.QuickThrowOnFailureAll&amp;lt;ListProperties&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable &lt;a href=&#34;http://www.ncrunch.net/&#34;&gt;NCrunch&lt;/a&gt; following &lt;em&gt;NCRUNCH &amp;gt; Enable NCrunch&lt;/em&gt; from the main menu and let the engine catch the error&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If everything is in place you should see the visual error for the feedback
&lt;center&gt;&lt;img class=&#34;img-responsive&#34; class=&#34;img-responsive&#34; src=&#34;http://codurance.com/assets/img/custom/blog/2015-11-25-Property-based-testing/NCrunch-visual-feed-back-error.png&#34;&gt;&lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run All Tests in the Resharper Runner to check the output
&lt;center&gt;&lt;img class=&#34;img-responsive&#34; src=&#34;http://codurance.com/assets/img/custom/blog/2015-11-25-Property-based-testing/Resharper-tests-run-error.png&#34;&gt;&lt;/center&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You should read a message similar to&lt;/p&gt;

&lt;p&gt;~~~console
&amp;mdash; Checking ListProperties &amp;mdash;
System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.
  &amp;mdash;-&amp;gt; System.Exception : ListProperties.ReverseOfReverseIsAsTheOriginal-Falsifiable, after 6 tests (3 shrinks) (StdGen (1165808905,296086422)):
Original:
[-1; 2; -2]
Shrunk:
    [1; 0]
~~&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This shows that the property was falsifiable (as expected) but let&amp;rsquo;s try to gather more informations to address the issue&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change the test so that it provides a verbose output when failing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;        [&amp;lt;Test&amp;gt;] 
        let verifyAll () = 
            Check.VerboseThrowOnFailureAll&amp;lt;ListProperties&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Re-run the tests through Resharper Runner and read the output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;    --- Checking ListProperties ---
    0:
    [-2]
    1:
    [-2; -2]
    2:
    []
    3:
    [1; 1]
    4:
    [-2]
    5:
    [-3; 1; 5; -3; 6; 2; 6; -2]
    shrink:
    [1; 5; -3; 6; 2; 6; -2]
    shrink:
    [5; -3; 6; 2; 6; -2]
    shrink:
    [-3; 6; 2; 6; -2]
    shrink:
    [6; 2; 6; -2]
    shrink:
    [2; 6; -2]
    shrink:
    [6; -2]
    shrink:
    [6; 2]
    shrink:
    [6; 0]
    shrink:
    [3; 0]
    shrink:
    [2; 0]
    shrink:
    [1; 0]
    System.Reflection.TargetInvocationException : Exception has been thrown by the target of an invocation.
      ----&amp;gt; System.Exception : ListProperties.ReverseOfReverseIsAsTheOriginal-Falsifiable, after 6 tests (11 shrinks) (StdGen (1681135586,296086423)):
    Original:
    [-3; 1; 5; -3; 6; 2; 6; -2]
    Shrunk:
    [1; 0]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The output shows the &amp;ldquo;shrinking process&amp;rdquo; from the sixth input (identified by 5:) original value &lt;code&gt;[-3; 1; 5; -3; 6; 2; 6; -2]&lt;/code&gt; to the  &amp;ldquo;shrunk&amp;rdquo; (reduced) input &lt;code&gt;[1; 0]&lt;/code&gt; that still falsifies (makes it fail) the property&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s correct the property as &lt;strong&gt;the reverse of the reverse of a list is equal to the original&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;        type ListProperties =
            static member ReverseOfReverseIsAsTheOriginal (xs:int list) = 
                List.rev (List.rev xs) = xs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Re-run the tests that should be all green by now and read the output. You&amp;rsquo;ll notice it&amp;rsquo;s very verbose as expected and shows all the inputs used to verify the property.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;You are now ready to experiment with &lt;a href=&#34;http://fscheck.github.io/FsCheck/index.html&#34;&gt;FsCheck&lt;/a&gt;!
&lt;a href=&#34;https://twitter.com/Parajao&#34;&gt;Let me know&lt;/a&gt; what is your experience with property based testing in F#.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fscheck.github.io/FsCheck/index.html&#34;&gt;FsCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ncrunch.net/&#34;&gt;NCrunch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.eecs.northwestern.edu/~robby/courses/395-495-2009-fall/quick.pdf&#34;&gt;QuickCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.packtpub.com/application-development/testing-f&#34;&gt;Testing FSharp&lt;/a&gt; Chapter 11&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creating a local NuGet repository for offline development</title>
      <link>http://codurance.com/blog/creating-a-local-nuget-repository/</link>
      <pubDate>Fri, 01 May 2015 10:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/creating-a-local-nuget-repository/</guid>
      <description>&lt;p&gt;I spend several hours each week on long-distance train journeys and often use the time to code, whether on a pet project or practising a kata or two. Large parts of this journey have patchy-at-best mobile data coverage, so tools with a reliance on a stable internet connection can cause problems. One of these tools is the NuGet Package Manager in Visual Studio.&lt;/p&gt;

&lt;p&gt;In the most simple cases, where a solution just needs a reference to a single DLL, local copies are an adequate solution. However, that is not always sufficient as some of the libraries I want to use are vastly more complex with extended dependency chains. I was really beginning to miss NuGet while working offline, so I decided to set up my own offline local NuGet repository. It is a surprisingly simple operation, yet I had to do quite a bit of hunting around to find all the steps I needed to perform and failed to find a them all listed in a single article. So here goes…&lt;/p&gt;

&lt;p&gt;Firstly, you’ll need to create a local folder to house all your local NuGet packages. I created a folder called &lt;em&gt;‘LocalNugetRepository’&lt;/em&gt; within the &lt;em&gt;Documents\Visual Studio 2013&lt;/em&gt; folder, but you can call it whatever you like and place it anywhere you have sufficient privileges:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2015-05-01-creating-a-local-nuget-repository/local-folder.png&#34; alt=&#34;Local repository folder&#34; title=&#34;Local repository folder&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;The next step is to download the NuGet packages you wish to be able to use offline into this folder. Packages can be downloaded from &lt;a href=&#34;http://www.nuget.org&#34;&gt;nuget.org&lt;/a&gt;. Importantly, you must be logged in to this site to be able to download packages, so go ahead and log in, or register for a new account if you don’t already have one.&lt;/p&gt;

&lt;p&gt;Once you are logged in, search for the packages you require and click the &lt;em&gt;‘Download’&lt;/em&gt; link in the left hand menu of each (highlighted below). &lt;strong&gt;This link will not be present in the menu if you are not logged in:&lt;/strong&gt;&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2015-05-01-creating-a-local-nuget-repository/nuget-download.png&#34; alt=&#34;Downloading packages from nuget.org&#34; title=&#34;Downloading packages from nuget.org&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Once you have successfully downloaded the &lt;em&gt;.nupkg&lt;/em&gt; files you require into your local repository folder, head into Visual Studio and open the NuGet Settings dialog via &lt;em&gt;Tools &amp;gt; NuGet Package Manager &amp;gt; Package Manager Settings&lt;/em&gt;. Click the Package Sources tab within the settings dialog, followed by the ‘plus’ icon in the top left to add a new package source:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2015-05-01-creating-a-local-nuget-repository/nuget-settings.png&#34; alt=&#34;Adding a local package source&#34; title=&#34;Adding a local package source&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Enter the Name and Source of your local repository. The name can be any string and will be the name displayed in the NuGet Package Manager within Visual Studio.&lt;/p&gt;

&lt;p&gt;Now that you have added the local package source, you will be able to use your offline local repository from within Visual Studio in the usual way, either via the Console or via the Package Dialog, by selecting it from the &lt;em&gt;Package Source&lt;/em&gt; menu, without the need for an active internet connection:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2015-05-01-creating-a-local-nuget-repository/package-manager.png&#34; alt=&#34;Using the new local package source&#34; title=&#34;Using the new local package source&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;It is worth noting here that if you downloaded any pre-release packages from &lt;a href=&#34;http://www.nuget.org&#34;&gt;nuget.org&lt;/a&gt; into your local repository they will not be displayed by default within either the Package Manager Console or GUI dialog. This is by design, however it can be overridden in the Package Manager Console through the use of the &lt;code&gt;-IncludePrerelease&lt;/code&gt; flag. For more information, see the &lt;a href=&#34;https://docs.nuget.org/create/versioning#installing-prerelease-packages&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple projects in Visual Studio solutions considered harmful</title>
      <link>http://codurance.com/blog/visual-studio-projects/</link>
      <pubDate>Mon, 23 Mar 2015 22:49:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/visual-studio-projects/</guid>
      <description>

&lt;h1 id=&#34;multiple-projects-in-visual-studio-solutions-considered-harmful&#34;&gt;Multiple projects in Visual Studio solutions considered harmful&lt;/h1&gt;

&lt;p&gt;I agree with &lt;a href=&#34;https://lostechies.com/chadmyers/author/chadmyers/&#34;&gt;Chad Myers&lt;/a&gt; when he defines a common project anti-pattern &lt;a href=&#34;https://lostechies.com/chadmyers/2008/07/16/project-anti-pattern-many-projects-in-a-visual-studio-solution-file/&#34;&gt;“Many projects in a Visual Studio Solution”&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;fast-feedback-loop&#34;&gt;Fast feedback loop&lt;/h2&gt;

&lt;p&gt;Too many projects increase both the load and build time of your solution. Also a solution will take longer to start executing in debug due the overhead of loading/resolving multiple assemblies with associated PDB’s and symbols. This has an impact on the fast feedback loop we should strive to achieve. When I write code I want feedback as fast as possible. This includes compiling, and executing tests. Solutions with multiple projects affect the fast feedback loop.&lt;/p&gt;

&lt;h2 id=&#34;logical-boundary-physical-boundary&#34;&gt;Logical boundary != Physical boundary&lt;/h2&gt;

&lt;p&gt;An assembly is a unit of deployment in .Net. A Visual Studio project has a 1 on 1 relation with an assembly. We should have boundaries in our solutions, but we should not confuse logical boundaries with physical boundaries. A project in Visual Studio creates a physical boundary; this is often needed, but also open to abuse. Physical boundaries are all about deployment and versioning. If you are not deploying and versioning a part of your code independently, there is no reason to create a physical boundary. Multiple layers != multiple assemblies.&lt;/p&gt;

&lt;h2 id=&#34;dependency-management&#34;&gt;Dependency management&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t want to reference System.Web across all code, so I create a separate assembly where I &amp;ldquo;isolate&amp;rdquo; the code that depends on that assembly. When I hear this argument, most of the time it equates to distrust among team members. Or, I don&amp;rsquo;t trust other developers, so to avoid them referencing System.Web on business classes, I segregate them in another project that does not reference System.Web. Can you hear yourself? There may be a compelling reason to isolate a dependency in a separate assembly, but the reason should not be: to avoid other developers making a mess.&lt;/p&gt;

&lt;h2 id=&#34;how-do-i-do-it&#34;&gt;How do I do it?&lt;/h2&gt;

&lt;p&gt;My solutions start with two projects one for production code and one for tests. The question to ask before creating a project is: Do I need to deploy and version this part of the code independently? Only if the answer is yes do I create a new project.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This subject has been discussed in the community for a long time but I still don’t see any change. I’m continuously faced with solutions with dozens even hundreds of projects. In fact I would say this is the norm, unfortunately. I still see shocked faces, when I propose rearranging a solution using folders and namespaces instead of projects. So I’m adding my voice to other voices.&lt;/p&gt;

&lt;p&gt;Some authors propose a number between 15-20 maximum projects in a Visual Studio Solution to be a good compromise. I disagree; my proposal is one for production code and a separate project for tests. Adding any other project to a solution should be considered very carefully.&lt;/p&gt;

&lt;p&gt;Thanks to Tom Male and Eric Li Koo for reading drafts of this.&lt;/p&gt;

&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://ayende.com/blog/3158/the-two-project-solution&#34;&gt;http://ayende.com/blog/3158/the-two-project-solution&lt;/a&gt;
&lt;a href=&#34;http://geekswithblogs.net/FrostRed/archive/2008/10/03/125628.aspx&#34;&gt;http://geekswithblogs.net/FrostRed/archive/2008/10/03/125628.aspx&lt;/a&gt;
&lt;a href=&#34;http://codebetter.com/jeremymiller/2008/09/30/separate-assemblies-loose-coupling/&#34;&gt;http://codebetter.com/jeremymiller/2008/09/30/separate-assemblies-loose-coupling/&lt;/a&gt;
&lt;a href=&#34;http://www.hanselman.com/blog/AssemblyFiefdomsWhatsTheRightNumberOfAssembliesLibraries.aspx&#34;&gt;http://www.hanselman.com/blog/AssemblyFiefdomsWhatsTheRightNumberOfAssembliesLibraries.aspx &lt;/a&gt;
&lt;a href=&#34;https://lostechies.com/chadmyers/2008/07/16/project-anti-pattern-many-projects-in-a-visual-studio-solution-file/&#34;&gt;https://lostechies.com/chadmyers/2008/07/16/project-anti-pattern-many-projects-in-a-visual-studio-solution-file/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>