<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oop on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/oop/</link>
    <description>Recent content in Oop on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 06 May 2016 00:20:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/oop/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Language feature envy</title>
      <link>http://codurance.com/blog/language-feature-envy/</link>
      <pubDate>Fri, 06 May 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/language-feature-envy/</guid>
      <description>

&lt;p&gt;In my day job I mainly write C# code. On my own I like to try other languages like Swift, F#, Clojure, Objective C or Java. I learn a lot from writing code in different languages. When I go back to C# I often miss some of the features C# does not have. By far what I miss the most is Java/Swift enums. It happens quite frequently that I need to express a few finite number of instances of a type. The &lt;a href=&#34;http://snipplr.com/view/42422/the-planet-enum-example/&#34;&gt;Java planets&lt;/a&gt; example illustrates this quite effectively.&lt;/p&gt;

&lt;p&gt;Recently I was porting a music library I wrote in Swift &lt;a href=&#34;https://github.com/pedromsantos/Ellis&#34;&gt;Ellis&lt;/a&gt; to C#. In music there are only 12 notes so using a class to express a musical note feels wrong. Using a enum in C# would be the correct choice&amp;hellip; If I could only add behaviour to enums in C#. Here is an excerpt of the Note enum in Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public enum Note: Int
{
    case C = 0
    case CSharp
    case DFlat
    case D
    case DSharp
    case EFlat
    ...

    public func sharp() -&amp;gt; Note
    {
        ...
    }

    public func flat() -&amp;gt; Note
    {
        ...
    }

    public func intervalWithNote(other: Note) -&amp;gt; Interval
    {
        ...
    }

    public func measureAbsoluteSemitones(other: Note) -&amp;gt; Int
    {
        ...
    }

    public func transpose(transposingInterval: Interval) -&amp;gt; Note
    {
      ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that besides being able to define a finite number of instances I&amp;rsquo;m also able to add behaviour to my enum.&lt;/p&gt;

&lt;p&gt;In C# we are stuck with using something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class Note
{
    public static readonly Note C = new Note(Pitch.C, &amp;quot;C&amp;quot;, Accident.None, MinNoteIndex);
    public static readonly Note CSharp = new Note(Pitch.CSharp, &amp;quot;C#&amp;quot;, Accident.Sharp, 1);
    public static readonly Note DFlat = new Note(Pitch.DFlat, &amp;quot;Db&amp;quot;, Accident.Flat, 2);
    public static readonly Note D = new Note(Pitch.D, &amp;quot;D&amp;quot;, Accident.None, 3);
    public static readonly Note DSharp = new Note(Pitch.DSharp, &amp;quot;D#&amp;quot;, Accident.Sharp, 4);
    public static readonly Note EFlat = new Note(Pitch.EFlat, &amp;quot;Eb&amp;quot;, Accident.Flat, 5);
    public static readonly Note E = Note(Pitch.E, &amp;quot;E&amp;quot;, Accident.None, 6);
    public static readonly Note F = new Note(Pitch.F, &amp;quot;F&amp;quot;, Accident.None, 7);
    public static readonly Note FSharp = new Note(Pitch.FSharp, &amp;quot;F#&amp;quot;, Accident.Sharp, 8);
    ...

    private Note(Pitch pitch, string name, Accident accident, int index)
    {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s not too bad, but not exactly the same as in Java or Swift.&lt;/p&gt;

&lt;p&gt;There is a feature in Java enums that I still miss for my note implementation in C#, the ordinal method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final int ordinal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This according to the Java documentation &amp;ldquo;Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero)&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If I want to emulate this behaviour in C# I can do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public static IEnumerable&amp;lt;Note&amp;gt; Notes
{
    get
    {
        yield return C;
        yield return CSharp;
        yield return DFlat;
        yield return D;
        yield return DSharp;
        yield return EFlat;
        yield return E;
        yield return F;
        yield return FSharp;
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can access Note instances using an indexer with code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Note.Notes.ElementAt(indexForNote);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again not ideal but not terrible either. But notice that we are adding up workarounds, all small but it adds up.&lt;/p&gt;

&lt;p&gt;We are getting close to emulate Java/Swift enums in C#. The next step is to emulate the &amp;ldquo;singleton&amp;rdquo; aspect of each instance of the enum. In the current implementation the following line is false in C#:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Note.C == Note.C;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we need is for each instance to be ever unique, AKA the &amp;ldquo;dreadful&amp;rdquo; singleton. This allows us to compare instances without overriding equals and saves us from having potentially thousands of instances representing the same value. After a bit off head scratching I remembered about the Lazy&lt;t&gt; type. That led me to try it in my note implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class Note
{
	public static readonly Note C = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.C, &amp;quot;C&amp;quot;, Accident.None, 0)).Value;
	public static readonly Note CSharp = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.CSharp, &amp;quot;C#&amp;quot;, Accident.Sharp, 1)).Value;
	public static readonly Note DFlat = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.DFlat, &amp;quot;Db&amp;quot;, Accident.Flat, 2)).Value;
	public static readonly Note D = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.D, &amp;quot;D&amp;quot;, Accident.None, 3)).Value;
	public static readonly Note DSharp = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.DSharp, &amp;quot;D#&amp;quot;, Accident.Sharp, 4)).Value;
	public static readonly Note EFlat = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.EFlat, &amp;quot;Eb&amp;quot;, Accident.Flat, 5)).Value;
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success the following expression is now true:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Note.C == Note.C;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to look at the complete implementation itâ€™s on my GitHub &lt;a href=&#34;https://github.com/pedromsantos/Jaco/blob/master/Jaco/Notes/Note.cs&#34;&gt;Jaco.Notes.Note&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;faq&#34;&gt;FAQ:&lt;/h3&gt;

&lt;p&gt;Why don&amp;rsquo;t you create a proposal to have this implemented in C#?&lt;/p&gt;

&lt;p&gt;Nothing is ever original, others have explored that route already.&lt;/p&gt;

&lt;p&gt;Jon Skeet blogged about this in 2006:
&lt;a href=&#34;https://codeblog.jonskeet.uk/2006/01/05/classenum/#comments&#34;&gt;https://codeblog.jonskeet.uk/2006/01/05/classenum/#comments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of discussions on Roslyn GitHub:
&lt;a href=&#34;https://github.com/dotnet/roslyn/issues/6739&#34;&gt;https://github.com/dotnet/roslyn/issues/6739&lt;/a&gt;
&lt;a href=&#34;https://github.com/dotnet/roslyn/issues/3704&#34;&gt;https://github.com/dotnet/roslyn/issues/3704&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only problem is this patent may prevent other languages from having the same behaviour Java has on enums:
&lt;a href=&#34;https://www.google.com/patents/US7263687&#34;&gt;https://www.google.com/patents/US7263687&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Akka basics</title>
      <link>http://codurance.com/blog/Akka-basics/</link>
      <pubDate>Sat, 30 Apr 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/Akka-basics/</guid>
      <description>

&lt;p&gt;As &lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients&#34;&gt;the previous post&lt;/a&gt; explained our system is based on &lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt;. Before going into more detail about our solution, I&amp;rsquo;d like to explain what Akka is about and why it is so awesome.&lt;/p&gt;

&lt;p&gt;Akka is a toolkit and not a framework, you can simply use the bits that you need for your service. In this series we&amp;rsquo;ll focus on the core features and we won&amp;rsquo;t go through &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/scala/stream/index.html&#34;&gt;Akka Streams&lt;/a&gt;, &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/scala/http/index.html&#34;&gt;Akka-Http&lt;/a&gt; or &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/common/cluster.html&#34;&gt;Akka Cluster&lt;/a&gt; (since they&amp;rsquo;re out of scope, not because they&amp;rsquo;re not fantastic).&lt;/p&gt;

&lt;p&gt;Akka provides a different abstraction to deal with concurrency, paralellism and fault-tolerance. That abstraction is called Actor Model. If you have experience with the old Java ecosystem you will know how hard it is to &lt;a href=&#34;http://codurance.com/2015/12/13/testing-multithreaded-code-in-java/&#34;&gt;write safe and correct multithreaded code&lt;/a&gt;. Providing human-friendly abstractions like Actors is a revolution comparable to Java&amp;rsquo;s memory management at the time of introduction. New challenges derived from internet scale and cloud computing requires a reactive approach to programming. Akka aligns with that philosophy and enables you to implement &lt;a href=&#34;https://www.wikiwand.com/en/Event-driven_architecture&#34;&gt;Event-driven architectures&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;actors-all-the-way&#34;&gt;Actors all the way&lt;/h2&gt;

&lt;p&gt;Threads are an expensive resource, hence we need to use them judiciously. Blocking threads while we&amp;rsquo;re waiting for some I/O operation to respond is really inefficient. Actors use threads in a different way, as a result of which they&amp;rsquo;re pretty lightweight (&lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/intro/what-is-akka.html&#34;&gt;several million actors per GB of heap memory&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Actors are a good blend of Object Oriented and Functional Programming principles. OOP is basically about messages as Alan Kay, one of the pioneers of OOP, &lt;a href=&#34;http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html&#34;&gt;stated&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m sorry that I long ago coined the term &amp;ldquo;objects&amp;rdquo; for this topic because it gets many people to focus on the lesser idea. The big idea is &amp;ldquo;messaging&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An actor exchanges immutable messages and keeps their own encapsulated state: every interaction needs to be done through messages.&lt;/p&gt;

&lt;h2 id=&#34;fault-tolerance&#34;&gt;Fault tolerance&lt;/h2&gt;

&lt;p&gt;There is not a clear and shared error handling model in Java, and you can realise that after working in a couple of projects. The origin of that is a confusing abstraction called Exception and its subtypes Checked and Unchecked Exceptions. The only real difference is that checked exceptions force us to deal with the issue in the direct caller, except for that they don&amp;rsquo;t hint at the strategy that we should apply.&lt;/p&gt;

&lt;p&gt;I strongly recommend &lt;a href=&#34;http://joeduffyblog.com/2016/02/07/the-error-model/&#34;&gt;this&lt;/a&gt; post about it. One such powerful idea in the post is that bugs aren&amp;rsquo;t recoverable errors. This quote is contained in that post, &lt;a href=&#34;https://wiki.haskell.org/Error_vs._Exception&#34;&gt;original source&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was involved in the development of a library that was written in C++. One of the developers told me that the developers are divided into the ones who like exceptions and the other ones who prefer return codes. As it seems to me, the friends of return codes won. However, I got the impression that they debated on the wrong point: Exceptions and return codes are equally expressive, they should however not be used to describe errors. Actually the return codes contained definitions like &lt;code&gt;ARRAY_INDEX_OUT_OF_RANGE&lt;/code&gt;. But I wondered: How shall my function react, when it gets this return code from a subroutine? Shall it send a mail to its programmer? It could return this code to its caller in turn, but it will also not know how to cope with it. Even worse, since I cannot make assumptions about the implementation of a function, I have to expect an &lt;code&gt;ARRAY_INDEX_OUT_OF_RANGE&lt;/code&gt; from every subroutine. My conclusion is that &lt;code&gt;ARRAY_INDEX_OUT_OF_RANGE&lt;/code&gt; is a (programming) error. It cannot be handled or fixed at runtime, it can only be fixed by its developer. Thus there should be no according return code, but instead there should be asserts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Akka provides a great way for dealing with failures/errors based on these tenets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Single responsibility principle: failure management is delegated to supervisors, creating focused business actors. We agreed some time ago that lifecycle management, e.g. object creation, should be moved to factories, therefore an object is not responsible for creating itself. Resuming or restarting an object, after some failure happened, is part of that lifecycle management and Akka enforces you to move that responsibility to supervisors. The resulting code will be loosely coupled and highly cohesive.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Default recovery strategies: it&amp;rsquo;s important to understand which are our options after the system is under some failure condition. Is the DB temporarily down? Has some input, in combination with the existing data, created an undesired state? Is that a bug? Do we need to abandon that particular request or that part of the system is messed up until some patch is applied? Those questions will determine our response to that incident, and Akka provides some &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/scala/fault-tolerance.html#fault-tolerance-scala&#34;&gt;built-in strategies&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;override val supervisorStrategy =
  OneForOneStrategy(maxNrOfRetries = 10, withinTimeRange = 1 minute) {
    case _: ArithmeticException      =&amp;gt; Resume
    case _: NullPointerException     =&amp;gt; Restart
    case _: IllegalArgumentException =&amp;gt; Stop
    case _: Exception                =&amp;gt; Escalate
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Failure as first class citizen: some libraries or ecosystems hide failures through obscure APIs. Akka is usually deployed in distributed environments, therefore using unreliable resources like networks. That forces us to bring failure to the front. Even in &amp;lsquo;safer&amp;rsquo; environments as monoliths, failures are all around, so using toolkits like Akka is critical to create reliable and robust software.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;concurrency-and-parallelism&#34;&gt;Concurrency and parallelism&lt;/h2&gt;

&lt;p&gt;With Akka we&amp;rsquo;re not going to deal directly with threads, they&amp;rsquo;re hidden under an abstraction layer. The backbone of an Akka app is the &lt;a href=&#34;http://doc.akka.io/api/akka/2.0/akka/actor/ActorSystem.html&#34;&gt;Actor System&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An actor system is a hierarchical group of actors which share common configuration, e.g. dispatchers, deployments, remote capabilities and addresses. It is also the entry point for creating or looking up actors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Dispatcher is also an Execution Context, so in the end it is where the thread pool is located. Let&amp;rsquo;s assume that your app uses a single dispatcher with 4 threads allocated. As you can see threads are a scarce resource, if we do blocking I/O or heavy CPU work in some of the actors we&amp;rsquo;ll use exclusively one of the threads, and you can see how quickly your service will run out of threads.&lt;/p&gt;

&lt;p&gt;The solution is wrapping those operation with constructs like Scala Futures and then provide a different execution context for those tasks.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Akka is a fantastic toolkit full of well suited abstractions for modern problems. In the next post we&amp;rsquo;ll see with the help of some code how to coordinate and supervise actors with the constraints of our example application.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&#34;&gt;Part 1&lt;/a&gt; | &lt;a href=&#34;http://codurance.com/2016/04/30/akka-basics/&#34;&gt;Part 2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>