<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Agile on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/agile/</link>
    <description>Recent content in Agile on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 14 May 2016 00:20:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/agile/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Retrospective in the Park</title>
      <link>http://codurance.com/blog/retrospective-park/</link>
      <pubDate>Sat, 14 May 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/retrospective-park/</guid>
      <description>

&lt;p&gt;The other day, I facilitated a sprint retrospective in the park. The sun was shining, and we had all been working hard to complete our backlog, so it felt like a nice reward for everyone’s efforts. Holding a retrospective outdoors can also give it an energy and sense of enthusiasm that is harder to find in a small room.&lt;/p&gt;

&lt;p&gt;I’ve run outdoor retrospectives before, and have previously followed fairly classic plans, with much arranging of index cards. This has never been a great success, as the slightest breath of a breeze can make a mess of your planning. For this retrospective, I designed a plan to avoid these problems, drawing some ideas from the &lt;a href=&#34;http://retrospectivewiki.org/index.php?title=Appreciative_Retrospective&#34;&gt;Appreciative Retrospective&lt;/a&gt; plan.&lt;/p&gt;

&lt;p&gt;This retrospective took an hour for a team of nine. You’ll need a pile of index cards or sticky notes, and a pen per person. Here’s how to do it:&lt;/p&gt;

&lt;h2 id=&#34;1-choose-your-location&#34;&gt;1. Choose your location&lt;/h2&gt;

&lt;p&gt;Some people are sun lovers, whilst others, like me, burn easily and need some shade, so find a location that will work for everyone. Don&amp;rsquo;t worry too much about the state of the grass, as I suggest you conduct the retrospective standing up, if possible.&lt;/p&gt;

&lt;p&gt;Get everyone to stand in a circle, with enough personal space for everyone, but close enough that you can hear everyone speak.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: It&amp;rsquo;s nice if you can find a location where there won&amp;rsquo;t be too many distractions. We weren&amp;rsquo;t entirely successful: there was a hen party in another corner of the park, whose popping of prosecco corks and parading of an anatomically exaggerated blow-up mannequin was hard to ignore; there was also a group of male models sunning themselves noisily behind us (I’m working at a fashion company, so this is less unusual than it may sound), and three young women were smoking some &lt;em&gt;interesting&lt;/em&gt; cigarettes upwind of us. Nonetheless, our retrospective was a success despite occasional distractions.&lt;/p&gt;

&lt;h2 id=&#34;2-characterise-the-sprint&#34;&gt;2. Characterise the sprint&lt;/h2&gt;

&lt;p&gt;Ask everyone to spend a couple of minutes coming up with three words to characterise the sprint; then go clockwise round the circle and ask each person to tell the team their three words.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: It&amp;rsquo;s surprising how much difficulty people have sticking to three words; the important focus of this task is not the three-word limit, but getting a concise summary of the sprint.&lt;/p&gt;

&lt;h2 id=&#34;3-thank-your-neighbour&#34;&gt;3. Thank your neighbour&lt;/h2&gt;

&lt;p&gt;Moving anticlockwise around the team, ask each team member to thank their neighbour for something they have done during this sprint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: Our Scrum Master broke the rules by thanking the whole team for their efforts. The focus of this task is to generate a positive mood across the team, and it&amp;rsquo;s important that no one misses out on individual thanks, so I asked him to thank his neighbour for something as well.&lt;/p&gt;

&lt;h2 id=&#34;4-describe-what-went-well&#34;&gt;4. Describe what went well&lt;/h2&gt;

&lt;p&gt;Hand each person three cards, and give them three minutes to write down three things that went well during the sprint. Going clockwise round the circle from a different starting point, ask each person to read out their three successes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: It&amp;rsquo;s useful for the facilitator to observe and comment on common themes, as this can help reinforce good practice.&lt;/p&gt;

&lt;h2 id=&#34;5-describe-what-could-improve&#34;&gt;5. Describe what could improve&lt;/h2&gt;

&lt;p&gt;Hand each person three more cards, and give them another three minutes to write down three things that could have gone even better during the sprint. Then go anticlockwise round the circle and ask each person to read out their three improvements.&lt;/p&gt;

&lt;h2 id=&#34;6-group-the-improvements&#34;&gt;6. Group the improvements&lt;/h2&gt;

&lt;p&gt;Instead of arranging the cards on a whiteboard (which isn&amp;rsquo;t practical in the park), appoint a champion for each improvement. Ask the first person to choose one of the improvements they suggested, and then get everyone else to hand this person any cards that describe a similar improvement. Keep running round the team until each team member has just one group of cards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: There&amp;rsquo;s a chance that you&amp;rsquo;ll end up with more themes than team members, in which case you&amp;rsquo;ll have to make a decision to drop some of these themes; in our case we had fewer common themes than team members, so we didn&amp;rsquo;t have to do this.&lt;/p&gt;

&lt;h2 id=&#34;7-select-and-discuss-the-most-common-themes&#34;&gt;7. Select and discuss the most common themes&lt;/h2&gt;

&lt;p&gt;Rather than dot-voting, which again is impractical in the park, select the commonest themes. Ask everyone with any cards to take a step into the circle. Then ask everyone with just one card to take a step out again; then everyone with just two cards; then three, and so on until just three people are left in the inner circle.&lt;/p&gt;

&lt;p&gt;Then have a three-minute discussion of each of these suggested improvements, with the focus of identifying at least one action per theme for the next sprint. Ensure someone is assigned to each action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: We ran slightly over the three minutes assigned to each theme, but this wasn&amp;rsquo;t a problem; if we hadn&amp;rsquo;t had a time limit, I suspect the conversation would have been much less focused.&lt;/p&gt;

&lt;h2 id=&#34;8-round-off-the-retrospective&#34;&gt;8. Round off the retrospective&lt;/h2&gt;

&lt;p&gt;Finally, going round the circle clockwise, ask everyone to describe how they felt about the retrospective itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: The feedback was very positive. The team had clearly enjoyed the opportunity to get out of the office, and they felt that the session had been successful: everyone was engaged and we came up with some good actions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Big Data Skills Spectrum</title>
      <link>http://codurance.com/blog/big-data-skills-spectrum/</link>
      <pubDate>Sat, 13 Jun 2015 19:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/big-data-skills-spectrum/</guid>
      <description>

&lt;p&gt;Big Data has been a hype for many years. I’ve seen a few “Big Data” projects start in the past with a lot of fanfare and promise.The promise has always been that “we will start getting a holistic picture of our departmental silos and gain numerous insights from our data that will help us get ahead of our competitors”. The promise was rarely, if ever, fulfilled and the “Big Data” team slowly faded into the rest of the melting pot that we call the “IT department” in most large enterprises.&lt;/p&gt;

&lt;p&gt;Part of the problem is how we build these Big Data teams. The technology and expertise in these teams have been primarily Java / C# developers, Relational DBAs, some Business Objects type skills (essentially basic reporting), ETL primarily using SQL and Stored Procedures. Recently I’ve seen use of less traditional databases, such as Mark Logic with XQuery, taking the place of SQL as well as compute grids and data grids like Gigaspaces and Gemfire. In all of these cases the solutions or the skills in the team were not aligned with the aspiration of the business.&lt;/p&gt;

&lt;p&gt;Recently we have had the chance to build a Big Data team for one of our clients. We know we have very large quantities of data to deal with. Some of the processing can happen in batch but other aspects needs to happen in real-time. We have a few ideas for the kind of insights that we are looking for but also know that mostly we don’t know what kind of insights the data can provide and how it will help us drive better features for our customers.&lt;/p&gt;

&lt;p&gt;We are lucky that the Big Data space has matured in the past few years. From technology point of view certain leaders have emerged. Hadoop and Cassandra have been around for a while. We have Kafka for highly scalable events processing, we have Spark, Storm, Scalding etc. for ETL and machine style jobs. Machine Learning libraries are maturing, languages such as R are gaining wider adoption, and Data Science is emerging as a bonafide profession.&lt;/p&gt;

&lt;h2 id=&#34;team-skills-spectrum&#34;&gt;Team Skills Spectrum&lt;/h2&gt;

&lt;p&gt;Creating a modern Big Data team requires a spectrum of skills:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/big-data-spectrum.jpg&#34; alt=&#34;Skills Spectrum&#34; title=&#34;Skills Spectrum&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h3 id=&#34;fine-tuning&#34;&gt;Fine Tuning&lt;/h3&gt;

&lt;p&gt;Big Data, if you truly have big data, requires a scalable solution. Solutions of this size, open source or commercial, will require some fine tuning with regards to performance, reliability, security, and maintainability. The way you use underlying technologies will need be sympathetic to how the technology works best. Fine Tuning happens throughout the lifecycle of your software and not just in production. You will require expertise in the technologies you are using. At least a subset of the team must have a working understanding in this area but that is not enough. It is advisable to have regular, not necessarily full-time, fine tuning expertise available in your team.&lt;/p&gt;

&lt;h3 id=&#34;data-modeling&#34;&gt;Data Modeling&lt;/h3&gt;

&lt;p&gt;Good Data Modelling is a dying skill in my experience but not any less important. In fact with Big Data this skill is more and more relevant. How you model data from different perspectives is paramount to its usefulness. This skill is essentially one of a good Business Analyst with an emphasis on data. The role also requires an innate understanding of the business. Modelling, visualising, adapting, and evolving data according to the business needs is a role in its own right and must not be overlooked.&lt;/p&gt;

&lt;h3 id=&#34;deployment-automation&#34;&gt;Deployment Automation&lt;/h3&gt;

&lt;p&gt;Big Data solutions are generally very complex and have many moving parts. Deployment Automation is absolutely necessary to keep control of these highly distributed environments. Environment provisioning and deployment automation will not only reduce the risk of things going wrong in production but also enable more comprehensive testing — both automated and exploratory.&lt;/p&gt;

&lt;h3 id=&#34;etl-development&#34;&gt;ETL Development&lt;/h3&gt;

&lt;p&gt;I call this ETL development for want of a better term. ETL in the traditional sense is only a part of this role. This is the software development part of your software. Some aspects will require more traditional Extract-Transform-Load of data, other aspects will require productionising of the Data Science algorithms. XP development practices such as TDD ad Continuous Integration are as applicable here as much as any other type of software development.&lt;/p&gt;

&lt;h3 id=&#34;practical-data-science&#34;&gt;Practical Data Science&lt;/h3&gt;

&lt;p&gt;These are ETL developers who have a good understanding of data mining and predictive analytics fields or Data Scientist who are also good developers. They may also have a good grasp of Data Modelling. An excellent grasp of both development and data science is quite rare however people who specialise in one but also have a good grasp of the other are not so rare.&lt;/p&gt;

&lt;h3 id=&#34;theoretical-data-science&#34;&gt;Theoretical Data Science&lt;/h3&gt;

&lt;p&gt;These are hardcore specialists who live and breath statistical modelling and Data Mining theory. Their job is come up with novel answers from the data which can then be productionised by the developers. It is very important that they are provided with suitable environments where they can experiment with different models using representative data. They are effectively the research and development end of the team.&lt;/p&gt;

&lt;h2 id=&#34;the-whole-team&#34;&gt;The whole Team&lt;/h2&gt;

&lt;p&gt;A well balanced team is as always made up of &lt;a href=&#34;https://en.wikipedia.org/wiki/T-shaped_skills&#34;&gt;T-Shaped&lt;/a&gt; skills where each team member contributes across disciplines with other experts in the team. Extreme Programing practices and Software Craftsmanship principles are as appropriate here as on any other software development team.&lt;/p&gt;

&lt;p&gt;It is very important to understand that a Big Data team has its own specialist spectrum of skills. Some of these skills are very different to the ones found in most general software development teams. Taking a general development team and calling them them “The Big Data team” will not bring the benefits of “Big Data” to your organisation. You will need to ensure that the spectrum of skills listed here are also part of that team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Q&amp;A about The Software Craftsman</title>
      <link>http://codurance.com/blog/interview-with-sandro-mancuso/</link>
      <pubDate>Wed, 06 May 2015 01:26:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/interview-with-sandro-mancuso/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Our co-founder &lt;a href=&#34;http://twitter.com/sandromancuso&#34;&gt;Sandro Mancuso&lt;/a&gt; was &lt;a href=&#34;http://www.infoq.com/articles/mancuso-software-craftsman&#34;&gt;interviewed by Ben Linders from InfoQ&lt;/a&gt;. Below is the full transcript.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the book &lt;a href=&#34;http://goo.gl/KgxKaw&#34;&gt;The Software Craftsman&lt;/a&gt;, Professionalism, Pragmatism, Pride Sandro Mancuso explores how craftmanship plays a role in agile software development. The book contains stories, examples and practical advice for software developers and other professionals involved in software projects to achieve technical excellence and customer satisfaction.&lt;/p&gt;

&lt;p&gt;InfoQ readers can download a &lt;a href=&#34;http://ptgmedia.pearsoncmg.com/images/9780134052502/samplepages/9780134052502.pdf&#34;&gt;sample of the book &amp;ldquo;The Software Craftsman&amp;rdquo;&lt;/a&gt; to get an impression of this book.&lt;/p&gt;

&lt;p&gt;InfoQ interviewed Mancuso about how companies can suffer from an agile hangover, why technical excellence matters and how to convince managers of that, productive partnerships, anti patterns in candidate interviews, creating a culture of learning and his practical approach to craftsmanship and doing technical practices.&lt;/p&gt;

&lt;h3 id=&#34;infoq-you-mentioned-that-with-agile-the-realization-that-the-team-as-a-whole-was-responsible-for-all-the-different-aspects-of-a-software-project-was-a-game-changer-can-you-elaborate-on-this&#34;&gt;InfoQ: You mentioned that with agile &amp;ldquo;the realization that the team as a whole was responsible for all the different aspects of a software project was a game changer&amp;rdquo;. Can you elaborate on this?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; Before we had silos and hierarchies. “Smart” people would define the requirements and design the system for a few months, if not years. They would then pass a pile of documents to the development team and tell them how much time the team would have to build the software. After all, it was just to type some code on the keyboard following the well-defined specifications. All the “thinking” had been done already. I guess we all know what happened to the vast majority of these projects.&lt;/p&gt;

&lt;p&gt;A software project is composed by many interdependent activities, ranging from a business idea to software available to be used. There are only three reasons to why software is built: make money, save money, or protect revenue. The more we delay to have software deployed to production, the more we delay to achieve one or more of these three things. If the end goal of a software project is to benefit from the value that the software will provide, anything that is done before the software goes live should be reduced to a minimum.&lt;/p&gt;

&lt;p&gt;Reducing waste is one of the main focuses of Lean and Agile and one way to achieve that is to shorten the feedback loop and improve communication. Instead of waiting for months (if not years) to have some software to show to clients and validate business ideas, we can have a team composed by business and developers that, together, constantly interacting with each other, can deliver small chunks of software very often. In some organisations, very often means multiple times a day.&lt;/p&gt;

&lt;p&gt;Having the whole team responsible for all the different aspects of a project reduces the feedback loop (ideas are quickly validated or invalidated) and can provide a much faster return on investment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-your-book-talks-about-how-companies-suffer-an-agile-hangover-what-do-you-mean-with-this&#34;&gt;InfoQ: Your book talks about how companies suffer an agile hangover. What do you mean with this?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; This is a term that &lt;a href=&#34;http://twitter.com/mashooq&#34;&gt;Mashooq Badar&lt;/a&gt; and I came up with a few years ago, almost as a joke. We were talking about companies that suddenly wake up, after a few years of Agile transformation, to realise that all those Post-Its on the wall and all the Agile coaches they hired really didn’t do much to increase the quality of their software and neither helped developers to get better. After a few years having fun in the “Post-It party”, some companies end up realising that the way they are developing software now is not really better than what it was before: they are not delivering software faster, they don’t have less bugs in production, they can’t go live as often as they wanted, they still have a QA phase at the end of each release, and there’s still no trust between business and developers. The Agile Hangover is the realisation that nothing (or at least, very little) was done to actually improve the quality of their software; it’s the realisation that in a software project the most important deliverable is the software itself and not the processes around it.&lt;/p&gt;

&lt;p&gt;Agile processes bring loads of benefits to organisations, where increasing visibility and reducing the feedback loop are the main ones. A small and quick feedback loop is what enables agility. However, if you only have an improvement in the process but still keep the same old developers working in the same old way when it comes to software development practices, being surprised that things are not better seems very naive to me. More and more we are seeing companies and managers complaining about Agile and saying that this Agile thing doesn’t work. Yes, that’s also one of the symptoms of the Agile Hangover.&lt;/p&gt;

&lt;p&gt;On a more positive note, Agile processes are helping companies to visualise their problems faster and putting them in a better position to fix their issues, which includes improving their technical capabilities. Companies that reach this stage of maturity (can visualise their issues and are willing to resolve them) are the ones that are in a better position to embrace Software Craftsmanship as a natural complement to their Agile adoption. It’s just a shame that some companies are taking far too long to realise that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-in-your-opinion-why-does-technical-excellence-matter-in-agile-how-does-it-make-a-difference&#34;&gt;InfoQ: In your opinion, why does technical excellence matter in agile? How does it make a difference?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; Agile was created to improve the way we deliver software. When we don’t focus on technical excellence, the quality of our software can drop to the point that it is very painful and slow to keep maintaining it. At this point, it doesn’t matter which Agile process you have because developers can’t go fast anymore, causing the company to loose its agility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-what-makes-it-so-difficult-to-convince-managers-that-technical-excellence-is-important-how-do-you-do-it&#34;&gt;InfoQ: What makes it so difficult to convince managers that technical excellence is important? How do you do it?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; There are good and bad managers. The good ones are the ones that keep themselves up-to-date with better ways of delivering a software project and also trust their teams to do the job. They are well informed, which makes conversations with the development team much easier. For the not so well informed managers, things are a bit more complicated because they don’t have enough knowledge to understand the seriousness of certain problems and the implications of certain decisions. I find Agile processes far more important when managers are not so well informed.&lt;/p&gt;

&lt;p&gt;As a first step to convince managers about technical excellence, I try a soft approach, with many conversations, explanations, and education. I also try to explain the value of certain practices when compared to the current approach. There are reasons why developers want to adopt certain technical practices or improve the system, and those reasons need to be expressed in a way that managers can understand. Let’s take TDD as an example. Instead of saying that we need more time to write tests, we need to say that we want to shorten our feedback loop when it comes to testing and deploying a new release into production. Let’s say we currently have a 2-week testing phase after a few weeks of development, done by a separate QA team. Wouldn’t it be nice to only push a button and be confident, in a matter of minutes, that our software is tested and good enough to go live? Wouldn’t it be great if we could press this button at anytime, as many times we want? That’s value for the business. Now let’s take continuous integration as another example. Wouldn’t it be nice if whenever a team member adds/changes some code, we could all be immediately that our system is still working and can be deployed into production? Wouldn’t be nice if we could impede that new code is created on top of buggy code, significantly reducing re-work and unnecessary maintenance? And what about pair-programming? Wouldn’t it be nice if we had absolutely no key-person dependency? If we never needed to wait for anyone to come back from holidays, or never be desperate because someone is leaving the company? Wouldn’t it be nice if everyone had a good level of understanding of all parts of the system? This is also value to the company. And what about keeping a constant velocity, regardless how old or big the system gets? Those are only a few of the benefits of focusing on technical excellence.&lt;/p&gt;

&lt;p&gt;However, we cannot ignore that certain practices may come with an initial cost and managers may refuse them because of that. In this case, I would ask them how much value our current practices are bringing when compared to the ones we are suggesting. How long is our current feedback loop? How many times in a year (or any other period of time) do we feel comfortable to go live with a new release? Are there any other practices out there that could make us better? These are the type of conversations I like to have with managers. It’s not about a specific technical practice, but about the value that a technical practice bring when compared to our current approach.&lt;/p&gt;

&lt;p&gt;Another thing I always push for is to make everything very visible: have a Scrum/Kanban board showing the team’s progress (or lack of it), have build radiators showing the health of our system, and also communicate every problem to the team (and manager) straightaway. There is a thing I’ve learned from Mashooq Badar: If you internalise a problem, it is your problem. If you communicate the problem to the rest of the team, it’s everyone’s problem. Making problems visible normally would force managers care about them, or at least help us to do our job in order to solve them. Ignoring problems that were clearly highlighted by the team may be very detrimental to a manager’s position and will force them to play a more active role in finding the solution. And in the event where nothing else is working I would escalate and also make sure that all our concerns are done in writing and sent to the appropriate people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-the-manifesto-for-craftsmanship-talks-about-productive-partnerships-can-you-explain-what-they-are-and-how-they-can-help-to-produce-better-software&#34;&gt;InfoQ: The manifesto for craftsmanship talks about productive partnerships. Can you explain what they are, and how they can help to produce better software?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; A career of a software craftsman goes way beyond any project or company. However, every craftsman wants to build a career on top of successful projects—projects they are proud of. Every time a craftsman joins a project, he or she are putting their career and reputations on the line.&lt;/p&gt;

&lt;p&gt;In order to build a successful career and a great reputation, it is paramount that we see each engagement as a partnership, regardless if we are a permanent employee, contractor, or consultant. The contractual model with our clients should not make us behave (or be treated) in a different way. Once we are in the team, we should be fully committed to the success of that project.&lt;/p&gt;

&lt;p&gt;Being in a partnership with our clients means that we should do whatever it is in our power to make the project succeed, offering ideas, alternatives, and solutions. Keeping our heads down and doing what we are told is not being in a partnership. We can do far more than that. We know what technology can do to help our clients and a key part of our job is to provide them options. Successful projects mean happy clients/employers and a successful career.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-you-mentioned-that-sometimes-developers-objections-against-technical-practices-take-for-instance-pair-programming-some-love-it-and-others-hate-it-why-do-developers-object-against-working-in-pairs-any-suggestions-how-to-deal-with-it&#34;&gt;InfoQ: You mentioned that sometimes developers objections against technical practices. Take for instance pair programming, some love it, and others hate it. Why do developers object against working in pairs? Any suggestions how to deal with it?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; I don’t think there is a single answer to this question. People are different and each person might have a very different reason to why she doesn’t like to pair. A few common ones I found over the years are: lack of confidence, shyness, lack of trust, work load, management pressure, fear of exposing their ignorance, feeling of not being productive, personality clashes, job security (not willing to share what she knows), fear that someone will find that she can’t do things on her own. The list goes on.&lt;/p&gt;

&lt;p&gt;The first thing that must be addressed is management support. Developers are far less inclined to adopt XP practices when they fear that their managers will disapprove. It needs to be clear for the development team that they are free to do whatever they think is best to deliver quality software in a timely manner.&lt;/p&gt;

&lt;p&gt;The second thing to be addressed is team spirit. It’s the whole team responsibility to create an environment where it is OK to expose our ignorance. In fact, exposing our ignorance should be encouraged. This should be treated as a sign that people are keen to learn. “Hey, I don’t know much about our deployment process. Can I pair with someone on this in the next task?”&lt;/p&gt;

&lt;p&gt;When a developer is not so keen to pair with others, it’s the responsibility of the other developers to make this person feel comfortable pairing with them. The best trick I use is to invite someone that doesn’t like to pair to “help” me. “Hi Paul, I’m working on this part of the application but I’m struggling a bit. Would you mind to sit down with me and help me a little bit?” As soon as the person sits next to you, you are already pairing. Ask her opinion. Involve her in your thought process. If you have a better idea about how to solve something, don’t criticise the other person’s idea. Make your idea a suggestion. If the person rejects your suggestion, don’t try to force it. Ask her questions and let her figure out the shortcomings of her own ideas.&lt;/p&gt;

&lt;p&gt;Last, but not least, there is the business aspect. It’s important that every developer understands that a software project is not about them. Having people working in isolation brings a big risk to the business. Pairing should be encouraged not only because of quality but also to reduce the key person dependency risk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-your-book-contains-a-chapter-describing-interview-anti-patterns-why-did-you-decide-to-include-this&#34;&gt;InfoQ: Your book contains a chapter describing interview anti patterns. Why did you decide to include this?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; Every company wants to hire “the best” people, but the truth is, they have no clue how. Go to any technical community, call a group of developers and ask them about their interview experiences. Grab a seat and a drink first because you are about to hear the longest rant of your life.&lt;/p&gt;

&lt;p&gt;Recruitment is an essential part of any business and developers, technical leaders, and hiring managers need to learn how to interview. They need to learn what they should or shouldn’t do during an interview. Experienced developers are in extremely high-demand and very rarely looking for a job. If a company gets a chance to bring one in for an interview, they cannot screw it up. Experienced developers are not only there to be interviewed; they are there to interview the company as well, starting by the interviewers.&lt;/p&gt;

&lt;p&gt;My idea with the second half of the book was to help companies to attract and retain software craftsmen and that’s why I dedicated a couple of chapters to recruitment and interviews.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-you-stated-that-creating-a-culture-of-learning-is-one-of-the-most-efficient-ways-of-injecting-passion-into-a-company-what-can-organizations-do-to-have-empowered-employees-who-want-to-learn-and-develop-themselves&#34;&gt;InfoQ: You stated that &amp;ldquo;creating a culture of learning is one of the most efficient ways of injecting passion into a company&amp;rdquo;. What can organizations do to have empowered employees who want to learn and develop themselves?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; First they need to put their money where their mouth is. It’s quite common to hear managers saying that they want passionate people, but as soon as some employees ask for a couple hours a week to practice and share knowledge, the answer is: “Sorry guys, we need to meet this deadline and we can’t afford to miss a couple of hours per week… at least not in the next… five years.”&lt;/p&gt;

&lt;p&gt;Creating a culture of learning is much simpler and cheaper than many companies think. They just need to get out of the way and let it happen. Maybe buy a few pizzas here and there. I know because we’ve done it in a global department inside an investment bank without asking for any management support. In fact, we didn’t tell them anything. When they realized, there were already quite a few of us meeting regularly, coding together, and sharing ideas.&lt;/p&gt;

&lt;p&gt;We just need one or two people willing to organize something and an empty meeting room (or any other space where people can get together). Meetings can happen at lunchtime, once or twice a week. This is how we started. I told people that I was going through the “Seven Languages in Seven Weeks” book and asked if they wanted to join me. At first, just two people joined. Then, as a week or two went by, developers kept seeing us with our laptops having fun at lunchtime and also talking about the things we were learning during coffee breaks. They got more excited and decided to join in. At some point, we were running a few sessions a week (hands-on sessions, talks, discussions) about different things, with more than 20 developers.&lt;/p&gt;

&lt;p&gt;When people are having fun, others will join in. Enlightened companies will appreciate the efforts made by their employees and will do whatever they can to nurture their passion, giving them time to learn.&lt;/p&gt;

&lt;p&gt;Companies should never force people to get together so that they can “improve themselves.” When people are forced, it becomes work and that is not the idea. Let the people organise themselves. Let them decide what they want to learn and how often they are going to meet. The only thing the company (managers in this case) need to do is to make sure that everyone knows that they don’t need to ask authorisation to take a couple of hours here and there to meet and learn. People normally understand the urgency of their work and can plan accordingly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;infoq-in-your-book-you-wrote-about-pragmatism-a-practical-approach-to-craftsmanship-and-doing-technical-practices-can-you-elaborate-on-that&#34;&gt;InfoQ: In your book you wrote about pragmatism, a practical approach to craftsmanship and doing technical practices. Can you elaborate on that?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mancuso:&lt;/strong&gt; Software Craftsmanship is becoming more and more popular. With that, more developers are calling themselves craftsmen and embracing Software Craftsmanship values. Companies are also trying to embrace Software Craftsmanship and are paying far more attention to the quality of the software they produce.  At the same time that this is a good thing, when certain ideas become popular, their core message gets diluted and often misunderstood. Agile is a great example of that. How many companies claim to be working in an Agile fashion today? If we brought some of the Agile originators into these companies, how many companies would they say that are really working according to the values they defined? My fear is that, if we are not careful, Software Craftsmanship will go towards the same direction.&lt;/p&gt;

&lt;p&gt;One of the core values of Software Craftsmanship is “productive partnership” [with our customers.] In summary, that means, helping our customers to achieve whatever they want to achieve in a sustainable way, via well-crafted software. However, well-crafted software is pointless if it is not providing any value to customers. It’s pointless to have code that is beautifully written, fully tested, and designed according to the latest fad, if it can’t be delivered in time and at an affordable price. Understanding our customer’s needs is paramount for any craftsman. We also need to understand that writing software for a large investment bank is different from writing software for a small startup. Building software for an insurance company is different from creating an online store for a small business. It’s important we understand the context we are in and adapt our process accordingly. What is the cost of a bug? In certain places, a bug in production may be catastrophic while in others, it’s probably much cheaper than not going live at all.&lt;/p&gt;

&lt;p&gt;Our industry loves extremes: From BDUF (Big Design Up Front) to no design at all. From long cycles of manual testing to layers and layers of automated testing. From monolith applications to hundreds of small classes being deployed as [micro]services. It seems that everyone is looking for a magical recipe and trying to apply it everywhere. Where before people were complaining about lack of quality, now they are complaining that this “quality” thing is too expensive and takes too long.&lt;/p&gt;

&lt;p&gt;Yes, of course we have values. Of course we care about the quality of our work. But above all, we should be pragmatic and get things done. Good practices are good until we find better ones to replace them. Some developers are treating certain practices, tools, design styles, and programming paradigms as a religion, forgetting that they have a software to deliver and, most importantly, a customer paying for it. At the end of the day, the main judges of the quality of our work are our customers. Regardless of which tools we use or how we call ourselves, if our clients are unhappy, we cannot say we are doing a good job.&lt;/p&gt;

&lt;p&gt;Mastering our tools and practices is a way to reduce the quality cost, and that can be achieved by deliberate practice. Customers should not pay more because we decided to use a certain practice or tool. Typing has never been the bottleneck in a software project, and neither should be any of the practices and tools we chose to use. Well-crafted code is a means to an end, where the end is customer satisfaction. Failing to understand that is failing to understand Software Craftsmanship.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Please see the &lt;a href=&#34;http://www.infoq.com/articles/mancuso-software-craftsman&#34;&gt;original interview&lt;/a&gt; on the &lt;a href=&#34;http://www.infoq.com/articles/mancuso-software-craftsman&#34;&gt;InfoQ website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Sizing</title>
      <link>http://codurance.com/blog/project-sizing/</link>
      <pubDate>Mon, 23 Mar 2015 14:30:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/project-sizing/</guid>
      <description>

&lt;p&gt;Sizing a project is one of the most important things we do and it is often the first thing we need precisely when we have the least amount of information. During a pre-sales meeting the client will usually ask for a &amp;ldquo;ballpark&amp;rdquo; figure so that they can understand if the project is feasible. We try to get as much information as possible before we provide a very high-level figure. The approach we take depends on whether the client already has a well defined backlog or if they are expecting us to create the backlog as part of the estimation.&lt;/p&gt;

&lt;h3 id=&#34;sizing-an-existing-product-backlog&#34;&gt;Sizing an existing Product Backlog&lt;/h3&gt;

&lt;p&gt;Often we will have a set of requirements either in a big document or user-story format. It is important to understand each one of these requirements - especially those that are quite vague. These vague requirements often result in an explosion of features and will invalidate our estimates. The first thing we do is to break larger requirements/user-stories down into smaller chunks so that all are defined at similar level. We try to insure that the stories satisfy the &lt;a href=&#34;http://guide.agilealliance.org/guide/invest.html&#34;&gt;INVEST&lt;/a&gt; criteria. The next step is to further define the scope using assumptions and decisions logged against each story. This work to breakdown user-stories and define their scope is ideally done with the client. At the very least, we walkthrough the whole backlog with the client so that they fully understand the stories and the factors that may impact scope.&lt;/p&gt;

&lt;p&gt;Our estimates are based on well understood scope but we also recognise that the scope will change and evolve throughout the duration of the project. Clients generally have a budget agreed and our goal is to provide them with a viable product within that budget. We understand that the viable product may change during the development and the client may want to bring new stories in. We constantly refine our estimates to ensure that the client always understands that the the lowest priority stories may need to be dropped with the introduction of new stories. If the client wishes to keep the lowest priority stories as well then we renegotiate the budget/time for the project. We never negotiate on quality, our craftsmen hone their skills so that quality does not incur any additional cost.&lt;/p&gt;

&lt;p&gt;During estimation we will employ other techniques to better understand the viable product. We create user journeys and mockups where appropriate to make our discussion with the client more productive. We also define the technology stack and high-level architecture to better understand the extent of the work. Again we do understand that these are initial designs are are subject to change.&lt;/p&gt;

&lt;p&gt;Non-functional requirements are always included during sizing. These are factored in the same backlog and treated like other stories.&lt;/p&gt;

&lt;h3 id=&#34;coming-up-with-a-product-backlog&#34;&gt;Coming up with a Product Backlog&lt;/h3&gt;

&lt;p&gt;If the client does not have a well defined set of requirements then we come-up with a product backlog before we apply the above techniques to size the project. Our preferred technique is to use &lt;a href=&#34;http://www.impactmapping.org/&#34;&gt;Impact Mapping&lt;/a&gt;. This allows us to drill down into the features from a clear goal that the client wants to achieve.
Documenting assumptions, decisions, risks, issues and dependencies (ADRID)&lt;/p&gt;

&lt;p&gt;Documenting ADRID is extremely important during project sizing. At the very start of the project there are a lot of unknowns and it is impossible to define everything. We will log assumptions, decisions, risks, issues, and dependencies against each story. We try to confirm assumptions as much as possible but most will remain open at this stage. The reason these are logged against each story is that they help us provide better estimates. They also allow us to re-estimate the story if one or more of the ADRID no-longer holds true or new ones are identified. We have a regular meeting with the client throughout the duration of the project to see if there are any changes to ADRID and to discover more, if we discover any changes to these then parts or the whole of the backlog may require reestimating. Any changes to the estimates are made with agreement from the client.&lt;/p&gt;

&lt;h3 id=&#34;three-point-estimation-technique&#34;&gt;Three-point Estimation Technique&lt;/h3&gt;

&lt;p&gt;When estimating stories we use the &lt;a href=&#34;http://en.wikipedia.org/wiki/Three-point_estimation&#34;&gt;Three-point Estimation&lt;/a&gt; Technique. The technique requires us to provide best, worst and likely case scenario for each story. We provide estimates in concrete days and we always assume the story will be developed using pair programming. We use the ADRID logged against each story to ensure that the factors impacting the scope are well understood. The totals for the 3 types of estimates are gathered to work out the Standard Deviation &lt;code&gt;((worst case - best case)/6)&lt;/code&gt; and the Weighted Average Estimate &lt;code&gt;(best case + (4*likely case) + worst case)/6&lt;/code&gt;. We can then work out the level of confidence as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;50% confidence on the Weighted Average&lt;/li&gt;
&lt;li&gt;70% confidence on Weighted Average + Standard Deviation&lt;/li&gt;
&lt;li&gt;95% confidence on Weighted Average + 2 * Standard Deviation&lt;/li&gt;
&lt;li&gt;99.5% confidence on Weighted Average + 3 * Standard Deviation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: there is a statistical aspects to this type of estimation but it is important to understand that these are still estimates and hence have no guarantees.&lt;/p&gt;

&lt;h3 id=&#34;factor-in-project-setup&#34;&gt;Factor in project setup&lt;/h3&gt;

&lt;p&gt;We factor in Project Setup regardless if the project is greenfield or if we are building on an existing codebase. Time is always required to get started. For greenfield projects this may take the form of an Iteration Zero where we setup things like Source Control, Continuous Integration, and Test Environments. If the team is brand new then we must also factor in time to define and evolve our development process and practices.&lt;/p&gt;

&lt;h3 id=&#34;factor-in-planning-meeting-client-workshops-and-other-meetings&#34;&gt;Factor in planning meeting, client workshops, and other meetings&lt;/h3&gt;

&lt;p&gt;Finally we make sure that the time required for various meetings is factored in. For example planning meetings, retrospectives, demos etc. can take up to a day every two weeks.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>User Story Guidelines</title>
      <link>http://codurance.com/blog/user-stories-guidelines/</link>
      <pubDate>Fri, 20 Mar 2015 21:22:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/user-stories-guidelines/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Disclaimer: This post was extracted from an internal Codurance document used to help our apprentices to learn how we work. We all understand that each project is different and that by no means we can apply exactly the same techniques and practices everywhere. However, the text below serves not only as a foundation but also as a guideline for all of us when it comes to user stories. There are many good books and posts written about user stories. By no means this post is meant to be a summary of all the good practices around this area.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;User stories are a good way to gather requirements, agree on what needs to be done, and provide visibility of the work being done to clients. They also help us prioritise the work to be done according to the value they add at a given point in time.&lt;/p&gt;

&lt;p&gt;Below are a few guidelines in how we work with user stories.&lt;/p&gt;

&lt;h2 id=&#34;capturing-requirements&#34;&gt;Capturing requirements&lt;/h2&gt;

&lt;p&gt;The main objective of creating user stories is to understand what needs to be done. They document the expected behaviour that an application needs to provide. This is best achieved through a close collaboration between product owner (who represents the business needs and are in charge of priorities) , business analysts, QAs and the rest of the development team.&lt;/p&gt;

&lt;h2 id=&#34;user-story-lifecycle&#34;&gt;User story lifecycle&lt;/h2&gt;

&lt;p&gt;User stories start as an idea for the behaviour. This behaviour must also be associated to some value that will be added to the business once implemented.&lt;/p&gt;

&lt;p&gt;At first, a user story is just an idea and it only has a title describing the behaviour expected, with no details on. E.g. Music Player, Report fixed income trades, Display user feed. Product Owner elicits the stories from the business. Team members may also add stories to the product backlog in collaboration with the product owner.&lt;/p&gt;

&lt;p&gt;The Product Owner must prioritise the stories that the development team will work on in the next iteration. This is done by moving the stories to the top of the product backlog, in order of importance. This is done for just a few stories, not all. The stories at the top of the backlog have the highest business value at that point in time.&lt;/p&gt;

&lt;p&gt;Once stories are prioritised, they should be refined. At this point the Product Owner will start specifying the behaviour expected. They will enough details so that the developers have enough information to start implementing the story.&lt;/p&gt;

&lt;h2 id=&#34;user-story-refinement&#34;&gt;User story refinement&lt;/h2&gt;

&lt;p&gt;A story must have the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The value that it brings to the business (or specific actor/role)&lt;/li&gt;
&lt;li&gt;The detailed description of the behaviour expected, preferably with some examples, if applicable.&lt;/li&gt;
&lt;li&gt;The acceptance criteria, that means, everything that needs to be done by the development team so that the product owner can “accept” the story (agree that the story is done.)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;user-story-template&#34;&gt;User story template&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;original&lt;/em&gt; template for a user story was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As a &amp;lt;actor/role&amp;gt;
I would like to &amp;lt;desired action&amp;gt;
So that &amp;lt;business value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our preferred template is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In order to &amp;lt;get some value&amp;gt;
As a &amp;lt;actor/role&amp;gt;
I would like to &amp;lt;desired action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The latter template helps us focus on the business value first. In many occasions, when using the default template, we were able to complete the first two steps and struggle to complete the third. The problem with not focusing on the third step is that we may end up building features that don’t really have any business value. Focusing on writing the business value first, forces us to discuss the real relevance of the story.&lt;/p&gt;

&lt;p&gt;Besides the business description, a story should be enriched with examples whenever possible.&lt;/p&gt;

&lt;p&gt;The final part is the Acceptance Criteria. This is where we describe details of the expected behaviour including the edge cases. The acceptance criteria is what is used by the product owner to “accept” a story. Acceptance Criteria is the ideal source for the automated tests.&lt;/p&gt;

&lt;h3 id=&#34;example-story-1-credit-card-payment&#34;&gt;Example Story 1: Credit Card Payment&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;In order to buy the items I need
As a customer
I would like to specify the credit card I want to use.

Acceptance criteria

* User must to have at least one item in the shopping basket in order to go to make the payment
* £2.00 fee should be added when amount to be paid is less than £10.00
* Accepted Credit Cards are: Visa, MasterCard, and American Express
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;example-story-2-playlists&#34;&gt;Example Story 2: Playlists&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;In order to easily find and listen to my favourite songs
As a music fan
I would like to organise my songs into playlists.

Acceptance criteria

* A playlist can be empty
* A song can be added to multiple playlists
* A song can only be added once to a playlist
* Playlists should have a unique name

Examples

| Playlist name | Songs                                 |
| Punk/Rock     | God Save The Queen, American Jesus    |
| Classic Rock  | Sultans of Swing, Sweet Child of Mine | 
| General       | Sultans of Swing, Censura             | 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;_Further reading: &lt;a href=&#34;http://en.wikipedia.org/wiki/Specification_by_example&#34;&gt;Specification by Example&lt;/a&gt;_&lt;/p&gt;

&lt;h2 id=&#34;breaking-stories-into-tasks&#34;&gt;Breaking stories into tasks&lt;/h2&gt;

&lt;p&gt;In order to estimate a story, developers should break down the stories into technical tasks. Each task should reflect a small and measurable piece of work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Task for Example Story 2: Playlists&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s assume we are building a web application with AngularJS in the front end and Java, Dropwizard, and MongoDB in the backend.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the API used by the front end.&lt;/li&gt;
&lt;li&gt;UI changes for capturing a new playlist name (see mockup)&lt;/li&gt;
&lt;li&gt;Dropwizard endpoint for playlist creation&lt;/li&gt;
&lt;li&gt;Playlist service / repository interface&lt;/li&gt;
&lt;li&gt;Playlist persistence on MongoDB&lt;/li&gt;
&lt;li&gt;UI changes for adding songs to playlist (see mockup)&lt;/li&gt;
&lt;li&gt;Dropwizard endpoint for adding songs to playlist&lt;/li&gt;
&lt;li&gt;Persist songs added to playlist in MongoDB&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Should items 7 and 8 be part of this story? The short answer is &lt;em&gt;no&lt;/em&gt;. Although related, the tasks represent two different concepts: creating playlists and adding songs to playlists. More about that below.&lt;/p&gt;

&lt;h3 id=&#34;breaking-stories-in-to-smaller-stories&#34;&gt;Breaking stories in to smaller stories&lt;/h3&gt;

&lt;p&gt;Sometimes we know we need to break a story into smaller stories just looking at the name or description of it. E.g: Process a trade, Music player, etc. What type of trade? How many types do we have? Do they have different rules? Even processing a single trade can be massive. Do we need to enrich the data? Do we need to report the trade to different regulators? Do the trades come from a single source? Do they have the same format? We can also have loads of questions about a music player. Are we playing music that is stored locally? Are we streaming? If yes, from which sources? How many formats should we support? Should we be able to fast-forward, pause, and rewind? Do we start playing a song from where we stopped previously? Do we display any information about the song being played? If yes, where do we get the information from?&lt;/p&gt;

&lt;p&gt;As you can see, we cannot have a story that caters for an entire feature. Another way of putting it is, Processing a Trade and Music Player are not stories, they are features. Features are often referred to as epics however we believe that feature is a better term.&lt;/p&gt;

&lt;p&gt;When refining stories, it is our job as developers to ask all these questions to the product owners. Depending on the answers, we should create stories that will represent the different behaviours.&lt;/p&gt;

&lt;h4 id=&#34;what-happens-when-the-product-owner-doesn-t-know-the-answer&#34;&gt;What happens when the product owner doesn’t know the answer?&lt;/h4&gt;

&lt;p&gt;Well, there are a few possibilities here. Sometimes it is possible to help the product owner giving a few suggestions and explaining the cost/trade-offs of each one of them. Sometimes the whole team can just brainstorm ideas and pick one. However, depending on the domain, developers may not be equipped with enough business knowledge to even make suggestions. In these cases, we can create a story representing the behaviour being discussed and add it to the backlog. Whenever the product owner gets an answer, she will then prioritise that story or simply delete it from the backlog.&lt;/p&gt;

&lt;h2 id=&#34;estimation&#34;&gt;Estimation&lt;/h2&gt;

&lt;p&gt;There is a big debate about estimation. However, the debate is more about estimation in general, mainly big up-front estimation (search for #noestimates hashtag on Twitter for more.)&lt;/p&gt;

&lt;p&gt;We find the act of estimating top priority stories valuable, mainly in cases where the team is not mature enough (doesn’t master all the technologies used in the system, communication with business is not optimal, lack of business domain, etc.)&lt;/p&gt;

&lt;p&gt;Estimating a user story forces us to think about all the technical tasks we need to implement in order to complete the story. Once we have the list of tasks, we can then start estimating them in isolation. Let’s take the tasks for the Playlist story:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the API used by the front end (2 hours)&lt;/li&gt;
&lt;li&gt;UI changes for capturing a new playlist name (3 hours)&lt;/li&gt;
&lt;li&gt;Dropwizard endpoint for playlist creation (2 hours)&lt;/li&gt;
&lt;li&gt;Playlist service / repository interface to add playlists (2 hours)&lt;/li&gt;
&lt;li&gt;Playlist persistence on MongoDB (1 hour)&lt;/li&gt;
&lt;li&gt;UI changes for adding songs to playlist (12 hours)&lt;/li&gt;
&lt;li&gt;Dropwizard endpoint for adding songs to playlist (2 hours)&lt;/li&gt;
&lt;li&gt;Persist songs added to playlist in MongoDB (1 hour)&lt;/li&gt;
&lt;li&gt;[ADDED] Playlist service / repository interface to add songs to play list (3 hours)&lt;/li&gt;
&lt;li&gt;[ADDED] Notification event that new playlist was created (2 hours)&lt;/li&gt;
&lt;li&gt;[ADDED] Notification event that song was added to playlist (2 hours)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;estimation-side-effects&#34;&gt;Estimation side-effects&lt;/h3&gt;

&lt;p&gt;When trying to estimate the tasks, we realised we forgot a few tasks (9, 10, and 11), so we added them. The total hours estimated for this story is 32 hours. Adding more tasks made it clear that this story must be split into two: create playlists and add songs to playlists.&lt;/p&gt;

&lt;p&gt;Another interesting thing about estimating this story is that we now noticed that if we count our days as if they only had 5 productive hours (uninterrupted coding hours), this story would take approximately 6.4 days. This is a little too big for a user story, which is another reason to break the story in two.&lt;/p&gt;

&lt;h4 id=&#34;how-small-is-small&#34;&gt;How small is small?&lt;/h4&gt;

&lt;p&gt;Think about Single Responsibility Principle (SRP). Yes, the one from SOLID. Our user stories should represent a single, small, and testable concept.&lt;/p&gt;

&lt;p&gt;As a guideline, a story should not be bigger than &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; (one third) of an iteration. That means, if you are working on a two-week iteration, stories should not be bigger than 3 days. Tasks, on the other hand, should not be bigger than half-day (2 to 4 hours.)&lt;/p&gt;

&lt;h2 id=&#34;spikes&#34;&gt;Spikes&lt;/h2&gt;

&lt;p&gt;Let’s take the following task as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5. Playlist persistence on MongoDB (1 hour)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this is the first task where we needed to use MongoDB and we never did any MongoDB persistence in the past, there is a chance that we don’t really know what we need to do and how long it is going to take. We need to research a little bit, maybe even try a few things out before we can estimate the task.&lt;/p&gt;

&lt;p&gt;That’s what spikes are for. Spikes are a time-boxed investigation activity where the outcome of it is documenting the results of the investigation and also stories and tasks refinements, including estimations. Once we spend a day or two investigating how to install, connect, and store data on MongoDB, we are in a better position create/adjust tasks and estimate them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spikes should not be done as part of a story&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spikes are done in isolation, never as part of a story. If the story depends on the investigation done by the spike, the spike should be prioritised and the story should remain on the backlog. Once the spike is done, the story can then be refined and scheduled to the following iteration.&lt;/p&gt;

&lt;p&gt;Spike is a special type of story where the value is a better understanding of what or how something can be achieved.&lt;/p&gt;

&lt;h2 id=&#34;technical-stories&#34;&gt;Technical stories&lt;/h2&gt;

&lt;p&gt;Generally, they should be avoided. We should only have stories that provide business value. Technical tasks should be added to business stories instead. The reason for that is to always focus on delivering value to our customers instead of going crazy with architecture and infrastructure.&lt;/p&gt;

&lt;h3 id=&#34;when-to-use-technical-stories&#34;&gt;When to use technical stories&lt;/h3&gt;

&lt;p&gt;Technical stories are quite common at the beginning of a project. There are many things that need to be in place before we start working. E.g. Continuous Integration, UAT/Test environment, source control, etc. There is also loads of infrastructure/architecture work that needs to be done in order to satisfy the first stories. E.g. Create databases, package and deploy the application, etc. On top of that, there are always non-functional requirements that also need to be met. E.g.: performance, security, logging, etc.&lt;/p&gt;

&lt;h4 id=&#34;express-business-value&#34;&gt;Express business value&lt;/h4&gt;

&lt;p&gt;Technical stories cannot be ignored. However, when writing them, we need to express the business value they bring. E.g. Protect users data, support a bigger number of concurrent users, improve the user experience with better response time, etc.&lt;/p&gt;

&lt;p&gt;Expressing the business value of a technical story is extremely important. This gives the business a better understanding of why certain things need to be done. Business can also analyse the risks of not doing certain things and prioritise them accordingly.&lt;/p&gt;

&lt;h3 id=&#34;technical-versus-business-stories&#34;&gt;Technical versus Business stories&lt;/h3&gt;

&lt;p&gt;Whenever possible, we should not have infrastructure/architectural tasks inside business stories. E.g. We should not have a task related to add databases to a cluster in a business story about creating a client.&lt;/p&gt;

&lt;p&gt;Non-functional requirements like performance improvement, caches, clusters, communication protocols, should have their own technical stories.&lt;/p&gt;

&lt;h2 id=&#34;i-n-v-e-s-t&#34;&gt;I.N.V.E.S.T.&lt;/h2&gt;

&lt;p&gt;The INVEST mnemonic was created by Bill Wake as a reminder of the characteristics of a good quality user story, as may be used in a Scrum backlog or XP project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;ndependent:   The user story should be self-contained, in a way that there is no inherent dependency on another user story.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N&lt;/strong&gt;egotiable:   User stories, up until they are part of an iteration, can always be changed and rewritten.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V&lt;/strong&gt;aluable: A user story must deliver value to the end user.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt;stimable:    You must always be able to estimate the size of a user story.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;calable (small sized):   User stories should not be so big as to become impossible to plan/task/prioritize with a certain level of certainty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;estable: The user story or its related description must provide the necessary information to make test development possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more about INVEST, check its &lt;a href=&#34;http://en.wikipedia.org/wiki/INVEST_%28mnemonic%29&#34;&gt;wikipedia page&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;why-should-we-care-about-all-these&#34;&gt;Why should we care about all these?&lt;/h2&gt;

&lt;p&gt;There are a few reasons to why we do all the things described above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Visibility:&lt;/strong&gt; Working in small increments provides good visibility of what has been done, what is being done, and what is left to be done. Tasks and stories are constantly on the move, navigating quickly through the different lanes in our Scrum boards, from &lt;em&gt;TO DO&lt;/em&gt; to &lt;em&gt;DONE&lt;/em&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback:&lt;/strong&gt; Business and development team have a constant feedback of how things are going. This allows both to react quickly and change priorities. If something goes wrong with a story, we may only loose a few hours or days of work and not weeks or months.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Team morale:&lt;/strong&gt; Morale is always up when we constantly achieve goals, that means, moving tasks and stories to done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Agility:&lt;/strong&gt; Working in small batches allow us to deploy often, get feedback quickly, and adapt when necessary.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Team organisation:&lt;/strong&gt; With well-define and small stories and tasks, it is easier to split and parallelise work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;This post was written by Sandro Mancuso in collaboration with Mashooq Badar.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Impact Mapping</title>
      <link>http://codurance.com/blog/impact-mapping/</link>
      <pubDate>Fri, 09 Jan 2015 10:30:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/impact-mapping/</guid>
      <description>

&lt;p&gt;We had the pleasure to visit a client who asked us to facilitate a workshop. The aim was to create a plan for their investors in order to release the next round of funding for a social media website. They had a product backlog that was full of of features but they were not sure how to prioritise them. They also had a release roadmap but were unclear as to why certain things needed to be done.&lt;/p&gt;

&lt;p&gt;We decided to run the workshop using &lt;a href=&#34;http://www.impactmapping.org&#34;&gt;Impact Mapping&lt;/a&gt;. The aim of impact mapping is to create a mind-map which has the business goal at the very centre followed by the stakeholders (actors) that will help/hinder the achievement of this goal (&lt;em&gt;who&lt;/em&gt;). The following branch then addresses the behaviours of these actors that will impact the goal (&lt;em&gt;how&lt;/em&gt;) and finally the features that we need to deliver to help support these behaviours (&lt;em&gt;what&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;

&lt;p&gt;First of all we asked them to decide on the goal. They came up with a couple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Achieve target user base.&lt;/li&gt;
&lt;li&gt;Increase revenue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We asked them to concentrate on one goal for now. They very quickly agreed that achieving the target user base is the key goal and that the revenues will come once they have good market penetration.&lt;/p&gt;

&lt;h2 id=&#34;who&#34;&gt;Who?&lt;/h2&gt;

&lt;p&gt;Once the goal was agreed we asked them to come up with the actors. This took a while. There were some obvious ones like the users, moderators etc. However, they also wanted to include people like advertisers - we challenged that because they were thinking of advertisers in terms of people who will advertise on their platform. This did not directly relate to the goal. However advertisers where we would advertise to gain more users did actually make it to the list. Looking at everything with the goal in mind was already helping us to focus our plan.&lt;/p&gt;

&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;

&lt;p&gt;The next step was to see what these actors could do to help or hinder us in achieving our goal. The difficult part was to get people to think about behaviours they would like to impact rather than the features in the product. Initially people kept thinking from the point-of-view of the features. We didn’t stop them but asked them to articulate exactly what behaviour they are looking to support with this feature and how that behaviour will help them towards the goal.&lt;/p&gt;

&lt;p&gt;Initially these behaviours were quite granular but after a few passes we could collapse them into a smaller set - describing them at a level we were comfortable with. We found it quite strange that the behaviours we were looking to encourage were listed along side the behaviours we were trying to discourage. An example of the later was “Posting of inappropriate content”. This however made good sense when we got to the next phase in the exercise because they resulted in distinct features.&lt;/p&gt;

&lt;p&gt;In some cases we found a lot of interdependencies or duplication between behaviours. Although interdependencies were discussed we did not represent them in our mind-map. As for the duplication we realised that these behaviours superficially looked the same but may actually result is very different features in context of different actors. Therefore duplication at this level was not a problem.&lt;/p&gt;

&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;

&lt;p&gt;Understanding how to support the behaviours is the final part of this exercise. This was surprisingly easy because a lot of thinking had already gone into this while we where trying to understand the how part. We had to iterate a few times to ensure that we were defining these features at the right level. Although most of the features discovered here were already in the original backlog, everyone found it very useful to be able to trace every single feature back to the original goal. This allowed us to de-prioritise all the features from the original backlog that were not directly aligned with the goal.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The resulting mind-map made it very easy to reason about the features and their place in the release roadmap. The client was very happy that they can now be clear about each feature and provide a strong argument if investors ask for feature which do not align to the original goal.&lt;/p&gt;

&lt;p&gt;Impact mapping is a very useful tool to help focus on the business goal. Having a visual map of features that can be traced back to the actual goal provides a great way to reason and prioritise the backlog and plan the release roadmap.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Not all managers are stupid</title>
      <link>http://codurance.com/blog/not-all-managers-are-stupid/</link>
      <pubDate>Mon, 10 Nov 2014 04:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/not-all-managers-are-stupid/</guid>
      <description>

&lt;p&gt;&lt;em&gt;(The following story was a bit altered in order to keep it short(ish) and to protect the innocents)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I still remember the day when our managers in a large organisation told us we should still go live after we reported a &lt;em&gt;major&lt;/em&gt; problem a couple of months before the deadline. We had been developing the system for almost one year with 7 teams in 2 different countries. We were building a system that would process different types of trades coming from many different front-office systems around the world. The system had to report all these trades to regulators according to quite complex criteria. Different types of trades had different rules and reporting workflows. We also had to integrate with other internal systems to get all the information needed to report the trades. The volume of trades was quite large—millions. There was a problem in a couple of unfinished flows, which would cause hundreds of thousands of trades to be misreported to the regulators. After we explained the situation, managers told us to &lt;em&gt;work harder&lt;/em&gt; go ahead with the release anyway.&lt;/p&gt;

&lt;p&gt;How could they tell us to go live in a situation like that? They should all be fired. Arrested. How could they ask us to drop the quality and go live with a known problem of that size? “Your focus is to get the system ready to be deployed and integrated with other systems,” they said. “We are going live on the date specified.” Seriously? I could not believe in such irresponsibility. They were the same managers that once said they believed in Agile and Craftsmanship. The same ones that hired us because of our focus on quality. But still, they were making these “stupid” decisions. &lt;/p&gt;

&lt;p&gt;More than once we made it clear that focusing our time on getting the system ready to production would not gives us any time to finish the automation for the problematic flows and thousands of trades would be misreported. But they did not listen. Or so we thought.&lt;/p&gt;

&lt;h3 id=&#34;the-revelation&#34;&gt;The revelation&lt;/h3&gt;

&lt;p&gt;After a few meetings with the business, we discovered a few things. They were not being irresponsible or stupid, as we developers thought. The deadline was set by the regulators and could not be moved. The cost of not reporting the trades was far higher than misreporting them. Not reporting the trades would not only be followed by heavy fines, but also by possible reputation damage. Companies would have extra time to correct any misreported trades before being fined. &lt;/p&gt;

&lt;p&gt;For us, in the development team, it was the first time we realised that going live with a few known issues would be better than not going live at all. In order to meet the deadline, we took an informed (but hard) decision to drop the quality little bit—we got rid of higher-level tests (acceptance and component tests), but kept test-driving everything at unit level. We communicated the decision to the business and clearly told them the possible impacts of it. &lt;/p&gt;

&lt;h3 id=&#34;focus-on-highest-value-features-first&#34;&gt;Focus on highest value features first&lt;/h3&gt;

&lt;p&gt;With all the problems on the table (technical and business constraints), we could all focus on possible alternatives, business and developers working together as a real team. &lt;/p&gt;

&lt;p&gt;There were two ways to report trades to the regulators. The first was to do it automatically, processing the trades via the system we were building, and sending them directly to the regulators. The second was to manually create spreadsheets for each type of trade and upload them via FTP. Due to the volume of trades and the amount of data we needed from other systems, the manual approach was not an option. At least not for all the trades.&lt;/p&gt;

&lt;p&gt;As we knew we could not get all the flows done in time and also knowing of what was at stake, managers and developers worked as a team to find a solution. We prioritised and focused on automating the flows for the trades with the highest volume, making sure that we would correctly report the vast majority of trades. For the remaining trades, the ones with the lowest volume, we decided to hire a few people to upload the trades manually. Since the system would be ready to report the majority of the trades, the manual upload for the remaining ones could actually be done in time. A few developers and business analysts created a bunch of scripts to extract data from a few systems and save it on the file system, making the manual upload, although a bit painful, viable. &lt;/p&gt;

&lt;h3 id=&#34;the-outcome&#34;&gt;The outcome&lt;/h3&gt;

&lt;p&gt;With a hybrid solution, we managed to report all trades on time with very few minor bugs, which were fixed quite quickly after the deadline. The very few trades misreported were corrected and re-sent. We also automated the manual flows and got rid of the manual solution a few weeks later. There were no damage to the organisation and we were one of the very few organisations that met the regulators imposed deadline.&lt;/p&gt;

&lt;h3 id=&#34;lessons-learned&#34;&gt;Lessons learned&lt;/h3&gt;

&lt;p&gt;As craftsmen, we all learned very important lessons in this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Managers have a far broader view of the problem than we do. While we worry about problems with the software, they worry about problems that may affect the entire organisation. &lt;/li&gt;
&lt;li&gt;Before judging managers, calling them stupid and irresponsible, we should understand why they are making certain decisions. Quite often we discover that we don’t have the same amount of information they have and that certain decisions are not as stupid as we think. &lt;/li&gt;
&lt;li&gt;We are all humans and we all make mistakes. Managers are no different. They also make mistakes but that doesn’t make them stupid. Not always, at least. :)&lt;/li&gt;
&lt;li&gt;We need to stop thinking that all managers are bad and that they don’t understand or care about software problems. In this very specific case, they understood it well, measured the pros and cons, and made the right call to go live.&lt;/li&gt;
&lt;li&gt;When we are too involved with a problem, we end up thinking that our problem is the biggest and most important problem, calling stupid any other person that fails to recognise it.&lt;/li&gt;
&lt;li&gt;As a craftsman we are paid to provide value. However, our notion of value needs to be aligned with what value means to our customers. Having well-crafted code is pointless if the business won’t benefit from it.&lt;/li&gt;
&lt;li&gt;Even when there are many things at stake, developers should decide what can or cannot be compromised when it comes to software quality. When the whole project is under pressure, we should never let the business make technical decisions. Although we decided to drop certain tests, keeping TDD at unit level, refactoring, and pair programming, was the right decision for us and I’m happy we kept our practices. They helped us to deliver the value the business needed. We were able to confidently make all the changes we needed and also make sure that everything we delivered was working as expected. Giving the business the choice, they would have probably chosen to get rid of TDD, refactoring, CI, and pair programming altogether, risking not to deliver even the main flows correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This project changed me. There are far more bad managers than good managers, but that is also true for developers. Understanding the main reasons behind each managerial decision can help us distinguish good and bad managers. It can also help us to stop with this unhealthy “us and them” attitude. Transparency, trust, and teamwork are essential for an effective organisation. &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Too Many Cooks</title>
      <link>http://codurance.com/blog/too-many-cooks/</link>
      <pubDate>Sun, 09 Nov 2014 11:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/too-many-cooks/</guid>
      <description>

&lt;p&gt;Last week, &lt;a href=&#34;http://codurance.com/aboutus/ourteam/&#34;&gt;Sandro&lt;/a&gt; and I flew to Bucharest to meet &lt;a href=&#34;http://alexbolboaca.ro/&#34;&gt;Alex&lt;/a&gt; and &lt;a href=&#34;http://adrianbolboaca.ro/&#34;&gt;Adi Bolboaca&lt;/a&gt;, &lt;a href=&#34;http://about.me/aksalmi&#34;&gt;Aki Salmi&lt;/a&gt; and &lt;a href=&#34;http://code-cop.org/&#34;&gt;Peter Kofler&lt;/a&gt;. We didn&amp;rsquo;t know what to expect: the agenda was to try a &amp;ldquo;hardcore coderetreat&amp;rdquo;, in which the constraints would be incredibly difficult, but when you have six headstrong, opinionated people in a room, you really have no idea what&amp;rsquo;s going to happen.&lt;/p&gt;

&lt;p&gt;So it was surprising, but not, when we decided as a group to try and &lt;a href=&#34;http://monospacedmonologues.com/post/91841399505/mob-programming-and-the-importance-of-fun-at-work&#34;&gt;mob&lt;/a&gt; on a real project. We started on a website for people to find pair programming partners (which we still plan to launch some time after the Global Day of Coderetreat), with one person driving and the rest &lt;del&gt;yelling at them&lt;/del&gt; &lt;ins&gt;navigating&lt;/ins&gt;.&lt;/p&gt;

&lt;p&gt;We started off quite well, driving a simple set of static pages to get the flow hammered out, with lots of discussion about the product design, how it would work, what the first real feature would be and how we could launch a &lt;a href=&#34;http://en.wikipedia.org/wiki/Minimum_viable_product&#34;&gt;minimum viable product&lt;/a&gt;. Being an agile team, we had 45-minute iterations, ten minute retrospectives and five-minute breaks, just like a code retreat. Three iterations in, we had lunch, and people were feeling good.&lt;/p&gt;

&lt;p&gt;That feeling didn&amp;rsquo;t last. By mid-afternoon, we were lagging, and people were drifting off. The experiment wasn&amp;rsquo;t working as well as we hoped. In our fifth retrospective, we decided to get to a point where it would be sensible to split into pairs and play with the code, so we quickly knocked out the rest of the flow and broke apart to do the things we cared about doing.&lt;/p&gt;

&lt;p&gt;I, personally, was a bit dejected when we split apart. I thought that six skilled people should be able to do anything together. Pairing with Alex cheered me up very quickly, as we worked towards an acceptance test that focused us on what &lt;em&gt;we&lt;/em&gt; really cared about, while the others did different things. Aki and Peter worked on a new interface for the page handling, extending its capabilities while preserving the functionality at first. Sandro and Adi decided to show each other their styles of unit testing, as they&amp;rsquo;re very different.&lt;/p&gt;

&lt;p&gt;A few hours later, we had lots of cool changes to the product that we&amp;rsquo;ll probably blend back together.&lt;/p&gt;

&lt;p&gt;So what went wrong in the mobbing, and why did pairing work? As mob programming is really just pair programming taken to the next level, why didn&amp;rsquo;t things happen?&lt;/p&gt;

&lt;h2 id=&#34;by-failing-to-prepare-you-are-preparing-to-fail&#34;&gt;By failing to prepare, you are preparing to fail.&lt;/h2&gt;

&lt;p class=&#34;citation&#34;&gt;&lt;cite&gt;Benjamin Franklin&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;This exercise gave me some more confirmation of a hypothesis I&amp;rsquo;ve been kicking around in my head for a while:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The number of people on a team should be a function of its stability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We had six people on the team, but it was very unstable. I&amp;rsquo;ll explain why.&lt;/p&gt;

&lt;h3 id=&#34;we-had-never-worked-with-each-other-before&#34;&gt;We had never worked with each other before.&lt;/h3&gt;

&lt;p&gt;We all knew each other, but only Sandro and I have worked with each other for more than a few hours. We have our own style, which is often quite loud and heated. We argue &lt;em&gt;a lot&lt;/em&gt;. It seems to work quite well for us, but it alienated the others, as they weren&amp;rsquo;t expecting it.&lt;/p&gt;

&lt;h3 id=&#34;we-had-not-agreed-that-we-would-work-on-this-problem-at-all&#34;&gt;We had not agreed that we would work on this problem at all.&lt;/h3&gt;

&lt;p&gt;The problem was a matter of consent, not consensus. Not everyone was committed to delivering a website; some wanted to just play around, and we didn&amp;rsquo;t so much decide to do one as assume that everyone was on the same page. While we did &lt;em&gt;state&lt;/em&gt; that we would build a website, simply stating something is not enough. People have to be emotionally committed, not just verbally committed.&lt;/p&gt;

&lt;h3 id=&#34;we-didn-t-know-what-we-were-building&#34;&gt;We didn&amp;rsquo;t know what we were building.&lt;/h3&gt;

&lt;p&gt;Alex had the idea for the website, which everyone &lt;em&gt;seemed to&lt;/em&gt; like, and for the first two iterations, he served as the product owner. However, he didn&amp;rsquo;t give us too much direction, which was probably a good move, as some people were there to build stuff, and some to experiment with code. Unfortunately, it meant that there was no clear focus on what we should be building.&lt;/p&gt;

&lt;h3 id=&#34;we-didn-t-set-iteration-goals&#34;&gt;We didn&amp;rsquo;t set iteration goals.&lt;/h3&gt;

&lt;p&gt;We had Scrum-style iterations, but no expectation of what we should be delivering. This, coupled with lots of new decisions during each retrospective, meant we didn&amp;rsquo;t go in a single direction; rather, we flew all over the place, often dropping snippets of code with little to no relevance to the actual project.&lt;/p&gt;

&lt;h2 id=&#34;so-we-propose-a-new-experiment&#34;&gt;So, we propose a new experiment.&lt;/h2&gt;

&lt;p&gt;This was a great experiment, and one I actually really enjoyed, despite my negative tone throughout this post. We didn&amp;rsquo;t get very far, but I derived a &lt;em&gt;lot&lt;/em&gt; of value from it, and that&amp;rsquo;s what I came for. It helped my refine my hypothesis, after all. It also helped me understand the value of planning meetings, product owners and defined backlogs in a way I hadn&amp;rsquo;t before. I honestly think that with those things, this would have been a success from the start.&lt;/p&gt;

&lt;p&gt;As a result of this experiment, Adi and I would like to run a new one. Two teams, working separately on the same thing with the intention of shipping it. One would start with a mob. The other would start with a pair, and increase by one every &amp;ldquo;iteration&amp;rdquo;. We&amp;rsquo;d conduct retrospectives after each iteration, with the goal of finding out who made more progress &lt;em&gt;and&lt;/em&gt; who felt better connected as a team. Perhaps we&amp;rsquo;ll give it a shot at the next &lt;a href=&#34;http://www.socrates-conference.de/&#34;&gt;SoCraTes DE&lt;/a&gt; or &lt;a href=&#34;http://socratesuk.org/&#34;&gt;SoCraTes UK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I&amp;rsquo;d be really interested if anyone else has seen some studies on this or read about a similar concept elsewhere—drop me a line in the comments below or by email or Twitter.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Defining and Prioritising a Backlog</title>
      <link>http://codurance.com/blog/defining-and-prioritising-a-backlog/</link>
      <pubDate>Thu, 03 Jun 2010 14:58:45 +0000</pubDate>
      
      <guid>http://codurance.com/blog/defining-and-prioritising-a-backlog/</guid>
      <description>&lt;p&gt;What is the best way to review a backlog? How do you ensure that it is &amp;ldquo;complete&amp;rdquo;? How do you ensure that the prioritisation reflects the business vision and goals?&lt;/p&gt;

&lt;p&gt;When first faced with a backlog, you are often overwhelmed by the long list of userstories. The most important step is to set a context for these userstories. Are these userstories organised in a hierarchy of “epics”? This hierarchy will help set a context. But first we need to understand what these epics mean at the highest level. Do they represent a user’s high-level goals or are they merely there as a container for some loosely related stories?&lt;/p&gt;

&lt;p&gt;When reviewing a backlog for completion it is vitally important that the stories are defined in a context. The context can take different forms depending on the nature of the application. For example if an application has a clear high-level flow that the user journeys along then the epics may be defined as activities in this flow and the userstories can be grouped under each epic representing the functionality required for this activity. This &lt;a href=&#34;//www.agileproductdesign.com/blog/the_new_backlog.html&#34;&gt;article&lt;/a&gt; by Jeff Patton presents such an approach. However, your application my exhibit a more random usage scenario. In this case epics representing high-level user goals may represent the best context for the stories. You can also provide references to other artefacts such as user journeys/wireframes to further enrich the context. This &lt;a href=&#34;//tynerblain.com/blog/2009/07/06/writing-complete-user-stories&#34;&gt;article&lt;/a&gt; by Scott Sehlhorst is an interesting discussion of setting a context for user stories.&lt;/p&gt;

&lt;p&gt;This grouping of userstories by a context also helps to manage their prioritisation. You can individually prioritise stories within each epic and then also prioritise the epics. Note that just because one epic has a higher priority does not mean that all its child userstories are of a higher priority. You may discover that only the first few userstories can provide enough functionality that further work on that epic is of a lower priority then working on another epic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The relationship between Product Owner, Business Analyst and Tester</title>
      <link>http://codurance.com/blog/the-relationship-between-product-owner-business-analyst-and-tester/</link>
      <pubDate>Wed, 03 Mar 2010 08:18:45 +0000</pubDate>
      
      <guid>http://codurance.com/blog/the-relationship-between-product-owner-business-analyst-and-tester/</guid>
      <description>&lt;p&gt;In an Agile/Scrum team the Product Owner manages the Product Backlog, a Business Analyst may help further elaborate the backlog. Acceptance Criteria is &amp;ldquo;one of the&amp;rdquo; or the output of that elaboration. A Tester may futher define the Acceptance Criteria and write test scripts to verify it. What is the relationship between the three roles? Inseparable, acquaintance or in a love triangle?&lt;/p&gt;

&lt;p&gt;My thoughts spring from the fact that I have frequently seen a gap between the tester and BA/Product Owner&amp;rsquo;s understanding of the requirements. I accept that the BA comes from the business perspective and the tester from the system/specification perspective. How can the two reach the same understanding of what the end system will deliver?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using JIRA for Agile Project Management (without Green Hopper)</title>
      <link>http://codurance.com/blog/using-jira-for-agile-project-management-without-green-hopper/</link>
      <pubDate>Mon, 04 Jan 2010 14:28:16 +0000</pubDate>
      
      <guid>http://codurance.com/blog/using-jira-for-agile-project-management-without-green-hopper/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.atlassian.com/software/jira/&#34;&gt;Jira&lt;/a&gt; from Atlassian  is a very popular issue tracking software and can be quite effectively used for Agile Project Management. Jira has a plugin (Green Hopper) that allows for creation of a backlog, iterations and tasks.  However, with help from the free Mylyn plugin for Eclipse I was able to setup a Product Backlog and Iteration Backlogs.&lt;/p&gt;

&lt;p&gt;For the User Stories in the product backlog I created two issue types (Epic &amp;amp; User Story).  Story hierarchies can be represented using Jira Links.&lt;/p&gt;

&lt;p&gt;_Note: Currently Jira connector in Mylyn has an issue with the &amp;ldquo;depends on&amp;rdquo; and &amp;ldquo;is depended on by&amp;rdquo; relationships. It displays them the wrong way around in the Tasklist hierarchy.  You can keep track of the following issues to see if they&amp;rsquo;re fixed: &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=255680&#34;&gt;255680&lt;/a&gt;, &lt;a href=&#34;https://bugs.eclipse.org/bugs/show_bug.cgi?id=223151&#34;&gt;223151.&lt;/a&gt;_&lt;/p&gt;

&lt;p&gt;For Iteration Backlog I created a version for each iteration and assigned the stories to that version/iteration. Each leaf story can then have Jira Sub-tasks to represent the tasks in a particular iteration. The &lt;code&gt;Resolved&lt;/code&gt; state of the story is used to mark it complete and &lt;code&gt;Colsed&lt;/code&gt; state is used to mark it as &amp;ldquo;accepted&amp;rdquo;. You can use Mylyn to see story hierarchies, also I found Mylyn to be a much more intuitive interface when working on Product and Iteration backlogs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Userstories and when enough is enough</title>
      <link>http://codurance.com/blog/userstories-and-when-enough-is-enough/</link>
      <pubDate>Tue, 14 Apr 2009 13:33:23 +0000</pubDate>
      
      <guid>http://codurance.com/blog/userstories-and-when-enough-is-enough/</guid>
      <description>&lt;p&gt;Perfection in software is impossible. Software developement is subject to the Law of Diminishing Returns . So how do you decide when enough is enhough?&lt;/p&gt;

&lt;p&gt;In a recent presentation Al Goerner discussed catagorising stories. Two of the more interesting catagories were &amp;ldquo;New feature&amp;rdquo; and &amp;ldquo;Feature enhancement&amp;rdquo;. In an Agile project where new stories are constantly being added to the backlog, these two catagories can help use decide when a product is maturing and the new stories coming into the backlog are simply tweaks to the original requirements. In general &amp;ldquo;Feature Enhancements&amp;rdquo; provide a much smaller &amp;ldquo;bang for your buck&amp;rdquo; then &amp;ldquo;New Features&amp;rdquo;. A simple rule of thumb is that when your backlog is mostly &amp;ldquo;Feature enahncements&amp;rdquo; then it is time to re-evaluate the ROI for continuing developement and compare it with the opertunitiy cost of a new endeavour.&lt;/p&gt;

&lt;p&gt;Catagorising stories can also help us manage Risk and Issues within our backlog.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>