<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tdd on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/tdd/</link>
    <description>Recent content in Tdd on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 15 May 2016 00:01:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/tdd/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bowling Kata in Clojure, F# and Scala</title>
      <link>http://codurance.com/blog/bowling-kata-in-clojure-fsharp-scala/</link>
      <pubDate>Sun, 15 May 2016 00:01:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/bowling-kata-in-clojure-fsharp-scala/</guid>
      <description>

&lt;p&gt;In one of our evening apprenticeship meetings, a pair was doing the &lt;a href=&#34;http://codingdojo.org/cgi-bin/index.pl?KataBowling&#34;&gt;Bowling Kata&lt;/a&gt; in Java. After reviewing their code, I thought that it would be a good idea to do it myself.&lt;/p&gt;

&lt;p&gt;Every craftsman at Codurance is a polyglot developer and, although we have very similar values, we all have our own preferences when it comes to programming languages and coding styles. As you can imagine, we cannot always avoid cracking a joke or two about all the languages we don’t like so much but other craftsmen in the company do. So, just for fun, quite a few of us decided to do the same kata using our language of choice. It was great to see the same problem solved with different languages. Although there are still a few craftsmen and apprentices working on solving the kata in different languages, here are 3 of my favourite solutions so far (in no particular order):&lt;/p&gt;

&lt;h2 id=&#34;clojure-by-mashooq&#34;&gt;Clojure (by Mashooq)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns bowling.core-test
  (:require [clojure.test :refer :all]
            [bowling.core :refer :all]))

(deftest bowling 
  (testing &amp;quot;strikes for all rolls&amp;quot;
    (is (= 300 (score &amp;quot;XXXXXXXXXXXX&amp;quot;))))

  (testing &amp;quot;normal scores&amp;quot;
    (is (= 99 (score &amp;quot;91919393929291219191&amp;quot;))))

  (testing &amp;quot;normal scores or misses&amp;quot;
    (is (= 90 (score &amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 93 (score &amp;quot;919-9-9-9-9-929-9-9-&amp;quot;))))
  
  (testing &amp;quot;mixture of stikes and normals&amp;quot;
    (is (= 98 (score &amp;quot;9-X8-9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 104 (score &amp;quot;9-X8-9-9-9-9-9-9-X23&amp;quot;)))
    (is (= 28 (score &amp;quot;--X81--------------&amp;quot;)))
    (is (= 27 (score &amp;quot;--X8-1-------------&amp;quot;))))
  
  (testing &amp;quot;spares for all rolls&amp;quot;
    (is (= 150 (score &amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot;))))

  (testing &amp;quot;mixture of spares and normals&amp;quot;
    (is (= 82 (score &amp;quot;9-8/--9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 84 (score &amp;quot;9-8/--9-9-9-9-9-9-9/1&amp;quot;)))
    (is (= 12 (score &amp;quot;--8/1---------------&amp;quot;)))
    (is (= 11 (score &amp;quot;--8/-1--------------&amp;quot;)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns bowling.core)

(defn- spare?[s] (= \/ s))
(defn- strike? [s] (= \X s))
(defn- spare-or-strike? [s] (or (spare? s) (strike? s)))
(defn- miss? [s] (or (= nil s) (= \- s)))

(defn- score-for [s] 
  (cond 
     (spare-or-strike? s)  10
     (miss? s)  0 
     :else (read-string (str s))))

(defn- score-roll [this-roll rem-rolls]
  (cond 
    (strike? this-roll) (+ 10 (score-for (first rem-rolls)) (score-for (first (rest rem-rolls))))
    (spare? this-roll) (+ 10 (score-for (first rem-rolls)))
    (spare? (first rem-rolls)) 0
    :else (score-for this-roll)))

(defn- score-rolls [acc rolls]
  (if (seq rolls)  
    (let [running-score (+ acc (score-roll (first rolls) (rest rolls)))]
      (score-rolls running-score (rest rolls)))
    acc))

(defn- expand-strikes [rolls]
  (seq (reduce str  (map #(if  (strike? %) &amp;quot;X-&amp;quot;  (str %)) (seq rolls)))))

(defn- deduct-extra-rolls [score rolls]
  (- score  (score-rolls 0 (drop 20 (expand-strikes rolls)))))

(defn score [rolls] 
  (deduct-extra-rolls (score-rolls 0 (seq rolls)) rolls))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/mashooq/katas/tree/master/clojure/bowling&#34;&gt;Mash&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;f-by-pedro&#34;&gt;F# (by Pedro)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;namespace BowlingV2.FSharpKatas

    module Bowling = 
        open System

        type private Rolls = Strike | Spare | Roll
        type private Pins = Pins of int
        type private Roll = Rolls * Pins
        
        let private maxRolls = 20
        let private maxPins = 10
        let private noPins = 0
        
        let private pinCountForRoll roll =
            let (Pins pins) = snd roll
            pins
            
        let private pinsFromRawRoll rawRoll =
            Pins (Int32.Parse(rawRoll.ToString()))
            
        let private sparePinsFromRawRoll rawRoll = 
            Pins (maxPins - Int32.Parse(rawRoll.ToString()))

        let private parse roll index rolls =
            let previousRoll = fun () -&amp;gt; Seq.item (index - 1) rolls
            match roll with
            | &#39;-&#39; -&amp;gt; Roll, Pins noPins
            | &#39;/&#39; -&amp;gt; Spare, sparePinsFromRawRoll(previousRoll())
            | &#39;X&#39; -&amp;gt; Strike, Pins maxPins
            | r -&amp;gt; Roll, pinsFromRawRoll r

        let private scoreRoll index rolls =
            let bonusRoll = fun(lookAhead) -&amp;gt;  
                if index + lookAhead &amp;lt; Seq.length rolls 
                then pinCountForRoll (Seq.item (index + lookAhead) rolls) 
                else noPins       

            let exceedsMaxRolls = fun() -&amp;gt;
                rolls 
                |&amp;gt; Seq.take index
                |&amp;gt; Seq.map (fun r -&amp;gt; match r with | (Strike, _) -&amp;gt; 2 | _ -&amp;gt; 1)
                |&amp;gt; Seq.sum &amp;gt;= maxRolls

            match Seq.item index rolls with
                | (_, _) when exceedsMaxRolls() -&amp;gt; noPins
                | (Spare, Pins pins) -&amp;gt; pins + bonusRoll 1
                | (Strike, Pins pins) -&amp;gt; pins + bonusRoll 1 + bonusRoll 2
                | (Roll, Pins pins) -&amp;gt; pins

        let scoreGame rolls =
            let parsedRolls = rolls |&amp;gt; Seq.mapi (fun index roll -&amp;gt; 
                                                    parse roll index rolls)

            parsedRolls
            |&amp;gt; Seq.mapi (fun index _ -&amp;gt; scoreRoll index parsedRolls)
            |&amp;gt; Seq.sum
                     
    module BowlingTests =
        open NUnit.Framework
        open Swensen.Unquote
        open Bowling

        [&amp;lt;Test&amp;gt;]
        let ``calculate scores with no strikes or spares``() =
            test &amp;lt;@ scoreGame &amp;quot;--&amp;quot; = 0 @&amp;gt; 
            test &amp;lt;@ scoreGame &amp;quot;1&amp;quot; = 1 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;13&amp;quot; = 4 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;13521&amp;quot; = 12 @&amp;gt;
            
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing a miss``() =
            test &amp;lt;@ scoreGame &amp;quot;1-5-&amp;quot; = 6 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot; = 90 @&amp;gt;
            
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing spares``() =
            test &amp;lt;@ scoreGame &amp;quot;1/&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/--&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/-5&amp;quot; = 15 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35-&amp;quot; = 21 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/3/23&amp;quot; = 30 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot; = 150 @&amp;gt;
        
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing strikes``() =
            test &amp;lt;@ scoreGame &amp;quot;X&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X--&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X--51&amp;quot; = 16 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X51&amp;quot; = 22 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;XXXXXXXXXXXX&amp;quot; = 300 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;XXXXXXXXXX12&amp;quot; = 274 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX45&amp;quot; = 103 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X35&amp;quot; = 149 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/&amp;quot; = 153 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/23&amp;quot; = 160 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/X&amp;quot; = 173 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/XX6&amp;quot; = 189 @&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/pedromsantos/FSharpKatas/blob/master/BowlingV2.fs&#34;&gt;Pedro&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;scala-by-sandro&#34;&gt;Scala (by Sandro)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.codurance.bowlingkata.full_scoring

import com.codurance.UnitSpec
import com.codurance.bowlingkata.full_scoring.BowlingFullScoreCalculator.scoreFor

class BowlingFullScoreCalculatorShould extends UnitSpec {

	&amp;quot;calculate scores with no strikes or spares&amp;quot; in {
		scoreFor(&amp;quot;11111111112222222222&amp;quot;) should be (30)
	}

	&amp;quot;calculate scores containing a miss&amp;quot; in {
		scoreFor(&amp;quot;--------------------&amp;quot;) should be (0)
		scoreFor(&amp;quot;1-1----------------1&amp;quot;) should be (3)
		scoreFor(&amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot;) should be (90)
	}

	&amp;quot;calculate scores containing spares&amp;quot; in {
		scoreFor(&amp;quot;5/11------------3/11&amp;quot;) should be (26)
		scoreFor(&amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot;) should be (150)
	}

	&amp;quot;calculate scores containing strikes&amp;quot; in {
		scoreFor(&amp;quot;XXXXXXXXXXXX&amp;quot;) should be(300)
		scoreFor(&amp;quot;XXXXXXXXXX12&amp;quot;) should be(274)
		scoreFor(&amp;quot;1/35XXX458/X3/23&amp;quot;) should be(160)
		scoreFor(&amp;quot;1/35XXX458/X3/XX6&amp;quot;) should be(189)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.codurance.bowlingkata.full_scoring

object BowlingFullScoreCalculator {

	def scoreFor(rolls: String): Int = totalScore(rolls.split(&amp;quot;&amp;quot;).toList)

	private def totalScore(rolls: List[String], index: Int = 0, score: Int = 0): Int = {
		lazy val MISS  = &amp;quot;-&amp;quot;
		lazy val SPARE = (&amp;quot;/&amp;quot;, () =&amp;gt; 10 - rollScoreAt(index - 1) + if_(index &amp;lt; 19, rollScoreAt(index + 1)))
		lazy val STRIKE = (&amp;quot;X&amp;quot;, () =&amp;gt; 10 + if_(index + numberOfPreviousStrikes() &amp;lt; 18,
                                               rollScoreAt(index + 1) + rollScoreAt(index + 2)))

		def numberOfPreviousStrikes() = rolls.mkString.take(index).count(_ == &#39;X&#39;)

		def rollScoreAt(index: Int): Int =
			rolls(index) match {
				case STRIKE._1 =&amp;gt; 10
				case SPARE._1  =&amp;gt; 10 - rolls(index - 1).toInt
				case MISS      =&amp;gt; 0
				case pins      =&amp;gt; pins.toInt
			}

		rolls.drop(index) match {
			case STRIKE._1 :: _ =&amp;gt; totalScore(rolls, index + 1, score + STRIKE._2())
			case SPARE._1 :: _  =&amp;gt; totalScore(rolls, index + 1, score + SPARE._2())
			case MISS :: _      =&amp;gt; totalScore(rolls, index + 1, score)
			case n :: _         =&amp;gt; totalScore(rolls, index + 1, score + n.toInt)
			case List()         =&amp;gt; score
		}
	}

	private def if_(condition: Boolean, ifTrue: =&amp;gt; Int): Int = if (condition) ifTrue else 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/sandromancuso/bowling_kata_scala&#34;&gt;Sandro&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;fun-passion-and-respect&#34;&gt;Fun, passion, and respect&lt;/h2&gt;

&lt;p&gt;Having fun at work, be surrounded by passionate and talented craftsmen, the respect we have for each other, and the willingness to learn and share, are some of the things I love the most about the Codurance’s culture. What started as apprentices practicing with a kata transformed into a great way to learn and share knowledge among craftsmen and apprentices. Some of our craftsmen and apprentices are also working on their solutions in Kotlin, Haskell, Java, and C#.&lt;/p&gt;

&lt;p&gt;As among ourselves we will probably never agree which one we prefer, we will let you choose which one you like the most. :)&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&#34;https://twitter.com/mashooq&#34;&gt;Mash&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/pedromsantos&#34;&gt;Pedro&lt;/a&gt; for the Clojure and F# implementations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>We did it wrong, but not all was in vain</title>
      <link>http://codurance.com/blog/we-did-it-wrong-but-not-in-vain/</link>
      <pubDate>Tue, 12 Apr 2016 00:24:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/we-did-it-wrong-but-not-in-vain/</guid>
      <description>&lt;p&gt;Yes, there was over engineering. Loads of it. Back in the mid 90s, when I started my career as a developer, the goal was to become an architect. No serious developer would dare writing a single line of code before selecting our preferred design patterns—we would then decide how the business requirements would fit into them. Yes, we would first come up with our architecture, then our macro design (layers) and domain model (including UML diagrams), and then we would think about the business requirements and detailed use cases. Yes, user stories were not really a thing back then. We had long use cases with a basic flow and many alternative flows.&lt;/p&gt;

&lt;p&gt;The 90s were an interesting period to be a developer. We finally had the Internet and a few academic papers on structured design from 70s and 80s became available to us. We also had a few books focusing on Object-Oriented Programming, still a novelty in many places.&lt;/p&gt;

&lt;p&gt;I still remember the countless months we spent drawing class, sequence, component, deployment, and many other diagrams, trying to come up with the best design for the software that one day we would build. We built some prototypes as well, so I can’t say we were not coding or experimenting during the &lt;em&gt;elaboration phase&lt;/em&gt;. All the learnings from the prototypes would be fed back into our diagrams, of course.&lt;/p&gt;

&lt;p&gt;Besides the internal design, in the 90s we had an explosion of distributed systems as well. We had CORBA and DCOM. We had client/server and multi-tier architecture. We learnt about single point of failure when using databases as a communication point between applications. Yes, we had nasty problems with that. We learnt how to create “services”—SOA was emerging as an architectural concept. We learnt how to think about scalability and security. Many projects outside governments and banks were also becoming very large and complex.&lt;/p&gt;

&lt;p&gt;Creating a great design was the goal for most passionate software developers; it was also the path to become an architect and career evolution. We had to study and be good at software design. We had to understand in depth principles of structured and object-oriented design. We had to understand principles of distributed system. We had to understand in depth all levels of cohesion and coupling. We had to understand covariance and contravariance. We had to learn how to design components boundaries including their contracts and invariant. We had to learn to how to understand verbs and nouns, the language of the business, and map them into software. We would never pass a job interview without knowing how to model data in our relational databases, and mostly important, how to make our queries perform well. We had to define our proprietary protocols in the right granularity in order to make it easier for other systems to consume them and at the same time address I/O and bandwidth concerns. Yes, we spent a lot of time doing that.&lt;/p&gt;

&lt;p&gt;Software development in the 90s was all about design and architecture. And yes, it had to be done with UML.&lt;/p&gt;

&lt;p&gt;But although we learnt how to design, we failed in many other aspects. We didn’t deliver fast enough. In fact, in some projects we didn’t deliver anything at all. Most of the times, all the thinking we did trying to create a perfect design was completely wasted due to lack of quick feedback and our inability to cope with rapid business evolution. I still remember the huge spreadsheets we used to control change requests even before we had any code written. Yes, we screwed up big time. Many times.&lt;/p&gt;

&lt;p&gt;Fast-forwarding 20 years, some of us understood what we were doing was wrong. We then incorporated Agile, Lean, and many other principles and practices into the way we work. We incorporated many new design and architecture techniques into our tool kit. We incorporated new technologies. We incorporated different ways to collaborate with the business and also how to structure our teams. We learned that although design was important, nothing was more important than continuously delivering software. We learnt how to get feedback and iterate. We learnt we were responsible to test our own code. We learnt we had to support our software in production. We learnt the value of creating prototypes and throwing them away. We learnt the value of experimentation. But we also learnt we didn’t need to throw away all the design skills we acquired over the years in order to work in a better way. We didn’t need to discard all the great work done before and during our time, mainly around software design during the 70s, 80s and 90s. But the most important lesson we learnt was that context is king and that software design is all about trade offs. Design is pointless without delivery. But can we keep delivering code without a solid design foundation? I don’t think so.&lt;/p&gt;

&lt;p&gt;One of the biggest problems I see today in software design is binary thinking. If X is bad, than Y must be good. If X worked for company A, than it will also work for us. If a well-known person said something in a 45-minute talk in a conference or we found something written in a blog, it must be true. Always.&lt;/p&gt;

&lt;p&gt;Another common mistake caused by binary thinking is the belief that all features in a software project have the same degree of complexity and a single design choice will fit them all. But the truth is, some features are quite simple, others very complex, and many others are somewhere in between. Sometimes the complexity is found in the implementation; other times it is found on understanding and modelling the domain. Sometimes the complexity is in understanding what we should be building. Other times the complexity is in the integration with other systems. Parts of the same feature can also vary a lot in complexity: some parts may be trivial and quickly implemented while others can be extremely complex and demand a lot thinking up front. Some features are shallow (very few lines of code) while others are deep (thousands of lines of code spread through different modules). Non-functional requirements can also make the implementation of simple features (business-wise) very complex. And the interesting thing is that all of that can be found within the same software project. So, if we agree that different features in a software project have different degrees of complexity and size, there is no way we can apply binary thinking into software design—no single design approach will ever work in a reasonably complex software project.&lt;/p&gt;

&lt;p&gt;We live in a world where information is easily and quickly accessible. One search on Google and we can find many ready-made solutions to our problems. My fear is that, as an industry, we are losing the ability to think. We are losing the ability to research and make our own choices. More and more we are looking for a ready-made recipe. A shortcut. I call them a “Stack Overflow solution.”&lt;/p&gt;

&lt;p&gt;It makes me sad that, to some people, software design is synonymous of over-engineering. It also makes me sad to see that &amp;ldquo;no design at all” is becoming synonymous of Agile, Lean Startup, and fast delivery. I don’t think the originators and main proponents of good software design, Agile, and Lean principles ever meant that. Over-engineering is bad, but so is no design at all. Simple doesn’t mean crap. Simple means just enough design for what we know today, but not less. Paraphrasing Einstein, software design should be made as simple as possible, but not simpler. Or another way of putting it: code must be well-designed but not over-designed.&lt;/p&gt;

&lt;p&gt;After interviewing a lot of developers and reviewing a lot of code in the past few years, my main concern is that we are developing a hacker culture. Many developers I met who have been in the industry for less than a decade, have very little knowledge of good software design. They will claim otherwise, of course. If you think I’m exaggerating, ask developers in your team to explain cohesion and its different levels. Ask them about connascence, covariance and contravariance. Ask them about different degrees and types of coupling. Ask them about design by contract and invariant. For those that have heard about SOLID principles ask them where the SOLID principles came from. Many developers today say design patterns are bad. Ask them to describe some patterns, their differences, and when they should or should not be applied. Ask them about the different pattern classifications. Ask them about the difference between a Bridge, Adapter, and Mediator. What problem a Visitor is supposed to solve? Ask them what is a Memento? If they can’t explain that, how can they say patterns are bad?&lt;/p&gt;

&lt;p&gt;Many developers today are not aware of the software design foundation laid during the 70s, 80s, and 90s. Others prefer to ignore it: &lt;em&gt;That is over-engineering and they don’t need that.&lt;/em&gt; That’s fine, I can respect that. But why do we still have software that sucks then? Is the software being produced today really better than the software being produced 20 years ago? Why developers still struggle to design code with TDD? Why are we still talking about legacy code? For me, legacy code is synonymous of code that is badly designed, hence difficult to test and maintain.&lt;/p&gt;

&lt;p&gt;By no means I’m defending over-engineering or wasting time drawing diagrams in UML. What I’m trying to say is that at the same time I would never spend hours to design classes inside my core domain up front, I would also not try to build an enterprise application, one test at a time, without thinking about its overall design before start coding. Design is essential for software development. If I’m building an application that will live in an ecosystem alongside many applications, or with heavy non-functional requirements, or that needs to comply to regulations, yes, of course I would put a lot of thought about its overall structure (macro-design) before I start coding but I would still develop its features (“micro-level”) one test at a time. Design happens at all levels: from up-front at the architectural level to just-in-time at micro level as part of my TDD flow. Decide how much to design is a skill—it&amp;rsquo;s all about finding the &lt;a href=&#34;http://codurance.com/2015/06/17/inflection-point/&#34;&gt;inflection point&lt;/a&gt;, subject I covered on a &lt;a href=&#34;http://codurance.com/2015/06/17/inflection-point/&#34;&gt;previous blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Software design is one of the most important skills in software development. Good design enables developers to collaborate, business features to be added and changed frequently, and reliable test automation to be done. With experience, we learn how to quickly identify problems and decide the amount of time we should spend on it. We also learn that most design decisions should be made in the last responsible moment, that means, we try not to commit to a design too early, while we don’t know enough about the problem.&lt;/p&gt;

&lt;p&gt;And that’s why I say that not everything we did in the 90s was in vain. Although we over-engineered every thing and didn’t deliver too much, we learnt how to design. We learnt how to think for ourselves. We learnt how research. We learnt how to reason about trade offs. It took us a while but we also learnt how to avoid binary thinking and refrain our excitement with new trends. The combination of a strong software design foundation with Agile and Lean principles and practices, put us in a much better position today not only to deliver software fast but also to deliver software continuously.&lt;/p&gt;

&lt;p&gt;Our goal is to enable business agility and that can be achieved through software that can be continuously deployed into production. Deploy software to production once is not that hard but to deploy software to production multiple times a day and keep this rhythm for months if not years, well, that’s not so simple. We need a lot of discipline and engineering to achieve continuous delivery, which makes software design and TDD two of the most important technical disciplines we have to master.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first walking skeleton</title>
      <link>http://codurance.com/blog/My-first-walking-skeleton/</link>
      <pubDate>Wed, 26 Aug 2015 09:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/My-first-walking-skeleton/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;A Walking Skeleton is a tiny implementation of the system that performs a small end-to-end function. It need not use the final architecture, but it should link together the main architectural components. The architecture and the functionality can then evolve in parallel.
&lt;footer&gt; &lt;cite&gt;&lt;a href=&#34;http://alistair.cockburn.us/index.php/Walking_skeleton&#34;&gt;Alistair Cockburn&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the goals I had for my apprenticeship was to learn more about Continuous Integration and Continuous Deployment. Building my own little pet project fit in nicely with that, and I wanted to try a couple of new things with it.
A concept I was very curious about was the &lt;a href=&#34;http://blog.codeclimate.com/blog/2014/03/20/kickstart-your-next-project-with-a-walking-skeleton/&#34;&gt;Walking Skeleton&lt;/a&gt;. I read about it in &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt; and as I understood it, it was a way to test-drive my architecture and reduce risk in the beginning of my project.&lt;/p&gt;

&lt;h3 id=&#34;taking-on-the-challenge&#34;&gt;Taking on the challenge&lt;/h3&gt;

&lt;p&gt;I had started the project in &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; and used &lt;a href=&#34;http://www.scala-sbt.org/&#34;&gt;SBT&lt;/a&gt; as a build tool, both of which I&amp;rsquo;d never used before in a project. As I had limited experience with functional programming, I watched the videos from the Coursera Lectures on &lt;a href=&#34;https://www.coursera.org/course/progfun&#34;&gt;Functional Programming Principles in Scala&lt;/a&gt;. Solving some of the riddles there was quite fun! Unfortunately, that didn&amp;rsquo;t help with the hurdles and hiccups of using SBT and a couple of plugins that didn&amp;rsquo;t play well with the newest Scala version. Quite a couple of times I got stuck and had to ask my mentor for help. But pairing with him always brought a great deal of motivation and progress.&lt;/p&gt;

&lt;h3 id=&#34;making-the-first-steps&#34;&gt;Making the first steps&lt;/h3&gt;

&lt;p&gt;The next task was to decide how to get the integration up and running quickly.
I first set up a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/%22Hello,_World!%22_program&#34;&gt;Hello World&lt;/a&gt; and deploying it to &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-scala#set-up&#34;&gt;Heroku&lt;/a&gt;. I decided to pass on using play and use as few plugins and frameworks as possible.&lt;/p&gt;

&lt;p&gt;My initial steps were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a &lt;a href=&#34;https://github.com/codurance/gr8craft&#34;&gt;repository&lt;/a&gt; for my project&lt;/li&gt;
&lt;li&gt;open a console in the directory of the local clone of the repository&lt;/li&gt;
&lt;li&gt;install SBT with &lt;code&gt;brew install sbt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create a &lt;a href=&#34;https://github.com/codurance/gr8craft/tree/7bcf1bfb42ec87cfddeb48cf8c5160b4834adbd4&#34;&gt;simple HelloWorld and SBT config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;install Heroku with &lt;code&gt;brew install heroku&lt;/code&gt; and &lt;code&gt;heroku login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create the app on Heroku with &lt;code&gt;heroku create&lt;/code&gt; (I renamed it later)&lt;/li&gt;
&lt;li&gt;deploy with &lt;code&gt;git push heroku&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;show the log with &lt;code&gt;heroku logs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, not everything worked as intended from the start. As you can see from my commit history, it took a few tries and pairing with my mentor to get the app really working and the Hello World output to show up in the logs.
 SBT was particularly challenging, as it was so unfamiliar. Once I got it working on my machine, it was easy to deploy and run on Heroku, though.&lt;/p&gt;

&lt;h3 id=&#34;defining-the-domain&#34;&gt;Defining the domain&lt;/h3&gt;

&lt;p&gt;The idea I wanted to implement was a &lt;a href=&#34;https://twitter.com/gr8craft&#34;&gt;small bot&lt;/a&gt; helping developers to remember good design principles while they were reading twitter. I registered a twitter account and, with the help of my mentor, decided on it&amp;rsquo;s first feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Feature: Hourly Article Tweet
  As a follower of gr8craft
  I want hourly tweets to software design articles in my timeline
  so that they inspire me to do better design
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I described the initial domain:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;Clock&amp;quot; reaches &amp;quot;Full Hour&amp;quot; triggers &amp;quot;Tweet&amp;quot; contains &amp;quot;Link&amp;quot; points to &amp;quot;Article&amp;quot; is stored in &amp;quot;Shelf&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I wrote an acceptance test for the feature:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Scenario: Hour reached
    Given the next article on the shelf about &amp;quot;DDD&amp;quot; can be found at &amp;quot;http://t.co/lqJDZlGcJE&amp;quot;
    When the hour is reached
    Then gr8craft tweets &amp;quot;Your hourly recommended article about DDD: http://t.co/lqJDZlGcJE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test-driving-the-skeleton&#34;&gt;Test-driving the skeleton&lt;/h3&gt;

&lt;p&gt;I set up my first test with &lt;a href=&#34;https://cucumber.io/&#34;&gt;Cucumber&lt;/a&gt;, tweeting against the real Twitter API using &lt;a href=&#34;http://twitter4j.org&#34;&gt;twitter4j&lt;/a&gt; and asserting that the last tweet was actually the expected one. I set up a testing account especially for this purpose. Before each test run, I clean up the timeline so as not to run into the problem of having twitter reject duplicated tweets. Another problem was that Twitter shortened the link I posted, making it hard to test if it was actually the link I was expecting. By using the shortened version directly I avoided setting up a complicated assertion to see that the shortened version was redirecting to the same location.
The ApplicationRunner was developed test-driven using mocks.&lt;/p&gt;

&lt;p&gt;Initially, I didn&amp;rsquo;t know how the scheduling would work. That&amp;rsquo;s why I started with a fake scheduler that would use the real clock to set up a trigger for new tweets. When I got a little further in I realized that using a scheduled thread executor was much simpler and easier to tests, so I changed that.&lt;/p&gt;

&lt;p&gt;I implemented the application and went on to figure out the scheduling. My first refactoring was ahead - I started by test-driving the new way of scheduling: updating the  &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/9ec1e4b8a479a4055e373c6e7295abdc08edd22e&#34;&gt;ScheduledExecutor&lt;/a&gt; and using &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/9bab89bc5768b4803b1c797d5c869863a56aea84&#34;&gt;TweetRunner&lt;/a&gt; to do the actual work. I wanted to test the scheduler, so I made the time interval configurable and used Scala Test&amp;rsquo;s &lt;a href=&#34;http://doc.scalatest.org/2.0/index.html#org.scalatest.concurrent.Eventually$&#34;&gt;Eventually&lt;/a&gt; to give it a few tries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(classOf[JUnitRunner])
class ScheduledExecutorShould extends FunSuite with Matchers with Eventually with BeforeAndAfter with OneInstancePerTest {

  var wasScheduled = false
  val scheduler = new ScheduledExecutor(NANOSECONDS, new Runnable {
    override def run(): Unit = wasScheduled = true
  })

  after(scheduler.shutdown())

  test(&amp;quot;schedule the runnable&amp;quot;) {
    scheduler.schedule()

    ensureRunnableWasScheduled
    scheduler.isShutDown shouldBe false
  }

  test(&amp;quot;shutdown the runnable&amp;quot;) {
    scheduler.schedule()
    ensureRunnableWasScheduled

    scheduler.shutdown()

    scheduler.isShutDown shouldBe true
  }

  def ensureRunnableWasScheduled: Unit = {
    eventually(timeout(5.seconds), interval(1.seconds)) {
      wasScheduled shouldBe true
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that was left is to change my Cucumber steps and application to use the new Scheduling mechanism and TweetRunner. The tests were green and I could see the result on the &lt;a href=&#34;https://twitter.com/gr8crafttest&#34;&gt;testing account&lt;/a&gt;. Success!&lt;/p&gt;

&lt;h3 id=&#34;making-it-run-properly&#34;&gt;Making it run properly&lt;/h3&gt;

&lt;p&gt;To make the new application run on Heroku, I needed to &lt;a href=&#34;http://twitter4j.org/en/configuration.html&#34;&gt;configure the twitter4j environment variables&lt;/a&gt; there. I didn&amp;rsquo;t want to publish them by adding them to the github repository and had used a file to configure them locally.
Heroku allows for easy configuration of environment variables via the website or the command line. I chose the latter and configured them by simply executing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku config:add oauth.consumerKey=**********
heroku config:add oauth.consumerSecret=************
heroku config:add oauth.accessToken=**************************************************
heroku config:add oauth.accessTokenSecret=******************************************
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logging-the-essentials&#34;&gt;Logging the essentials&lt;/h3&gt;

&lt;p&gt;It is important to log the interaction with external resources like Twitter and the Scheduler, and to record errors in the right place. If you wait to do this for too long, it can make maintaining your application a real pain. I already benefitted from having the logging to localize problems.&lt;/p&gt;

&lt;p&gt;I introduced &lt;a href=&#34;http://slf4s.org/&#34;&gt;slf4s&lt;/a&gt; and &lt;a href=&#34;http://logback.qos.ch/&#34;&gt;logback&lt;/a&gt; into the mix. This allowed me to easily log from any Scala class by using the &lt;em&gt;Logging&lt;/em&gt; trait:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class TwitterApiService(twitter: Twitter) extends TwitterService with Logging {
  ...
  def sendToTwitter(tweet: String): Unit = {
    log.info(&amp;quot;sending tweet to Twitter: &amp;quot; + tweet)

    twitter.updateStatus(tweet)

    log.info(&amp;quot;successfully tweeted &amp;quot; + tweet)
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since twitter4j was generating a lot of noise communicating with the Twitter API, I had to create a logback configuration file and set it to a different logging level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;appender name=&amp;quot;STDOUT&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;
        &amp;lt;encoder&amp;gt;
            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;
        &amp;lt;/encoder&amp;gt;
    &amp;lt;/appender&amp;gt;

    &amp;lt;logger name=&amp;quot;twitter4j&amp;quot; level=&amp;quot;INFO&amp;quot;/&amp;gt;

    &amp;lt;root level=&amp;quot;debug&amp;quot;&amp;gt;
        &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;/&amp;gt;
    &amp;lt;/root&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-up-continuous-integration&#34;&gt;Setting up Continuous Integration&lt;/h3&gt;

&lt;p&gt;There were a few tasks left to making the whole thing run not only by manually running the cucumber test in the IDE. I noticed not all the tests were executing in the IDE. That&amp;rsquo;s because it was looking for JUnit tests. This was an easy fix by adding &lt;code&gt;@RunWith(classOf[JUnitRunner])&lt;/code&gt;. Now to make the cucumber tests run when I executed &lt;code&gt;sbt test&lt;/code&gt; on the console, I needed to add &lt;a href=&#34;https://github.com/sbt/junit-interface&#34;&gt;JUnit Interface&lt;/a&gt; to my SBT dependencies. I had decided against using a SBT Cucumber plugin, as the ones I found were incompatible with the newest version of Scala.&lt;/p&gt;

&lt;p&gt;To set up Continuous Integration, I installed &lt;code&gt;brew install travis&lt;/code&gt; and created a simple &lt;a href=&#34;http://docs.travis-ci.com/user/languages/scala/&#34;&gt;Travis&lt;/a&gt; configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;language: scala
scala:
- 2.11.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fortunately, Travis can use SBT to automatically build and test without further configuration. The only thing I don&amp;rsquo;t like is that all dependencies have to be loaded again for every build, which makes it kind of slow.
Travis needed to know the authentication for the twitter4j configuration too. I thought this would be easy to do just by encrypting the variables in &lt;a href=&#34;http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables&#34;&gt;travis.yml&lt;/a&gt;.
However, since Travis uses bash, it doesn&amp;rsquo;t allow for dots in the variable name. I created a workaround by setting custom environment variables and using them to programmatically configure twitter4j:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;def createTwitter(suffix: String = &amp;quot;&amp;quot;): Twitter = {
   val configuration = new ConfigurationBuilder()
     .setDebugEnabled(true)
     .setOAuthConsumerKey(readEnvironmentVariable(suffix, &amp;quot;twitter4jconsumerKey&amp;quot;))
     .setOAuthConsumerSecret(readEnvironmentVariable(suffix, &amp;quot;twitter4jconsumerSecret&amp;quot;))
     .setOAuthAccessToken(readEnvironmentVariable(suffix, &amp;quot;twitter4jaccessToken&amp;quot;))
     .setOAuthAccessTokenSecret(readEnvironmentVariable(suffix, &amp;quot;twitter4jaccessTokenSecret&amp;quot;))
     .build()

   new TwitterFactory(configuration).getInstance()
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The suffix is used so that I can have a different configuration for the production code and the tests, which run on a different Twitter account. Of course, I had to set these variables in my local command line, IDE and on Heroku as
well.&lt;/p&gt;

&lt;p&gt;I added the variables to the Travis config automatically via&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;travis encrypt twitter4jconsumerKey4testing=********** --add env.matrix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still, the tests were failing on Travis since the retry timeout was not high enough. Once the problem was found, it was easy to fix and the build was finally green.&lt;/p&gt;

&lt;h3 id=&#34;deploying-to-heroku-automatically&#34;&gt;Deploying to Heroku automatically&lt;/h3&gt;

&lt;p&gt;That was surprisingly easy! I just used the &lt;a href=&#34;http://docs.travis-ci.com/user/deployment/heroku/&#34;&gt;wizard provided by Travis&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;travis setup heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I answered three simple questions and it automatically added the &lt;a href=&#34;https://github.com/codurance/gr8craft/commit/2570086f4ba9927f956141a552bc64cd932b10dd&#34;&gt;necessary information&lt;/a&gt; to my travis.yml. It just worked!&lt;/p&gt;

&lt;h3 id=&#34;configuring-alternative-step-definitions-for-cucumber&#34;&gt;Configuring alternative step definitions for Cucumber&lt;/h3&gt;

&lt;p&gt;Since I am running my Cucumber tests via JUnit, I could configure them with options to provide a location for the StepDefinitions. This way, I could use the same scenario definition with both the real Twitter API and a mocked version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(classOf[Cucumber])
@CucumberOptions(glue = Array(&amp;quot;gr8craft.features&amp;quot;))
class CucumberFeatures {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;coming-to-a-conclusion&#34;&gt;Coming to a conclusion&lt;/h3&gt;

&lt;p&gt;My next goal is to introduce a database with multiple articles, so that the bot will provide value to followers. I will then expand the domain and move along to the next feature, which will allow the bot to answer to mentions.&lt;/p&gt;

&lt;p&gt;One of the lessons I learned over the last few weeks was (again) the value of pairing and code reviews. When I was stuck, pairing with my mentor or asking him for advice helped me instantly. He could see things from a different perspective, cover my blind spots, give encouragement and ideas and provide insights. I am very grateful for this support.&lt;/p&gt;

&lt;p&gt;With this approach, I quickly found that my idea of how scheduling would work was off and I could easily refactor to cater for it. And I figured out the quirks of setting up the automatic testing, integration and deployment, which will pay off with every change I make.&lt;/p&gt;

&lt;p&gt;I think the Walking Skeleton approach is a lot of effort at the start and it takes some time to see it work. But it&amp;rsquo;s worth it, but once it runs you get a very rewarding feeling. And you reduce the risk of something going wrong later on when you don&amp;rsquo;t expect it and didn&amp;rsquo;t plan for it.&lt;/p&gt;

&lt;p&gt;I encourage you to try a Walking Skeleton when you start your next project!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How katas can help you learn</title>
      <link>http://codurance.com/blog/How-katas-can-help-you-learn/</link>
      <pubDate>Tue, 18 Aug 2015 09:35:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/How-katas-can-help-you-learn/</guid>
      <description>&lt;p&gt;In the last couple of weeks I have spent my time doing katas to improve my Objective-C. As you may remember, I had an issue, &lt;a href=&#34;http://wp.me/p4i8Xl-7h&#34;&gt;that you can revisit here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve learned a lot from other katas too: for instance the RomanNumerals kata&amp;hellip; You&amp;rsquo;d may think it&amp;rsquo;s a simple task, that you wan&amp;rsquo;t learn much from. It&amp;rsquo;s a simple algorithm, a good exercise for your red -&amp;gt; green -&amp;gt; refactoring cycle. So nothing new will come from here&amp;hellip;  Wasn&amp;rsquo;t I wrong!!!!!&lt;/p&gt;

&lt;p&gt;First I created some tests. Next I implemented the kata and refactored. Whilst I was refactoring, I decided to use NSDictionary to map from a decimal to a roman number. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;NSDictionary *mapper = @{@10: @&amp;quot;X&amp;quot;, @5:@&amp;quot;V&amp;quot;, @1: @&amp;quot;I&amp;quot;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s when I discovered that the NSDictionary does not guarantee insertion order. What???? So my keys were all mixed up&amp;hellip; And I needed them to maintain their order!!!! That&amp;rsquo;s ok! I decided to create a class to map between decimals and romans. That&amp;rsquo;s cool! Done! In the converter I just added a private property of type NSMutableArray. In it&amp;rsquo;s constructor I added the class to the array for all elements I needed. But now I have to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;[[DecimalToRomanMapper alloc] initWithDecimal: andRoman];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for every entry in the mapper. God!!!! So much work! Maybe that&amp;rsquo;s why developers solve problems. They definitely don&amp;rsquo;t like to do things by hand so they automate everything.
So I decided that I could create a factory method. I really didn&amp;rsquo;t know how to create this factory method, so I just looked in Apple docs. Here is another thing i learned. Even thought I knew that it existed, I never used it because I never needed to. But as I was in learning mode, I think I was more interested in finding a different way to do it. When you are at a client, you don&amp;rsquo;t always have the opportunity to experiment with new things. Having this time to learn new ways of doing things is really rewarding. So here is my class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;@interface DecimalToRomanMapper : NSObject

@property (nonatomic, assign, readonly) NSInteger decimal;
@property (nonatomic, copy, readonly) NSString* roman;

+ (instancetype)mappDecimal:(NSInteger)decimal toRoman:(NSString*)roman;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s even more readable then the initialiser. And here is how I initialised it in my converter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;   self.mapper = @[
                      [DecimalToRomanMapper mappDecimal:1000 toRoman:@&amp;quot;M&amp;quot;]
                  ];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So my class was looking pretty but then I look at my test class&amp;hellip;it wasn&amp;rsquo;t good:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;...

- (void)testShouldConvertFourToIV {
    NSString *result = [converter convert:4];
   XCTAssertTrue([result isEqualToString:@&amp;quot;IV&amp;quot;]);
}

...

- (void)testShouldConvert1000ToM {
   NSString *result = [converter convert:1000];
    XCTAssertTrue([result isEqualToString:@&amp;quot;M&amp;quot;]);
}

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So many tests. They remind me of the DRY principle. I really don&amp;rsquo;t like to repeat myself. It&amp;rsquo;s like a broken CD that doesn&amp;rsquo;t move from the same music track&amp;hellip; I&amp;rsquo;ve done the same kata in C# and my test class was all parameterised and I really liked it. After all this is a simple kata, right? ;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;(C# code)
[TestCase(1, &amp;quot;I&amp;quot;)]
[TestCase(2, &amp;quot;II&amp;quot;)]
[TestCase(3, &amp;quot;III&amp;quot;)]
[TestCase(4, &amp;quot;IV&amp;quot;)]
[TestCase(5, &amp;quot;V&amp;quot;)]
[TestCase(9, &amp;quot;IX&amp;quot;)]
[TestCase(10, &amp;quot;X&amp;quot;)]
[TestCase(40, &amp;quot;XL&amp;quot;)]
[TestCase(50, &amp;quot;L&amp;quot;)]
[TestCase(90, &amp;quot;XC&amp;quot;)]
[TestCase(100, &amp;quot;C&amp;quot;)]
[TestCase(400, &amp;quot;CD&amp;quot;)]
[TestCase(900, &amp;quot;CM&amp;quot;)]
[TestCase(1000, &amp;quot;M&amp;quot;)]
[TestCase(2499, &amp;quot;MMCDXCIX&amp;quot;)]
[TestCase(3949, &amp;quot;MMMCMXLIX&amp;quot;)]
public void convertDecimalToRoman(int decimalNumber, string expectedRomanNumber)
{
     var converter = new DecimalToRomanConverter();

      string result = converter.Convert(decimalNumber);

    Assert.AreEqual(expectedRomanNumber, result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well wouldn&amp;rsquo;t it be nice if I could have that in Objective-C? Well, after some help from &lt;a href=&#34;https://twitter.com/singsalad&#34;&gt;Franzi&lt;/a&gt; I found a little &lt;a href=&#34;https://github.com/michalkonturek/XCParameterizedTestCase&#34;&gt;library&lt;/a&gt; that does it. You install the pod, you inherit from it and you create an array of inputs and expected values like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;+ (NSArray *)testCaseData {
    return @[
             [XCTestCaseData createWithInputValue:@1 withExpectedValue:@&amp;quot;I&amp;quot;]
            ];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you just have to use the properties input and expected. So my test class looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;@interface DecimalToRomanConverterTests : XCParameterizedTestCase

@end

@implementation DecimalToRomanConverterTests

+(NSArray *)testCaseData {
    return @[
             [XCTestCaseData createWithInputValue:@1 withExpectedValue:@&amp;quot;I&amp;quot;],
             [XCTestCaseData createWithInputValue:@2 withExpectedValue:@&amp;quot;II&amp;quot;],
             [XCTestCaseData createWithInputValue:@3 withExpectedValue:@&amp;quot;III&amp;quot;],
             [XCTestCaseData createWithInputValue:@5 withExpectedValue:@&amp;quot;V&amp;quot;],
             [XCTestCaseData createWithInputValue:@8 withExpectedValue:@&amp;quot;VIII&amp;quot;],
             [XCTestCaseData createWithInputValue:@10 withExpectedValue:@&amp;quot;X&amp;quot;],
             [XCTestCaseData createWithInputValue:@18 withExpectedValue:@&amp;quot;XVIII&amp;quot;],
             [XCTestCaseData createWithInputValue:@4 withExpectedValue:@&amp;quot;IV&amp;quot;],
             [XCTestCaseData createWithInputValue:@9 withExpectedValue:@&amp;quot;IX&amp;quot;],
             [XCTestCaseData createWithInputValue:@50 withExpectedValue:@&amp;quot;L&amp;quot;],
             [XCTestCaseData createWithInputValue:@100 withExpectedValue:@&amp;quot;C&amp;quot;],
             [XCTestCaseData createWithInputValue:@500 withExpectedValue:@&amp;quot;D&amp;quot;],
             [XCTestCaseData createWithInputValue:@2499 withExpectedValue:@&amp;quot;MMCDXCIX&amp;quot;],
             [XCTestCaseData createWithInputValue:@3949 withExpectedValue:@&amp;quot;MMMCMXLIX&amp;quot;]
             ];
}

-(void)testShouldConvertADecimalIntoARoman {

    DecimalToRomanConverter *converter = [[DecimalToRomanConverter alloc]init];
    NSString* result = [converter convert:[self.input integerValue]];

    XCTAssertEqualObjects(self.expected, result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is my final solution: &lt;a href=&#34;https://github.com/ananogal/RomanNumeralsKata&#34;&gt;RomanNumerals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So please don&amp;rsquo;t underestimate what you can learn from a kata. They are a good opportunity to stretch your knowledge and add some more to it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to start doing TDD in iOS</title>
      <link>http://codurance.com/blog/how-to-start-doing-tdd-in-iOS/</link>
      <pubDate>Mon, 13 Jul 2015 12:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/how-to-start-doing-tdd-in-iOS/</guid>
      <description>&lt;p&gt;I like to do apps. As a newbie TDD developer, I&amp;rsquo;ve made my apps with tests but not driven by tests. I want to change that. I&amp;rsquo;m learning to be a Craftsman, so TDD is an essential technique to know. It&amp;rsquo;s your main tool. At Codurance it&amp;rsquo;s unthinkable that you could code without doing TDD. That&amp;rsquo;s one of the things that you learn in our apprenticeship program: to be able to do TDD without thinking about it and feel as if it&amp;rsquo;s natural: as you breath to survive you do TDD to code.&lt;/p&gt;

&lt;p&gt;So today I feel pretty much confident that I&amp;rsquo;m able to do TDD (at least in C#), and so I&amp;rsquo;ve come back to my apps and I&amp;rsquo;ve decided to change them to apply all the good practices that I&amp;rsquo;ve learned in my first month at Codurance.&lt;/p&gt;

&lt;p&gt;Oh God! What have I done! It&amp;rsquo;s amazing how you go back now, look at your code and think: What that hell was I doing? How could I write such code? I really just wanted to delete everything and start again&amp;hellip; Well, we all know that that is not really possible when you have an app published and selling and you have users that send you requests for new features&amp;hellip;&lt;/p&gt;

&lt;p&gt;So what could I do? I thought it would be a good idea to refactor all my code, and at least make it a little bit cleaner, with unit tests everywhere rather than just in the main features (Oh God! I know!!!! It&amp;rsquo;s horrible&amp;hellip;) All the horrible things that they say to you that you will find in the real world when you finish the apprenticeship have come true when looking to at own code, so frustating!!!! So to be proficient in doing refactoring in iOS, I must be able to do TDD correctly, this means not even thinking about it when I code in Objective-C. That was not the stage that I was at&amp;hellip; So, what can I do?&lt;/p&gt;

&lt;p&gt;I decided to start were I started at Codurance: to do katas, one after another, get the logic of the language, solve small problems first, and then go to bigger katas where you can apply your OOP knowledge. I&amp;rsquo;ve googled for katas in Objective-C and I&amp;rsquo;ve got a lot of links: I was thrilled! iOS developers are sharing their katas. Then I followed the links&amp;hellip; Most of then send me to a &amp;ldquo;This webpage is not available&amp;rdquo; page. Even the Objective-C version of String calculator by &lt;a href=&#34;http://osherove.com/tdd-kata-1/&#34;&gt;Roy Osherove&lt;/a&gt; is going to the same page&amp;hellip; And then I found a &lt;a href=&#34;http://www.screencast.com/t/CfaYvoCMHE&#34;&gt;screencast&lt;/a&gt; that is using iOS 5.5? We are already in beta for 9!!!&lt;/p&gt;

&lt;p&gt;Well I can just conclude that iOS developers don&amp;rsquo;t share their code! So let&amp;rsquo;s change that. Since we talked about the String Calculator, let&amp;rsquo;s start with this kata and see what we can do with it. I&amp;rsquo;ll do the beginner version. Here&amp;rsquo;s my attempt, found at &lt;a href=&#34;https://github.com/ananogal/StringCalculator&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Applying Transformation Priority Premise to Roman Numerals Kata</title>
      <link>http://codurance.com/blog/applying-transformation-priority-premise-to-roman-numerals-kata/</link>
      <pubDate>Mon, 11 May 2015 18:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/applying-transformation-priority-premise-to-roman-numerals-kata/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;As tests get more specific code gets more generic.&amp;rdquo; - Uncle Bob&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;tdd&#34;&gt;TDD&lt;/h2&gt;

&lt;p&gt;Often one of the doubts we have when developing software driven by tests is how to evolve code in small and steady paces guided by tests (baby steps). TDD looks deceptively easy and only when we get more experience do we recognize this. The three laws of TDD state:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You are not allowed to write any production code unless it is to make a failing unit test pass.&lt;/li&gt;
&lt;li&gt;You are not allowed to write any more of a unit test than is sufficient to fail; and compilation failures are failures.&lt;/li&gt;
&lt;li&gt;You are not allowed to write any more production code than is sufficient to pass the one failing unit test.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On this post I would like to concentrate on the third law.
On May 2013 Robert C. Martin AKA Uncle Bob wrote a seminal post titled &lt;a href=&#34;http://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&#34;&gt;&amp;ldquo;Transformation Priority Premise&amp;rdquo;&lt;/a&gt;. Go read it, I will wait here. Alternatively &lt;a href=&#34;https://vimeo.com/97516288&#34;&gt;watch&lt;/a&gt; him talk about it.&lt;/p&gt;

&lt;h2 id=&#34;what-is-this-post-about&#34;&gt;What is this post about?&lt;/h2&gt;

&lt;p&gt;I had to prepare a presentation on Transformation Priority Premise. I tried to document how I could use this technique to implement an algorithm. My objective was to implement it trying not to skip any of the transformations and moving through them in the order they are defined.&lt;/p&gt;

&lt;h2 id=&#34;transformation-priority-premise&#34;&gt;Transformation Priority Premise&lt;/h2&gt;

&lt;p&gt;The transformations list gives guidance on how to apply small transformations to the code under test in order to evolve it to a more generic implementation. We should try to avoid taking big leaps forward when a small transformation will do. Remember the third law of TDD: &amp;ldquo;You are not allowed to write any more production code than is sufficient to pass the one failing unit test.&amp;rdquo; &amp;ldquo;Transformations on the top of the list should be preferred to those that are lower. It is better (or simpler) to change a constant into a variable than it is to add an if statement. So when making a test pass, you try to do so with transformations that are simpler (higher on the list) than those that are more complex.&amp;rdquo;
On the table below you can find the transformations list.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;({} -&amp;gt; nil) no code at all-&amp;gt;code that employs nil&lt;/li&gt;
&lt;li&gt;(nil -&amp;gt; constant)&lt;/li&gt;
&lt;li&gt;(constant -&amp;gt; constant+) a simple constant to a more complex constant&lt;/li&gt;
&lt;li&gt;(constant -&amp;gt; scalar) replacing a constant with a variable or an argument&lt;/li&gt;
&lt;li&gt;(statement -&amp;gt; statements) adding more unconditional statements.&lt;/li&gt;
&lt;li&gt;(unconditional -&amp;gt; if) splitting the execution path&lt;/li&gt;
&lt;li&gt;(scalar -&amp;gt; array)&lt;/li&gt;
&lt;li&gt;(array -&amp;gt; container)&lt;/li&gt;
&lt;li&gt;(statement -&amp;gt; recursion)&lt;/li&gt;
&lt;li&gt;(if -&amp;gt; while)&lt;/li&gt;
&lt;li&gt;(expression -&amp;gt; function) replacing an expression with a function or algorithm&lt;/li&gt;
&lt;li&gt;(variable -&amp;gt; assignment) replacing the value of a variable.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;roman-numbers&#34;&gt;Roman Numbers&lt;/h2&gt;

&lt;p&gt;If you are familiar with this kata please move to the next section implementation.&lt;/p&gt;

&lt;h3 id=&#34;definition&#34;&gt;Definition&lt;/h3&gt;

&lt;p&gt;Given a positive integer number (eg. 42) determine its Roman numeral representation as a String (eg &amp;ldquo;XLII&amp;rdquo;). You cannot write numerals like IM for 999.&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arabic number&lt;/th&gt;
&lt;th&gt;Roman numeral&lt;/th&gt;
&lt;th&gt;Arabic number&lt;/th&gt;
&lt;th&gt;Roman numeral&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;LX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;II&lt;/td&gt;
&lt;td&gt;70&lt;/td&gt;
&lt;td&gt;LXXX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;III&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;LXXX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;IV&lt;/td&gt;
&lt;td&gt;90&lt;/td&gt;
&lt;td&gt;XC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;V&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;VI&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;CC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;VII&lt;/td&gt;
&lt;td&gt;300&lt;/td&gt;
&lt;td&gt;CCC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;VIII&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;td&gt;CD&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;IX&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;600&lt;/td&gt;
&lt;td&gt;DC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;td&gt;XX&lt;/td&gt;
&lt;td&gt;700&lt;/td&gt;
&lt;td&gt;DCC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;XXX&lt;/td&gt;
&lt;td&gt;800&lt;/td&gt;
&lt;td&gt;DCCC&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;XL&lt;/td&gt;
&lt;td&gt;900&lt;/td&gt;
&lt;td&gt;CM&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;50&lt;/td&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Arabic number&lt;/th&gt;
&lt;th&gt;Roman numeral&lt;/th&gt;
&lt;th&gt;Thousands&lt;/th&gt;
&lt;th&gt;Cents&lt;/th&gt;
&lt;th&gt;Tenths&lt;/th&gt;
&lt;th&gt;Units&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;846&lt;/td&gt;
&lt;td&gt;DCCCXLVI&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;DCC&lt;/td&gt;
&lt;td&gt;XL&lt;/td&gt;
&lt;td&gt;VI&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;1999&lt;/td&gt;
&lt;td&gt;MCMXCIX&lt;/td&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;CM&lt;/td&gt;
&lt;td&gt;XC&lt;/td&gt;
&lt;td&gt;IX&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2008&lt;/td&gt;
&lt;td&gt;MMVIII&lt;/td&gt;
&lt;td&gt;MM&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;VIII&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;We start by writing the simplest unit test we can think of.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestFixture]
public class RomanConverterShould
{
    [TestCase(1, &amp;quot;I&amp;quot;)]
    public void ConvertNumberToRoman(int number, string expected)
    {
        var romanNumeral = new RomanConverter().Convert(number);
        Assert.That(romanNumeral, Is.EqualTo(expected));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We start the implementation using the first transformation &lt;em&gt;no code to nil&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 1 nil
public class RomanConverter
{
    public string Convert(int number)
    {
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first transformation is not enough to make the test pass so we apply the second transformation &lt;em&gt;nil to constant&lt;/em&gt;. This is enough to make the test pass so we stop evolving the code until we have a failing test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 2 nil -&amp;gt; constant
public class RomanConverter
{
    public string Convert(int number)
    {
        return &amp;quot;I&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add a new failing test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestFixture]
public class RomanConverterShould
{
    [TestCase(1, &amp;quot;I&amp;quot;)]
    [TestCase(2, &amp;quot;II&amp;quot;)]
    public void ConvertNumberToRoman(int number, string expected)
    {
        var romanNumeral = new RomanConverter().Convert(number);
        Assert.That(romanNumeral, Is.EqualTo(expected));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next transformation &lt;em&gt;constant to variable&lt;/em&gt; is not sufficient to make the test pass.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 4 Constant -&amp;gt; variable
public class RomanConverter
{
    public string Convert(int number)
    {
        var result = &amp;quot;I&amp;quot;;
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next transformation &lt;em&gt;statement to statements&lt;/em&gt; is also not sufficient to make the test pass.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 5 statement -&amp;gt; statements
public class RomanConverter
{
    public string Convert(int number)
    {
        var result = &amp;quot;I&amp;quot;;
        result += &amp;quot;I&amp;quot;;

        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applying the next transformation &lt;em&gt;unconditional to conditional&lt;/em&gt; is sufficient to make the test pass.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 6 unconditional -&amp;gt; conditional
public class RomanConverter
{
    public string Convert(int number)
    {
        var result = &amp;quot;I&amp;quot;;

        if (number &amp;gt;= 1)
        {
            result += &amp;quot;I&amp;quot;;
        }

        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add a new failing test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestFixture]
public class RomanConverterShould
{
    [TestCase(1, &amp;quot;I&amp;quot;)]
    [TestCase(2, &amp;quot;II&amp;quot;)]
    [TestCase(3, &amp;quot;III&amp;quot;)]
    public void ConvertNumberToRoman(int number, string expected)
    {
        var romanNumeral = new RomanConverter().Convert(number);
        Assert.That(romanNumeral, Is.EqualTo(expected));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding another conditional will make the test pass, but we have duplication.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class RomanConverter
{
    public string Convert(int number)
    {
        var result = &amp;quot;I&amp;quot;;
        if (number &amp;gt; 1)
        {
            result += &amp;quot;I&amp;quot;;
        }

        if (number &amp;gt; 2)
        {
            result += &amp;quot;I&amp;quot;;
        }

        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Applying the next transformation &lt;em&gt;variable to array&lt;/em&gt; removes the duplication.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 7 variable -&amp;gt; array
public class RomanConverter
{
    public static readonly string[] Results = { &amp;quot;I&amp;quot;, &amp;quot;II&amp;quot;, &amp;quot;III&amp;quot; };

    public string Convert(int number)
    {
        return Results[number - 1];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add a new failing test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestFixture]
public class RomanConverterShould
{
    [TestCase(1, &amp;quot;I&amp;quot;)]
    [TestCase(2, &amp;quot;II&amp;quot;)]
    [TestCase(3, &amp;quot;III&amp;quot;)]
    [TestCase(4, &amp;quot;IV&amp;quot;)]
    public void ConvertNumberToRoman(int number, string expected)
    {
        var romanNumeral = new RomanConverter().Convert(number);
        Assert.That(romanNumeral, Is.EqualTo(expected));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make the test pass we don&amp;rsquo;t need to apply the next transformation, we can make the test pass by adding a new element to the array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// no transformation
public class RomanConverter
{
    public static readonly string[] Results = { &amp;quot;I&amp;quot;, &amp;quot;II&amp;quot;, &amp;quot;III&amp;quot;, &amp;quot;IV&amp;quot; };

    public string Convert(int number)
    {
        return Results[number - 1];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While adding a new element to the array was enough to make the test pass, we now spot some duplication on character &amp;ldquo;I&amp;rdquo;. By applying the next transformation &lt;em&gt;statement to tail&lt;/em&gt; recursion we can get rid of this duplication. Since we are trying to follow the transformation table we applied the &lt;em&gt;array to collection&lt;/em&gt; transformation before the tail recursion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 8 array -&amp;gt; collection
public class RomanConverter
{
    public static readonly IDictionary&amp;lt;int, string&amp;gt; Results =
        new Dictionary&amp;lt;int, string&amp;gt;
        {
            {1, &amp;quot;I&amp;quot;},
            {2, &amp;quot;II&amp;quot;},
            {3, &amp;quot;III&amp;quot;},
            {4, &amp;quot;IV&amp;quot;},
        };

    public string Convert(int number)
    {
        return Results[number];
    }
}

// 9 statement -&amp;gt; tail recursion
public class RomanConverter
{
    public static readonly IDictionary&amp;lt;int, string&amp;gt; Results = new Dictionary&amp;lt;int, string&amp;gt;
    {
        {1, &amp;quot;I&amp;quot;},
        {4, &amp;quot;IV&amp;quot;},
    };

    public string Convert(int number)
    {
        if (Results.ContainsKey(number))
        {
            return Results[number];
        }

        return Results[1] + Convert(number - 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add a few more failing tests but since the last transformation was still allowing us to make tests pass we waited until we had duplication to refactor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestFixture]
public class RomanConverterShould
{
    [TestCase(1, &amp;quot;I&amp;quot;)]
    [TestCase(2, &amp;quot;II&amp;quot;)]
    [TestCase(3, &amp;quot;III&amp;quot;)]
    [TestCase(4, &amp;quot;IV&amp;quot;)]
    [TestCase(5, &amp;quot;V&amp;quot;)]
    [TestCase(6, &amp;quot;VI&amp;quot;)]
    [TestCase(7, &amp;quot;VII&amp;quot;)]
    [TestCase(8, &amp;quot;VIII&amp;quot;)]
    public void ConvertNumberToRoman(int number, string expected)
    {
        var romanNumeral = new RomanConverter().Convert(number);
        Assert.That(romanNumeral, Is.EqualTo(expected));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No other transformations required, simply adding new values to the dictionary allowed us to make the tests pass but we can now spot duplication, again around character &amp;ldquo;I&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class RomanConverter
{
    public static readonly IDictionary&amp;lt;int, string&amp;gt; Results =
    new Dictionary&amp;lt;int, string&amp;gt;
    {
        {1, &amp;quot;I&amp;quot;},
        {4, &amp;quot;IV&amp;quot;},
        {5, &amp;quot;V&amp;quot;},
        {6, &amp;quot;VI&amp;quot;},
        {7, &amp;quot;VII&amp;quot;},
        {8, &amp;quot;VIII&amp;quot;},
    };

    public string Convert(int number)
    {
        if (Results.ContainsKey(number))
        {
            return Results[number];
        }

        return Results[1] + Convert(number - 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix the duplication we apply again the transformation, &lt;em&gt;statement to tail recursion&lt;/em&gt;, to fix this. We don&amp;rsquo;t yet need to move to the next transformation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 9 statement -&amp;gt; tail recursion
public class RomanConverter
{
    public static readonly IDictionary&amp;lt;int, string&amp;gt; Results =
    new Dictionary&amp;lt;int, string&amp;gt;
    {
        {1, &amp;quot;I&amp;quot;},
        {4, &amp;quot;IV&amp;quot;},
        {5, &amp;quot;V&amp;quot;},
    };

    public string Convert(int number)
    {
        if (Results.ContainsKey(number))
        {
            return Results[number];
        }

        if (number &amp;gt; 5)
        {
            const string result = &amp;quot;V&amp;quot;;
            return result + Convert(number - 5);
        }

        return Results[1] + Convert(number - 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again we add more failing tests, and again, the last transformation is still making tests pass.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestFixture]
public class RomanConverterShould
{
    [TestCase(1, &amp;quot;I&amp;quot;)]
    [TestCase(2, &amp;quot;II&amp;quot;)]
    [TestCase(3, &amp;quot;III&amp;quot;)]
    [TestCase(4, &amp;quot;IV&amp;quot;)]
    [TestCase(5, &amp;quot;V&amp;quot;)]
    [TestCase(6, &amp;quot;VI&amp;quot;)]
    [TestCase(7, &amp;quot;VII&amp;quot;)]
    [TestCase(8, &amp;quot;VIII&amp;quot;)]
    [TestCase(9, &amp;quot;IX&amp;quot;)]
    [TestCase(10, &amp;quot;X&amp;quot;)]
    [TestCase(40, &amp;quot;XL&amp;quot;)]
    [TestCase(44, &amp;quot;XLIV&amp;quot;)]
    public void ConvertNumberToRoman(int number, string expected)
    {
        var romanNumeral = new RomanConverter().Convert(number);
        Assert.That(romanNumeral, Is.EqualTo(expected));
    }
}

// Wait for patterns to emerge
public class RomanConverter
{
    public static readonly IDictionary&amp;lt;int, string&amp;gt; Results =
        new Dictionary&amp;lt;int, string&amp;gt;
        {
            {1, &amp;quot;I&amp;quot;},
            {4, &amp;quot;IV&amp;quot;},
            {5, &amp;quot;V&amp;quot;},
            {9, &amp;quot;IX&amp;quot;},
            {10, &amp;quot;X&amp;quot;},
            {40, &amp;quot;XL&amp;quot;},
        };

    public string Convert(int number)
    {
        if (Results.ContainsKey(number))
        {
            return Results[number];
        }

        if (number &amp;gt; 40)
        {
            const string result = &amp;quot;XL&amp;quot;;
            return result + Convert(number - 40);
        }

        if (number &amp;gt; 10)
        {
            const string result = &amp;quot;X&amp;quot;;
            return result + Convert(number - 10);
        }

        if (number &amp;gt; 5)
        {
            const string result = &amp;quot;V&amp;quot;;
            return result + Convert(number - 5);
        }

        return Results[1] + Convert(number - 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We spot duplication around if statements, so we refactor the code to the next transformation &lt;em&gt;if to while&lt;/em&gt;. This gets rid of if statement duplication, but we now have while statement duplication.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 10 if -&amp;gt; while
public class RomanConverter
{
    public static readonly IDictionary&amp;lt;int, string&amp;gt; Results =
        new Dictionary&amp;lt;int, string&amp;gt;
        {
            {1, &amp;quot;I&amp;quot;},
            {4, &amp;quot;IV&amp;quot;},
            {5, &amp;quot;V&amp;quot;},
            {9, &amp;quot;IX&amp;quot;},
            {10, &amp;quot;X&amp;quot;},
            {40, &amp;quot;XL&amp;quot;},
        };

    public string Convert(int number)
    {
        if (Results.ContainsKey(number))
        {
            return Results[number];
        }

        string result = string.Empty;

        while (number &amp;gt;= 40)
        {
            result += &amp;quot;XL&amp;quot;;
            number -= 40;
        }

        while (number &amp;gt;= 10)
        {
            result += &amp;quot;X&amp;quot;;
            number -= 10;
        }

        while (number &amp;gt;= 5)
        {
            result += &amp;quot;V&amp;quot;;
            number -= 5;
        }

        while (number &amp;gt;= 4)
        {
            result += &amp;quot;IV&amp;quot;;
            number -= 4;
        }

        while (number &amp;gt;= 1)
        {
            result += &amp;quot;I&amp;quot;;
            number -= 1;
        }

        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We apply the same &lt;em&gt;if to while&lt;/em&gt; transformation to the remaining if statement and this allows us to get rid of the duplicated while statements. In order for this to work it&amp;rsquo;s more convenient to have the dictionary reversed so we also do this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// 10 if -&amp;gt; while
public class RomanConverter
{
    public static readonly IDictionary&amp;lt;int, string&amp;gt; mappings =
        new Dictionary&amp;lt;int, string&amp;gt;
        {
            {40, &amp;quot;XL&amp;quot;},
            {10, &amp;quot;X&amp;quot;},
            {9, &amp;quot;IX&amp;quot;},
            {5, &amp;quot;V&amp;quot;},
            {4, &amp;quot;IV&amp;quot;},
            {1, &amp;quot;I&amp;quot;},
        };

    public string Convert(int number)
    {
        string result = string.Empty;
        var mappingsEnumerator = mappings.GetEnumerator();

        while (mappingsEnumerator.MoveNext())
        {
            var mapping = mappingsEnumerator.Current;

            while (number &amp;gt;= mapping.Key)
            {
                result += mapping.Value;
                number -= mapping.Key;
            }
        }

        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We add more failing tests but the last transformation is sufficient to make all new tests pass and we cannot think of anymore failing tests, this implies we are done. We refactor the code to make it more readable and we are done. We decided not to refactor the outer while loop to a foreach loop. Although this could simplify the code, a foreach loop is not in the transformation premise list so we decided against it for the purposes of this post.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// final solution
[TestFixture]
public class RomanConverterShould
{
    [TestCase(1, &amp;quot;I&amp;quot;)]
    [TestCase(2, &amp;quot;II&amp;quot;)]
    [TestCase(3, &amp;quot;III&amp;quot;)]
    [TestCase(4, &amp;quot;IV&amp;quot;)]
    [TestCase(5, &amp;quot;V&amp;quot;)]
    [TestCase(6, &amp;quot;VI&amp;quot;)]
    [TestCase(7, &amp;quot;VII&amp;quot;)]
    [TestCase(8, &amp;quot;VIII&amp;quot;)]
    [TestCase(9, &amp;quot;IX&amp;quot;)]
    [TestCase(10, &amp;quot;X&amp;quot;)]
    [TestCase(40, &amp;quot;XL&amp;quot;)]
    [TestCase(50, &amp;quot;L&amp;quot;)]
    [TestCase(90, &amp;quot;XC&amp;quot;)]
    [TestCase(100, &amp;quot;C&amp;quot;)]
    [TestCase(400, &amp;quot;CD&amp;quot;)]
    [TestCase(500, &amp;quot;D&amp;quot;)]
    [TestCase(900, &amp;quot;CM&amp;quot;)]
    [TestCase(1000, &amp;quot;M&amp;quot;)]
    [TestCase(846, &amp;quot;DCCCXLVI&amp;quot;)]
    [TestCase(1999, &amp;quot;MCMXCIX&amp;quot;)]
    [TestCase(2008, &amp;quot;MMVIII&amp;quot;)]
    public void ConvertNumberToRoman(int number, string expected)
    {
        var romanNumeral = new RomanConverter().Convert(number);
        Assert.That(romanNumeral, Is.EqualTo(expected));
    }
}

public class RomanConverter
{
    public static readonly IDictionary&amp;lt;int, string&amp;gt; arabicsToRomans =
            new Dictionary&amp;lt;int, string&amp;gt;
            {
                {1000, &amp;quot;M&amp;quot;},
                {900, &amp;quot;CM&amp;quot;},
                {500, &amp;quot;D&amp;quot;},
                {400, &amp;quot;CD&amp;quot;},
                {100, &amp;quot;C&amp;quot;},
                {90, &amp;quot;XC&amp;quot;},
                {50, &amp;quot;L&amp;quot;},
                {40, &amp;quot;XL&amp;quot;},
                {10, &amp;quot;X&amp;quot;},
                {9, &amp;quot;IX&amp;quot;},
                {5, &amp;quot;V&amp;quot;},
                {4, &amp;quot;IV&amp;quot;},
                {1, &amp;quot;I&amp;quot;},
            };

        public string Convert(int number)
        {
            var romanNumeral = string.Empty;
            var arabicsToRomansEnumerator = arabicsToRomans.GetEnumerator();

            while (arabicsToRomansEnumerator.MoveNext())
            {
                var arabicToRoman = arabicsToRomansEnumerator.Current;
                var arabicNumeral = arabicToRoman.Key;
                var romanNumeral = arabicToRoman.Value;

                while (number &amp;gt;= arabicNumeral)
                {
                    result += romanNumeral;
                    number -= arabicNumeral;
                }
            }

            return romanNumeral;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;For the purpose of this post I think the code as is, illustrates the process described by Robert Martin, AKA Uncle Bob, to refactor code from specific to generic guided by tests. Deliberately following the Transformation Priority Premise while coding was a very interesting exercise, it provided guidance while avoiding big leap refactors. I found out that when I was stuck, most of the time, the solution was just applying the next transformation on the table.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&#34;&gt;http://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://vimeo.com/97516288&#34;&gt;https://vimeo.com/97516288&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Transformation_Priority_Premise&#34;&gt;http://en.wikipedia.org/wiki/Transformation_Priority_Premise&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Does TDD really lead to good design?</title>
      <link>http://codurance.com/blog/does-tdd-lead-to-good-design/</link>
      <pubDate>Sat, 09 May 2015 14:32:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/does-tdd-lead-to-good-design/</guid>
      <description>

&lt;p&gt;Recently I tweeted that &lt;a href=&#34;https://twitter.com/sandromancuso/status/588503877235781632&#34;&gt;TDD can’t lead to a good design if we don’t know what good design looks like&lt;/a&gt;. I was also saying that we probably should teach design before TDD (or at least, at the same time). This tweet led to a discussions with &lt;a href=&#34;https://twitter.com/jbrains&#34;&gt;J.B. Rainsberger&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/RonJeffries&#34;&gt;Ron Jeffries&lt;/a&gt;, and a few others. J.B. and I ended up having a live &lt;a href=&#34;https://www.youtube.com/watch?v=ty3p5VDcoOI&#34;&gt;discussion on Hangout on Air&lt;/a&gt; later on.&lt;/p&gt;

&lt;p&gt;If you look back to many of my talks, blogs, and even my book, you will find multiple occasions where I say that TDD is a design tool. So what changed? Why I don’t say the same thing anymore?&lt;/p&gt;

&lt;h3 id=&#34;why-did-i-change-my-mind&#34;&gt;Why did I change my mind?&lt;/h3&gt;

&lt;p&gt;After paying more attention to how I work and how many other developers work, I realised that not many people are driving good design through TDD. Although I love the RED-GREEN-REFACTORING rhythm, having a “refactoring” step is not enough to call TDD a design tool.&lt;/p&gt;

&lt;p&gt;TDD doesn’t prescribe how you should design. What it does is to annoy you constantly, asking “Are you sure about this? Is it good enough? Can you make it better?” This annoyance (or constant reminder to look at your design and thing if it can be improved) is a great thing, but not enough.&lt;/p&gt;

&lt;p&gt;In my view, TDD is a software development &lt;em&gt;workflow&lt;/em&gt; which provides me with many benefits, including a constant reminder to make my code better. What it means to make my code better, is not part of TDD.&lt;/p&gt;

&lt;h4 id=&#34;aren-t-you-forgetting-about-the-4-rules-of-simple-design&#34;&gt;Aren’t you forgetting about the 4 Rules of Simple Design?&lt;/h4&gt;

&lt;p&gt;Ah, yes… But no. I’m not forgetting about them. &lt;a href=&#34;https://twitter.com/sandromancuso/status/589098111559213056&#34;&gt;4 Rules of Simple Design are NOT part of TDD&lt;/a&gt; and I’m purely discussing TDD here. 4 Rules of Simple Design is normally the design guidelines that many experienced TDD practitioners use (including myself, among other techniques) during the refactoring phase.&lt;/p&gt;

&lt;p&gt;4 Rules of Simple Design is one of the many design guidelines we have available. &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29&#34;&gt;SOLID&lt;/a&gt; is another. &lt;a href=&#34;http://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-Driven Design&lt;/a&gt; is another. Many other design principles and patterns are also available as good guidelines. Those are the things we need to have in our mind during “refactoring” phase. Or, putting it in a different way, having a good understanding of the existing design guidelines is what will lead you to a better design.&lt;/p&gt;

&lt;p&gt;TDD is a workflow (not a design tool) where during the refactoring phase you apply your existing knowledge of software design combined with design techniques that may help you to get to a better design.&lt;/p&gt;

&lt;h3 id=&#34;not-all-tdds-are-the-same&#34;&gt;Not all TDDs are the same&lt;/h3&gt;

&lt;p&gt;There are two main styles of TDD with significant differences between them, mainly when it comes to design.&lt;/p&gt;

&lt;h4 id=&#34;classicist&#34;&gt;Classicist&lt;/h4&gt;

&lt;p&gt;The Classicist approach is the original approach to TDD created by Kent Beck. It’s also known as &lt;em&gt;Detroit School&lt;/em&gt; of TDD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Main characteristics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design happens during the refactoring phase.&lt;/li&gt;
&lt;li&gt;Normally tests are state-based tests.&lt;/li&gt;
&lt;li&gt;During the refactoring phase, the unit under test may grow to multiple classes.&lt;/li&gt;
&lt;li&gt;Mocks are rarely used, unless when isolating external systems.&lt;/li&gt;
&lt;li&gt;No up-front design considerations are made. Design completely emerges from code.&lt;/li&gt;
&lt;li&gt;It’s a great way to avoid over-engineering.&lt;/li&gt;
&lt;li&gt;Easier to understand and adopt due to state-based tests and no design up-front.&lt;/li&gt;
&lt;li&gt;Often used in conjunction with the 4 Rules of Simple Design.&lt;/li&gt;
&lt;li&gt;Good for exploration, when we know what the input and desired output are but we don’t really know how the implementation looks like.&lt;/li&gt;
&lt;li&gt;Great for cases where we can’t rely on a domain expert or domain language (data transformation, algorithms, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Problems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Exposing state for tests purpose only.&lt;/li&gt;
&lt;li&gt;Refactoring phase is normally bigger when compared to Outside-In approach (more on that below).&lt;/li&gt;
&lt;li&gt;Unit under test becomes bigger than a class when classes emerge during the refactoring phase. This is fine when we look at that test in isolation but as classes emerge, they create life of their own, being reused by other parts of the application. As these other classes evolve, they may break completely unrelated tests, since the tests use their real implementation instead of a mock.&lt;/li&gt;
&lt;li&gt;Refactoring (design improvement) step is often skipped by inexperienced practitioners, leading to a cycle that looks more like RED-GREEN-RED-GREEN-…-RED-GREEN-MASSIVE REFACTORING.&lt;/li&gt;
&lt;li&gt;Due to its exploratory nature, some classes under test are created according to the “I think I’ll need this class with this interface (public methods)”, making them not fit well when connected to the rest of the system.&lt;/li&gt;
&lt;li&gt;Can be slow and wasteful since quite often we already know that we cannot have so many responsibilities in the class under test. The classicist advice is to wait for the refactoring phase to fix the design, only relying on concrete evidence to extract other classes. Although this is good for novices, this is pure waste for more experienced developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;outside-in&#34;&gt;Outside-In&lt;/h4&gt;

&lt;p&gt;Outside-In TDD, also known as &lt;em&gt;London School&lt;/em&gt; or &lt;em&gt;mockist&lt;/em&gt;, is a TDD style developed and adopted by some of the first XP practitioners in London. It later inspired the creation of BDD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Main characteristics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Different from the classicist, Outside-In TDD prescribes a direction in which we start test-driving our code: from outside (first class to receive an external request) to the inside (classes that will contain single pieces of behaviour that satisfy the feature being implemented).&lt;/li&gt;
&lt;li&gt;We normally start with an acceptance test which verifies if the feature as a whole works. The acceptance test also serves as a guide for the implementation.&lt;/li&gt;
&lt;li&gt;With a failing acceptance test informing why the feature is not yet complete (no data returned, no message sent to a queue, no data stored in a database, etc.), we start writing unit tests. The first class to be tested is the class handling an external request (a controller, queue listener, event handler, the entry point for a component, etc.)&lt;/li&gt;
&lt;li&gt;As we already know that we won’t build the entire application in a single class, we make some assumptions of which type of collaborators the class under test will need. We then write tests that verify the collaboration between the class under test and its collaborators.&lt;/li&gt;
&lt;li&gt;Collaborators are identified according to all the things the class under test needs to do when its public method is invoked. Collaborators names and methods should come from the domain language (nouns and verbs).&lt;/li&gt;
&lt;li&gt;Once a class is tested, we pick the first collaborator (which was created with no implementation) and test-drive its behaviour, following the same approach we used for the previous class. This is why we call outside-in: we start from classes that are closer to the input of the system (outside) and move towards the inside of our application as more collaborators are identified.&lt;/li&gt;
&lt;li&gt;Design starts in the &lt;em&gt;red&lt;/em&gt; phase, while writing the tests.&lt;/li&gt;
&lt;li&gt;Tests are about collaboration and behaviour, not state.&lt;/li&gt;
&lt;li&gt;Design is refined during the &lt;em&gt;refactoring&lt;/em&gt; phase.&lt;/li&gt;
&lt;li&gt;Each collaborator and its public methods are always created to &lt;em&gt;serve&lt;/em&gt; an existing client class, making the code read very well.&lt;/li&gt;
&lt;li&gt;Refactoring phases are much smaller, when compared to the classicist approach.&lt;/li&gt;
&lt;li&gt;Promotes a better encapsulation since no state is exposed for test purposes only,&lt;/li&gt;
&lt;li&gt;More aligned to the &lt;em&gt;tell, don’t ask&lt;/em&gt; approach.&lt;/li&gt;
&lt;li&gt;More aligned to the original ideas of Object Oriented Programming: tests are about objects sending messages to other objects instead of checking their state.&lt;/li&gt;
&lt;li&gt;Suitable for business applications, where names and verbs can be  extracted from user stories and acceptance criteria.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Problems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Much harder for novices to adopt since a higher level of design skill is necessary.&lt;/li&gt;
&lt;li&gt;Developers don’t get feedback from code in order to create collaborators. They need to &lt;em&gt;visualise&lt;/em&gt; collaborators while writing the test.&lt;/li&gt;
&lt;li&gt;May lead to over-engineering due to premature type (collaborators) creation.&lt;/li&gt;
&lt;li&gt;Not suitable for exploratory work or behaviour that is not specified in a user story (data transformation, algorithms, etc).&lt;/li&gt;
&lt;li&gt;Bad design skills may lead to an explosion of mocks.&lt;/li&gt;
&lt;li&gt;Behavioural tests are harder to write than state tests.&lt;/li&gt;
&lt;li&gt;Knowledge of Domain Driven Design and other design techniques, including 4 Rules of Simple Design, are required while writing tests.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;which-tdd-style-should-we-use&#34;&gt;Which TDD style should we use?&lt;/h3&gt;

&lt;p&gt;Both. All. They are just tools and as such, they should be used according to your needs. Experienced TDD practitioners jump from one style to another without ever worrying which style they are using.&lt;/p&gt;

&lt;h3 id=&#34;macro-and-micro-design&#34;&gt;Macro and micro design&lt;/h3&gt;

&lt;p&gt;There are two types of design: macro and micro design. Micro design is what we do while test driving code, mainly using the classicist approach. Macro design goes beyond the feature we are implementing. It’s about how we model our domain at a much higher level, how we split our application, layers, services, etc. Macro design helps us with the overall organisation of the application and provides ways for teams and developers to work in parallel without stepping on each other toes. Macro design refers to how the business sees the application and techniques like Domain-Driven Design are commonly used. Macro design also helps with consistency throughout the application. TDD won’t help you with macro design.&lt;/p&gt;

&lt;p&gt;Macro design is normally taken into account when using Outside-In TDD, but Outside-In on its own is not enough to define the macro design of an application.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Over the years I’ve seen many applications that have been test-driven and were still a pain to work with. OK, I admit that they were significantly better than the majority of the legacy applications which had no tests that I had to maintain before that.&lt;/p&gt;

&lt;p&gt;Any developer can make a mess regardless if they are writing tests or not. Developers can also test drive crap regardless of which TDD style they are using.&lt;/p&gt;

&lt;p&gt;TDD is &lt;strong&gt;not&lt;/strong&gt; a design tool. It’s a software development &lt;em&gt;workflow&lt;/em&gt; that has prompts for code improvement in its lifecycle. In these prompts (writing tests and refactoring), developers need to know some design guidelines (4 Rules of Simple Design, Domain Driven Design, SOLID, Patterns, Law of Demeter, Tell, Don’t Ask, POLA/S, Design by Contract, Feature Envy, cohesion, coupling, Balanced Abstraction Principle, etc) in order to make their code better. Just saying &lt;em&gt;refactoring&lt;/em&gt; isn’t enough to call TDD a design tool.&lt;/p&gt;

&lt;p&gt;Many developers blame TDD and mocks for slowing them down. They end up giving up on TDD because they struggle to get the result they want. In my opinion, no developer really struggles to understand the RED-GREEN-REFACTOR lifecycle. What they struggle with is how to design software well.&lt;/p&gt;

&lt;p&gt;The great thing about TDD is that it is constantly asking us “Hey, can you make your code better? See how hard testing this class is becoming? OK, you made it work. Here’s your green bar. Now make it better.” Besides that, you are on your own.&lt;/p&gt;

&lt;p&gt;TDD becomes much easier when we understand what good design looks like. Practicing and understanding the wealth of design guidelines available will make TDD much easier and useful. It will also reduce its learning curve and hopefully increase its adoption.&lt;/p&gt;

&lt;p&gt;Extremes are bad. We are going from BDUF (Big Design Up Front) to &lt;em&gt;no design at all&lt;/em&gt;. Throwing away our design knowledge is a mistake. Sure, we should not go back to the dark ages and over-engineer everything but thinking that we should only focus on micro design is also a mistake. If you are working on your own, doing a few katas, or working on a small application, then yes, do whatever you like. But if you are part of bigger team developing something that is significantly bigger than a kata, you will be doing your team a favour if you paid more attention to macro design and how you structure your code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code quality cannot be measured</title>
      <link>http://codurance.com/blog/quality-cannot-be-measured/</link>
      <pubDate>Sun, 14 Dec 2014 00:27:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/quality-cannot-be-measured/</guid>
      <description>

&lt;p&gt;We cannot effectively measure what we can&amp;rsquo;t precisely define. And this is definitely true when it comes to software quality. What is software quality? What does quality mean? Quality for whom? Compared to what? In which context? Are we talking about quality from a developer&amp;rsquo;s perspective, from a manager&amp;rsquo;s perspective, or from a user&amp;rsquo;s perspective?&lt;/p&gt;

&lt;p&gt;From a developer&amp;rsquo;s perspective, I don&amp;rsquo;t think it is possible to measure quality to a satisfactory degree. Static analyses tools, code coverage, and a few other code metrics are a good thing when used by developers; they help us to identify areas of our code that could potentially be improved. However, although I think metrics help us to identify bad code, they fail to identify good code. Code with high-test coverage is not the same as well-tested code. Small methods with zero or few parameters are not the same as clean code. Highly cohesive code (low &lt;a href=&#34;http://www.aivosto.com/project/help/pm-oo-cohesion.html#LCOM4&#34;&gt;LCOM4&lt;/a&gt;) is not the same as code that express the business domain. Loose-coupled code is not the same as code that can be easily maintained. Numbers can be gamed, and believe me, I&amp;rsquo;ve been there.&lt;/p&gt;

&lt;p&gt;Software quality metrics used by managers or anyone else that doesn&amp;rsquo;t have the skills to create well-crafted code should be extremely discouraged. When used by managers, metrics can cause more harm than good. Instead of being used as an aid to make our code better, metrics end up being used as bonus targets and finger pointing.&lt;/p&gt;

&lt;p&gt;Software design is all about trade-offs and no software quality tool will ever be able to understand the rationale behind each design decision. For example: decoupling classes and creating indirections are good practices; they allow us to easily test and expand our code. However, the excessive use of indirections, and decoupling every single class from each other, may lead to a totally over-engineered code base.&lt;/p&gt;

&lt;h3 id=&#34;what-is-quality&#34;&gt;What is quality?&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;quality&lt;/em&gt;: the standard of something as measured against other things of a similar kind; the degree of excellence of something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What is this standard that we are talking about here? What are the other things of similar kind we are comparing our code base to?&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think there is a simple way to define quality. Quality is contextual and subject to comparisons. There is also a human and time factor to quality. Quality for whom? At what point in time?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Quality is something that is valuable to someone at some point in time&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is by far the best (and vaguest) definition of quality I&amp;rsquo;ve seen. It came from a combination of ideas captured in an old &lt;a href=&#34;http://www.shino.de/2010/07/22/quality-is-value-to-some-person-at-some-time/&#34;&gt;blog post&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/mgaertne&#34;&gt;Markus Gartner&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;why-do-we-want-to-measure-software-quality&#34;&gt;Why do we want to measure software quality?&lt;/h3&gt;

&lt;p&gt;There are many reasons to why we want to measure quality. Some developers like to use metrics to identify areas of the code that could be improved. Others use metric as a quality gate; if the code doesn&amp;rsquo;t satisfy a certain &amp;ldquo;quality&amp;rdquo; criteria, the build fails.&lt;/p&gt;

&lt;p&gt;Managers may have different reasons to why they want to measure quality. Although they may say otherwise, the most common reasons to why they want software quality to be measured are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lack of trust.&lt;/li&gt;
&lt;li&gt;Fear of being responsible for things they don&amp;rsquo;t understand.&lt;/li&gt;
&lt;li&gt;Find other people to blame in case something goes wrong.&lt;/li&gt;
&lt;li&gt;Try to find a justification for the general dissatisfaction among the people building or using the software.&lt;/li&gt;
&lt;li&gt;Show they are in control.&lt;/li&gt;
&lt;li&gt;Cover their backside, showing that they are doing something to control quality (ticking a box).&lt;/li&gt;
&lt;li&gt;Annual targets and bonuses (normally associated to the percentage of test coverage).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the exception of a few developers and academics, the people that are keener to find a way to measure software quality are the ones that don&amp;rsquo;t write software on a daily basis. Many of them don&amp;rsquo;t even understand how some of the metrics are calculated, but they want a way to control what they don&amp;rsquo;t understand. How many times have we heard stories about managers who &lt;em&gt;force&lt;/em&gt; their teams to keep test coverage above a certain percentage? Do they really know what it means? Would they be able to help the teams to achieve that? Can they distinguish good tests from bad tests?&lt;/p&gt;

&lt;h3 id=&#34;when-do-we-want-to-measure-quality&#34;&gt;When do we want to measure quality?&lt;/h3&gt;

&lt;p&gt;The desire to measure quality is intensified when things are not going well: people are unhappy; some team members are not suitable for the job; too many bugs; there&amp;rsquo;s always problems with new releases; few releases per year; things are taking too long to be done; lack of trust; people are often wondering what others are doing and who is responsible for what. But when asked, almost no one can explain exactly where the software lacks quality or how it could be fixed.&lt;/p&gt;

&lt;p&gt;On the other hand, we very rarely see people talking about measuring software quality when the project is going well: team is composed by good professionals; people are working well with each other; people respect and trust the opinion of their teammates; software is released often and with zero or few cosmetic bugs; good communication and team spirit;&lt;/p&gt;

&lt;h3 id=&#34;code-metrics&#34;&gt;Code metrics&lt;/h3&gt;

&lt;p&gt;Code analysis tools are great when used by developers as an aid to find areas of the system that could be improved. They are great to highlight things that are not always easily seen with a naked eye. They may also be very helpful when working with legacy code. However, the problem with code metrics is that making sure that the code complies to specific metrics is very different from saying that the code has quality. Having high test coverage is not the same as having good tests. Having loose coupled and high cohesive code doesn&amp;rsquo;t mean code that express the business domain or that is very easy to understand. Code with low cyclomatic complexity doesn&amp;rsquo;t mean code that behaves according business specifications and is bug free.&lt;/p&gt;

&lt;h3 id=&#34;non-code-related-metrics&#34;&gt;Non-code related metrics&lt;/h3&gt;

&lt;p&gt;How long does it take to build a new feature? How hard is to deploy the application? How many bugs are found in production every time we go live? How often do we go live? How fast can we safely and confidently change the software to accommodate the ever changing business requirements? Those are all things that we could associate with code quality, but can they be really associated to it? Are all these things only related to the quality of the code? Let&amp;rsquo;s take two common non-code related metrics as examples.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Number of bugs:&lt;/strong&gt; What type of bugs have been raised? Are they related to the bad state of the code base, the lack of skills of the developer that implemented the code, bad requirements, or a complete lack of communication between business, developers, and testers?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time to deliever a feature:&lt;/strong&gt; Why are we unhappy about the time it took us to deliver a feature? Is is because of bad estimations? Is it because we were doing something that we haven&amp;rsquo;t done before and we had to explore different alternatives? Were we blocked by other teams or internal bureaucracy? How does this feature compare to previous features implemented in the system? Are they similar? Completely different?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there are just too many variables involved, which makes it impossible to have a precise way to measure quality.&lt;/p&gt;

&lt;p&gt;Can we really judge the quality of our code according to the amount of time we take to build a new feature or number of bugs? I don&amp;rsquo;t think so. Does the state of the code base impact on our speed of delivery and number of bugs? Yes, definitely. Is the state of the code base the sole responsible for delays and bugs? No. But, as a developer, can we feel that the state of the code is dragging us down and helping us to make mistakes? Absolutely. Can we define a set of metrics that would define quality according to how we feel? I really doubt.&lt;/p&gt;

&lt;h3 id=&#34;same-role-different-perceptions&#34;&gt;Same role, different perceptions&lt;/h3&gt;

&lt;p&gt;On top of the difficulty to map any type of metrics to quality, there is an additional complexity. We are assuming that a single developer could express his or her notion of quality and then derive some code metrics from it. But do all developers in the team share the same notion of quality? Do developers outside that team and company share the same notion of quality?&lt;/p&gt;

&lt;p&gt;Do Ruby and Java developers share the same notion of code quality? Do game developers share the same notion of quality with developers in the financial industry? Or social network industry?&lt;/p&gt;

&lt;p&gt;With so many different opinions about what code quality means, how can we measure quality? How can we precisely say which degree of quality a code base has?&lt;/p&gt;

&lt;h3 id=&#34;feeling-quality&#34;&gt;Feeling quality&lt;/h3&gt;

&lt;p&gt;What I want from a code base is to be able to quickly and confidently make the changes, and most importantly, be satisfied with the solution. I don&amp;rsquo;t want be scared every time I touch certain areas of the code. I want to easily navigate through the code and always finding what I&amp;rsquo;m looking for. I don&amp;rsquo;t want to be unplesantly surprised, wasting time looking for things that don&amp;rsquo;t exist or are not in the right place. I don&amp;rsquo;t want to constantly get stuck, but if that ever happens, I want to have that piece of mind that anyone around me can quickly unstuck me. I don&amp;rsquo;t want to waste time fixing bugs, but if I need to fix a bug, I don&amp;rsquo;t want to spend more than a few minutes. When I look at the system from above, I want to clearly understand what that system is about and what it does. I want to deploy the application to production as often as possible. I want to be able to change the code almost as fast as the business change their minds, making sure that whatever I&amp;rsquo;m delivering is exactly what they expect. As a developer, this is what quality looks like for me.&lt;/p&gt;

&lt;h3 id=&#34;a-few-thoughts&#34;&gt;A few thoughts&lt;/h3&gt;

&lt;p&gt;No code analysis tool will ever guarantee quality. They can probably highlight the lack of quality but never inform that the code is of high quality. Although I believe that code quality cannot be measured, I believe that it can be felt. This general feeling of quality software is only achieved when we have great professionals working well together, trusting and respecting each other. Conversations between team members flow easily, information is as precise as they can be, division of labor happens naturally, and in the few occasions when things don&amp;rsquo;t go according to plan, the whole team gets together to solve the problem. When we work in an environment like that, we didn&amp;rsquo;t need metrics to tell us we are producing quality software. Every one simply feels it.&lt;/p&gt;

&lt;p&gt;By no means I&amp;rsquo;m against using code metrics. I just don&amp;rsquo;t feel they are enough to measure quality. I think metrics are great when used as a &lt;em&gt;bare-minimum&lt;/em&gt; quality gate and also an aid for developers to identify areas of improvement. However I also believe that the need to measure &lt;em&gt;quality&lt;/em&gt; normally comes from a general dissatisfaction caused by bad professionals and organisational disfunction.&lt;/p&gt;

&lt;p&gt;There are too many variables in a software project and many of them cannot be easily be measured, if at all. But if you ask the people involved in a project to rank the quality of their software in a scale of 1 to 10, they would give you a number, which in fact is more based on gut feel than any scientific measure. When you ask them to pinpoint the reasons why they ranked the quality in that way, you will see that none of them will say that the reason is because the code base scores 3.2 in the LCOM metric or that the test coverage is only 32% when it should have been 70%.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I believe that the only sensible thing we can do is to try to be the best we can be and always strive to do our best.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Naming Test Classes and Methods</title>
      <link>http://codurance.com/blog/naming-test-classes-and-methods/</link>
      <pubDate>Sat, 13 Dec 2014 00:27:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/naming-test-classes-and-methods/</guid>
      <description>

&lt;p&gt;What should my first test be? What should I test next? These are common questions that I&amp;rsquo;m asked over and over again. I quite often ask these questions myself. Deciding on what to test is hard. Deciding on the order that things should be tested is even harder.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; But writing tests first is not the only problem. How often did we get frustrated while dealing with existing tests which we had no idea what they are testing?&lt;/p&gt;

&lt;p&gt;Over the years I met and paired with a lot of experienced TDD practicioners and each one of them have a slightly different way to decide which tests to write and in which order. They also have different approaches to actually write their tests. Some write the name of the test method first. Others don&amp;rsquo;t bother with the name of the test method; they only appropriately name it after they write the test code. Some prefer a more exploratory approach, making a mess at the beginning, and only refactor when they have a better understanding of the problem and enough code in front of them. Others prefer a more structured approach, doing a little bit more thinking and &amp;ldquo;just-in-time design&amp;rdquo; before they write their tests. Some start typing straight away and wait to see what the code will look like before making any naming and design assumptions. Some use a more &lt;em&gt;classicist&lt;/em&gt; approach by default. Others prefer a more &lt;em&gt;mockist outside-in&lt;/em&gt; approach. And to make things more confusing, experienced TDD practicioners mix-and-match styles and approaches according to what they are trying to test.&lt;/p&gt;

&lt;p&gt;In this post I&amp;rsquo;ll try to describe how I generally think about my tests. Due to the nature of the projects I&amp;rsquo;m noramlly involved with&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; I tend to think and design (in my head) a little bit more before I start typing. Outside-In TDD is normally my default mode when writing tests. My main focus when writing tests is to clearly express the behaviour I want the application (or class) to have.&lt;/p&gt;

&lt;p&gt;This is the template I normally use to help me decide what to test and how to name my test methods according to the expected behaviour:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2014_12_12/class_and_method_name_template.jpg&#34;  class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;This approach forces me to think about the behaviour I want my class to have, making it easier to write my first and subsequent tests. Even at a unit test level, I try my best to name my test methods in a way that a business person could understand, rarely using any technical language. Here are a few examples:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2014_12_12/class_methods_example.jpg&#34;  class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Trying to form a sentence combining the name of the test class and the name of the test method forces me to really focus on the behaviour I want to test. Once I figure that out, it becomes quite easy to write my assertion since I just need to translate English to the programming language I&amp;rsquo;m using.&lt;/p&gt;

&lt;p&gt;One thing to notice is that I normally split the body of my tests into 3 blocks (given, when, then). However, in some tests I call the method under test from the assertion and some tests don&amp;rsquo;t need any setup. Many tests are quite simple and have only one line.&lt;/p&gt;

&lt;p&gt;And here are the 5 steps I normally follow when creating a new test class:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2014_12_12/test_in_5_steps.jpg&#34;  class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;For subsequent test methods I iterate through steps 2 to 5. The skeleton of the production code is generated from the test class.&lt;/p&gt;

&lt;h4 id=&#34;why-do-i-use-should&#34;&gt;Why do I use &amp;ldquo;should&amp;rdquo;?&lt;/h4&gt;

&lt;p&gt;Many developers don&amp;rsquo;t like the use of the word &amp;ldquo;should&amp;rdquo;. Some say that it is redundant and should not be used. Others say that it is not strong enough. &amp;ldquo;Must&amp;rdquo; is too strong. What about &amp;ldquo;have to&amp;rdquo;? I&amp;rsquo;m still not sure about it. For now, I&amp;rsquo;ll stick with &amp;ldquo;should&amp;rdquo; but I may give &amp;ldquo;have to&amp;rdquo; a try. Since I only use it on the class name, I don&amp;rsquo;t really think it is a big deal and it helps me to construct a phrase when combining with the name of the test methods.&lt;/p&gt;

&lt;h3 id=&#34;bad-names&#34;&gt;Bad names&lt;/h3&gt;

&lt;p&gt;Here are some common names I&amp;rsquo;ve seen given to the variable that points to the class under test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;BankAccount testee = new BankAccount();
BankAccount sut = new BankAccount();
BankAccount ba = new BankAccount();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;** If it is a bank account, name the variable bankAccount.**&lt;/p&gt;

&lt;p&gt;And for methods, here are some&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;test_deposit_works() {…}             // what does &#39;works&#39; mean?
test_deposit_works_correctly() {…}   // should it ever work incorrectly?
test_deposit() {…}                   // what exactly is it testing?
check_balance_after_deposit() {…}    // what is it checking? 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A test name should clearly indicate why a test should pass or fail, that means, I should not need to look at the assertion(s) to figure out what the test is actually testing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;[BankAccountShould] have_balance_increased_after_a_deposit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the test above fails I&amp;rsquo;ll have a fairly good idea why it failed.&lt;/p&gt;

&lt;h3 id=&#34;considerations&#34;&gt;Considerations&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t really follow rules and quite often I do things in a different way. It all depends on what I&amp;rsquo;m doing and the context I&amp;rsquo;m in. Some projects already have a standard way of writing unit tests and if I&amp;rsquo;m a new joiner, I&amp;rsquo;ll comply to it. Having a standard is a good thing. It avoids confusion and (bad) surprises, regardless if the &amp;ldquo;standard&amp;rdquo; is good or not. What I described above is how I normally name and think about my tests, and it is the standard I often put in place when I start a new project. This is also how I&amp;rsquo;m teaching our apprentices at Codurance.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Ideally we would choose a sequence of small steps (tests) that could help us to gradually add functionality to our system and evolve our design.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Most of my work is done on bespoke business applications with a complex domain. I also normally work in projects where we constantly interact with product owners and business experts. All projects that I get involved are run using Agile methodologies. The approach I described works well for me because I normally write code according to well-defined user stories and acceptance criteria, which gives me a fairly good idea of what needs to be done before I start coding. It may not work so well if you do more exploratory work. I normally flip to a more &lt;em&gt;classicist&lt;/em&gt; approach when I&amp;rsquo;m exploring.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tell don&#39;t ask</title>
      <link>http://codurance.com/blog/tell-dont-ask/</link>
      <pubDate>Sun, 27 Jul 2014 12:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/tell-dont-ask/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Tell don&amp;rsquo;t ask&lt;/strong&gt; we have all heard it. Yet it is one of the most violated principles. It is also one of the most important principles to follow if you want a design that is flexible to change.&lt;/p&gt;

&lt;p&gt;I have often heard people say, &lt;strong&gt;&amp;rdquo;&amp;hellip; but it makes Test driving very hard&amp;rdquo;&lt;/strong&gt;. I disagree - what it does is stop you from testing at too granular a level and focus on testing behaviours rather than interactions.&lt;/p&gt;

&lt;p&gt;Enough postulating &amp;hellip; here is an example taken from my current work. You have an interface to an external system - you have nicely encapsulated it into your own class and throw an exception if, for example, there are infra level issues. Once the exception is raised - you let it percolate to the top and create an alert to inform operations.&lt;/p&gt;

&lt;p&gt;The diagram below depicts a more usual approach I&amp;rsquo;ve seen:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/ask-not-tell.png&#34; alt=&#34;Ask! not tell&#34; title=&#34;Ask! not tell&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Chances are that we test drove the &lt;em&gt;Infra Service&lt;/em&gt; knowing that it needs to have all the right details required for us to raise the &lt;em&gt;Alert&lt;/em&gt;. However, we are not testing that the right Alert is created because that is not the responsibility of the &lt;em&gt;Infra Service&lt;/em&gt;. Hence we poke a few holes in the &lt;em&gt;Infra Exception&lt;/em&gt; class and assert that the exception is created with the right details.&lt;/p&gt;

&lt;p&gt;Once we move to implementing the &lt;em&gt;A Service&lt;/em&gt; we have all the relevant details exposed from the exception so we retrieve these details and create the &lt;em&gt;Alert&lt;/em&gt;. Interesting that the real behaviour here is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;create alert with the right details if there is an infra error&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;create exception with the right details if there is an infra error and then create alert from exception with the right details&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now lets looks at the alternative. Lets say we drove the test from the outside, i.e. &lt;em&gt;A Service&lt;/em&gt;, and did not mock the &lt;em&gt;Infra Service&lt;/em&gt; but instead mocked the &lt;em&gt;External System API&lt;/em&gt;.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/tell-dont-ask.png&#34; alt=&#34;Tell! don&amp;#39;t ask&#34; title=&#34;Tell! don&amp;#39;t ask&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;We end up with a tell-don&amp;rsquo;t-ask approach where we are testing that the right &lt;em&gt;Alert&lt;/em&gt; is created when there is an infra error. We also end up with fewer interactions and a more flexible design. If for example we decided to encapsulate the external system some other way, our tests will not need to change.&lt;/p&gt;

&lt;p&gt;Although testing at this level provides us with far less brittle tests, the disadvantage is that parts of the implementation is further way. On the other hand there are far fewer reasons why a test may break during refactoring.&lt;/p&gt;

&lt;p&gt;Finding the right level to test is not a science. We need to take complexity of the unit-under-test into account. The rule of the thumb is that we should test from outside and mock external boundaries until the tests get too complex and only then get more granular for the more complex parts striving to maintain flexible tests and simple design.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TDD is NOT (just) about you</title>
      <link>http://codurance.com/blog/tdd-is-not-about-you/</link>
      <pubDate>Sat, 24 May 2014 22:18:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/tdd-is-not-about-you/</guid>
      <description>

&lt;p&gt;Recently, another big debate about TDD started on Twitter and blogosphere. Is TDD dead? (No, that&amp;rsquo;s ridiculous.) Does it improve or damage our design? Does it make us faster or slow us down? &lt;a href=&#34;http://twitter.com/sebrose&#34;&gt;Seb Rose&lt;/a&gt; compiled a &lt;a href=&#34;http://claysnow.co.uk/to-tdd-or-not-to-tdd/&#34;&gt;list of blog posts and tweets&lt;/a&gt; about it, so I won’t repeat them here. If you are not aware of the whole discussions, please read all the links Seb collected at the end of &lt;a href=&#34;http://claysnow.co.uk/to-tdd-or-not-to-tdd/&#34;&gt;his post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve been using TDD for many years, and although I’m fully convinced of its benefits, I’m not going to describe the pros and cons of TDD from my own point view. That would be a bit selfish. What I hope to do here is to raise a few points that haven’t been raised before in the discussions I’ve seen.&lt;/p&gt;

&lt;h4 id=&#34;i-m-great-you-are-not&#34;&gt;&amp;ldquo;I’m great, you are not.&amp;rdquo;&lt;/h4&gt;

&lt;p&gt;There is a fair share of developers that think this way. It’s all about &amp;ldquo;Me! Me! Me!” They are developers that, if they are not already working in isolation, given the option, they would prefer to work on their own instead of a team. After receiving some requirements, they feel more comfortable going to a place where they are not going to be disturbed, and just get on with it. They will code on their own until they feel they are done. They don’t need to pair. They don’t need to write tests. They don’t need to learn new tools and practices because they are already awesome developers. Or so they think.&lt;/p&gt;

&lt;p&gt;Developers that fits this description are normally the ones that are more resistant to TDD, if not totally against it. TDD slow them down. TDD damages their pre-conceived idea of good design. TDD doesn’t help them because they know their code base well and can find bugs quite quickly. Since they are the only developers working on the code base, very rarely they make a mistake. They know where to change and how to change.&lt;/p&gt;

&lt;p&gt;Am I being unfair? Am I being a jerk? How do I know that certain developers think this way? The answer is simple: I was one of them. That’s exactly how I used to think some years ago.&lt;/p&gt;

&lt;p&gt;“This code sucks. Who was the moron that wrote this crap?” How many times have we said (or at least thought) that? Well, here’s some news to you. If you ever worked in a team, or had your code viewed, used, or changed by other developers, be sure that they thought the same thing about you and your code. Yes, it hurts. So now you know how other developers feel.&lt;/p&gt;

&lt;p&gt;Another news for you: If you always work on your own, or prefer to work on your own, chances are that you are not as good as you think you are. Other developers are the best judge of your awesomeness, not you.&lt;/p&gt;

&lt;p&gt;If you are a developer that don’t normally work as part of team, or don’t have other developers constantly working on the same code base as you, sorry, but you probably have a very biased and unverified opinion, mainly when it comes to TDD and other programming practices.&lt;/p&gt;

&lt;h4 id=&#34;tdd-is-not-about-you&#34;&gt;TDD is not about YOU&lt;/h4&gt;

&lt;p&gt;For the vast majority of my career I worked as part of a team. In the past few years, I worked in large projects with many developers and teams in different parts of the world. There is no “I” in a team. There is no “I don’t do this” in a team. A healthy team is a team where team members respect each other and produce code that meets the standards set by the team.&lt;/p&gt;

&lt;p&gt;Software projects, at least the ones I’m used to—not some prototypes, small CRUD web apps, or pet-project mobile app—outlive developers. Projects continue to be developed and maintained while developers come and go. A great developer understands that. She understands that other developers will need to maintain her code, long after she is gone. She understands that different developers have different ideas of what good code means. She understands that software evolves and needs to be changed. And above all, she understands well enough how tough it is to work with a large code base that she knows very little about.&lt;/p&gt;

&lt;p&gt;Now, remember that project you joined some time ago. The one which the code was supposedly written by smart people, but unfortunately they are all gone. Or that other project, that was a total mess and no one knew what was going on. Or even that old project, with a huge code base, where the requirements were changing on a daily basis.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Ah, if at least we had some tests.&amp;rdquo; Tests we could rely on. Tests that could tell us the intent of the code. Tests that could make us feel confident to change that complicated and unknown code base. Tests that would make our experience of working on that code base quite enjoyable, and not our biggest pain. Wouldn’t it nice if we could click a button, and in a few minutes, if not seconds, we could have the confidence that we haven’t broken anything? Ah, if at least those other stupid developers have written some tests. Tests that could tell me what this code is supposed to do. Now we need to deal with this mess having no clue if we will break anything. &amp;ldquo;If at least the code was decoupled from the frameworks, I could try to write some tests quickly and make sense of all this mess.&amp;rdquo;&lt;/p&gt;

&lt;h4 id=&#34;don-t-be-the-other-stupid-developer&#34;&gt;Don’t be the other stupid developer&lt;/h4&gt;

&lt;p&gt;I’ve been the other stupid developer in the past. I left stuff behind that potentially caused pain to other developers. Now I know, and it sucks. Today, regardless of what I think about my own skills, I know a software project is not about me. A software project is not about any single person. So, if you still think you don’t need TDD or automated tests, think about all the other developers. Think about the people that will maintain that code once you are gone. Think about your colleagues next to you. Above all, think about yourself joining another large project with no tests, possibly written by developers that think they are as great as you.&lt;/p&gt;

&lt;p&gt;If you still don’t want to do TDD, fine. That’s OK. My question for you is: What are you going to do instead that will give other developers the confidence to work on the code you produced? Sorry, but your awesome notion of design is not good enough if not validated and agreed by the rest of the team (and all future developers that will ever work on that code base).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Screencast - Explanatory Methods</title>
      <link>http://codurance.com/blog/explanatory-methods/</link>
      <pubDate>Sun, 13 Apr 2014 20:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/explanatory-methods/</guid>
      <description>&lt;p&gt;On 9th of April 2014, we created our first screencast on our new &lt;a href=&#34;https://www.youtube.com/user/codurance&#34;&gt;YouTube channel&lt;/a&gt;. The idea is to have a series of (reasonably) short videos explaining some of the techniques we use when developing software. The videos will range from basic to advanced topics but in no particular order.&lt;/p&gt;

&lt;p&gt;The first one is on Explanatory Methods. They are small private (helper) methods that can be used to explain the underlying behaviour and also to bring the domain language to life.&lt;/p&gt;

&lt;p&gt;Subscribe to our &lt;a href=&#34;https://www.youtube.com/user/codurance&#34;&gt;YouTube channel&lt;/a&gt; to receive notificaitons of future videos. We hope you like it.&lt;/p&gt;

&lt;iframe width=&#34;640&#34; height=&#34;390&#34; src=&#34;//www.youtube.com/embed/sKYX40ltQZM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Test Deafness</title>
      <link>http://codurance.com/blog/test-deafness/</link>
      <pubDate>Fri, 23 Aug 2013 03:26:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/test-deafness/</guid>
      <description>

&lt;p&gt;A few months ago I was talking to a musician friend of mine. He is also
Brazilian, same age as me, and moved to the UK on the same year I did.
As we were talking about music, I mentioned I like punk rock. He said he
likes punk rock as well, but as a musician, he listens to a bit of
everything. The conversation was going well until he asked me what my
favourite bands were. &amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/Legi%C3%A3o_Urbana&#34;&gt;Legiao
Urbana&lt;/a&gt;&amp;rdquo; is my
favourite Brazilian band I said. &amp;ldquo;Seriously?&amp;rdquo; he said with a puzzled
face. &amp;ldquo;They are rubbish, man.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;As he was a friend (he became an enemy after that stupid comment), I
thought to myself: How can I make him suffer for the rest of his life?
Luck for him, I remembered that I was not a Brazilian savage anymore. I
was British now and I had to act like one: &amp;ldquo;Oh, are they? Thanks for
sharing that with me. Would you mind telling me what your favourite
bands are? More tea?&amp;rdquo; He then named a few bands, including
some &lt;a href=&#34;http://en.wikipedia.org/wiki/Forr%C3%B3&#34;&gt;&lt;strong&gt;Forró&lt;/strong&gt;&lt;/a&gt; bands. Shock!
Horror!! Blasphemy!!! I really wanted to kill him right there. Fuck the
British citizenship. How could a guy, that also liked punk rock music,
say that the band I liked was rubbish and then name some stupid Forro
bands as his favourite bands?&lt;/p&gt;

&lt;p&gt;After quite a long list of swear words pronounced in a very loud tone, I
asked him to elaborate. All songs of Legiao Urbana, he said, are played
with three or four chords maximum. Their lyrics are great, but they are
very poor musicians. The Forro bands are totally the opposite. The
lyrics suck but no one cares. Their are great musicians that focus on
creating music for people to dance.&lt;/p&gt;

&lt;p&gt;That conversation made me realise something really important. If you are
a person like me, good music is related to good and strong lyrics. For a
musician like my friend, good music is about the techniques used by
other musicians when playing their instruments, regardless of the
lyrics. For a person that likes to sing, she may appreciate opera, even
if she doesn&amp;rsquo;t have a clue about what the words mean.&lt;/p&gt;

&lt;h3 id=&#34;but-what-does-it-have-to-do-with-tests&#34;&gt;But what does it have to do with tests?&lt;/h3&gt;

&lt;p&gt;You cannot expect to produce quality code just by &lt;strong&gt;&lt;em&gt;listening to your
test&lt;/em&gt;&lt;/strong&gt;. If you don&amp;rsquo;t know what good code looks like, you are pretty
much &lt;strong&gt;&lt;em&gt;test deaf&lt;/em&gt;&lt;/strong&gt;. Musicians have a trained ear to listen to each
instrument individually while the music is playing. They can also
imagine, quite precisely, how different instruments could be combined to
create new music.&lt;/p&gt;

&lt;p&gt;Walking around asking other developers to listen to their tests, as if
this advice alone would make them produce quality code immediately,
doesn&amp;rsquo;t work. It may make us look smart (or at least feel smart) but it
does not really help the other developers receiving the advice. It&amp;rsquo;s too
vague.&lt;/p&gt;

&lt;p&gt;If we want to produce quality code, we should study the concepts and
techniques that lead to it: Domain Driven Design, Clean Code, SOLID
principles, design patterns, coupling, cohesion, different programming
languages and paradigms, architecture, just to name a few. Once we get a
good understanding of all these things, we will have an implied
knowledge about what constitutes good code. This implied knowledge is
what may cure our &lt;strong&gt;test deafness&lt;/strong&gt;, allowing us to &lt;em&gt;listen to our
tests&lt;/em&gt; in order to produce quality code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The legacy of misplaced Testing</title>
      <link>http://codurance.com/blog/the-legacy-of-misplaced-testing/</link>
      <pubDate>Tue, 18 Oct 2011 22:10:49 +0000</pubDate>
      
      <guid>http://codurance.com/blog/the-legacy-of-misplaced-testing/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been exposed to a number of projects that have been going on for a few years. As you&amp;rsquo;d expect they are at a stage where the cost of change is phenomenal. The codebase is large, convoluted and very difficult to understand. However, there are a lot of tests both at the system and unit level. A sigh of relief - if the code has a lot of tests then at least that would make refactoring easier. The reality is very different - the tests are even more complicated then the code and significantly add to the cost of change.&lt;/p&gt;

&lt;p&gt;Not only we have convoluted unit tests we have a very large set of system tests that exercise lots of variations on the main flows. These are very expensive tests because they require a lot of test data to be setup and go through the full flow in order to verify a very small part in that flow. You can see that as the code base became more convoluted and dependencies became difficult to mock, the developers started  relying more and more on the system tests which proved comparatively easier to setup by copying the setup data from previous tests. If you have hundreds of these and no one knows exactly how many of the main flows/scenario are exercised then what good are these system tests?&lt;/p&gt;

&lt;p&gt;How do you turn this tide? One approach is to start moving these variations into unit tests in order to reduce the system test suite into a very small set of targeted tests that are testing the main business scenarios. Granted you&amp;rsquo;ll have to spend effort on untangling the dependencies. You can adopt an automated testing framework (e.g. JBehave, Cucumber etc.) so the system and unit tests are defined in the language of the business. The units under test become more coarse grained to satisfy these scenarios. This may allow swathes of complicated unit tests to be replaced - don&amp;rsquo;t be afraid to remove them. You must be horrified - remove tests! - well if they are not improving our confidence in refactoring then one can argue that they are no longer fit for purpose.&lt;/p&gt;

&lt;p&gt;I am in no way saying that we stop doing TDD/BDD. Lack of TDD/BDD is most likely the reason we get ourselves into this situation in the first place. This is more an approach to lessen the pain of misplaced and substandard tests - to allow us to gradually turn the tide on the cost of change.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Naming your Unit Tests</title>
      <link>http://codurance.com/blog/naming-your-unit-tests/</link>
      <pubDate>Thu, 27 May 2010 15:21:25 +0000</pubDate>
      
      <guid>http://codurance.com/blog/naming-your-unit-tests/</guid>
      <description>&lt;p&gt;Often I see Unit Tests with the test methods that have the same name as the method under test prefixed with the word &amp;ldquo;test&amp;rdquo; e.g. &lt;code&gt;testSubmitApplication&lt;/code&gt;. This provides no extra information on which &amp;ldquo;flow&amp;rdquo; of the mothod is being tested. Other test method names provide a bit more information by suffixing the nature of the test e.g. &lt;code&gt;testSubmitApplicationWithInvalidCriteria&lt;/code&gt;. It better but not much better. A number of IDEs actually allow the developer to generate test method names based on the class under test which in my opinion defeats the object.&lt;/p&gt;

&lt;p&gt;Unit test methods should be named in such as way that they provide a clear description of the test. In my opinion the prefix &amp;ldquo;test&amp;rdquo; is redundent and should never appear in your test method names unless it is part of the domain vocabulary. For example &lt;code&gt;AppicationSubmittedWithInvalidCriteriaMustRaiseException&lt;/code&gt;* is more informative then &lt;code&gt;testSubmitApplication&lt;/code&gt;. Providing a more descriptive name also serves to keep a clear focus on the flow under test and leads the devloper to create a test method per flow.&lt;/p&gt;

&lt;p&gt;Please Note that the example method name is a simplification. I would consider the term &amp;ldquo;InvalidCriteria&amp;rdquo; a bit too high-level for a real unit test. It should be more specific such as &lt;code&gt;AppicationSubmittedWithNoSurnameMustRaiseException&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>