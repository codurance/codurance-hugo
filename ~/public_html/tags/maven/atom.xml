<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Maven on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/maven/</link>
    <description>Recent content in Maven on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 16 Feb 2010 14:52:47 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/maven/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Maven Mutli-Project Thoughts and Guidelines</title>
      <link>http://codurance.com/blog/maven-mutli-project-thought-and-guidelines/</link>
      <pubDate>Tue, 16 Feb 2010 14:52:47 +0000</pubDate>
      
      <guid>http://codurance.com/blog/maven-mutli-project-thought-and-guidelines/</guid>
      <description>&lt;p&gt;Maven multi-project stucture can get quite difficult to manage once you have a relatively deep hierarchy and more than a few projects. Looking at one such complex structure I found that much of this complexity can be avoided by carefully looking at the relation between parent and child projects and understanding why the projects have been split in the first place.&lt;/p&gt;

&lt;p&gt;Maven allows composition and association type relationships between parent and children POMs (projects). The composition relation is expressed by including the child in the &lt;em&gt;modules&lt;/em&gt; element of the parent POM and refering to the parent from the child POM. The association type relation is expressed by only refering to the parent from the child POM.&lt;/p&gt;

&lt;p&gt;This all seams fairly straight forward until you start thinking about your release strategy. In a composition relationship all child modules must be released with the parent so that if you want to release changes in a child module then ideally you should release it as part of a full release of it&amp;rsquo;s parent. Notice I say &amp;ldquo;must&amp;rdquo; even though maven allows you to release the children individually. Well, if you can think of scenarios where the child may be released independently of the parent then surely a composition type relationship is not appropriate?&lt;/p&gt;

&lt;p&gt;Another guideline I find useful is to maintain exactly the same versions for all projects in a composition relationship since they must be released together. Assosiation type releasions ships should always refer to a released version of it&amp;rsquo;s parent.&lt;/p&gt;

&lt;p&gt;Lastly project hierarchies are not the only way to share common POM setups and dependencies. The other option is to use maven profiles. Typically you&amp;rsquo;d have a combination of a hierarchical project simplified by use of maven profiles.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating and using a maven archetype</title>
      <link>http://codurance.com/blog/creating-and-using-a-maven-archetype/</link>
      <pubDate>Wed, 06 Jan 2010 17:43:37 +0000</pubDate>
      
      <guid>http://codurance.com/blog/creating-and-using-a-maven-archetype/</guid>
      <description>&lt;p&gt;The best way to create a maven archetype is to start with an existing project. In the maven project (simple or multiple-module) directory execute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    mvn archetype:create-from-project
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The archetype is created under &lt;code&gt;target/generated-sources/archetypes&lt;/code&gt; with the following directory structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    +---src
        +---main
            +---resources
                +---archetype-resources
                ¦   +---src
                ¦       +---main
                ¦           +---java (directory containing your java sources)
                ¦           +---resources (directory containing your non-java sources)
                ¦           +---webapp
                ¦               +---META-INF
                ¦               +---WEB-INF
                ¦                   +---jsp
                ¦
                +---META-INF
                    +---maven (directory containing archetype-metadata.xml)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The archetype-metadata.xml can used used to further tune the archetype. This file describes filesets of the following format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;fileSets&amp;gt;
      &amp;lt;fileSet filtered=&amp;quot;true&amp;quot; packaged=&amp;quot;true&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt;
        &amp;lt;includes&amp;gt;
          &amp;lt;include&amp;gt;**/*.xml&amp;lt;/include&amp;gt;
          &amp;lt;include&amp;gt;**/*.java&amp;lt;/include&amp;gt;
        &amp;lt;/includes&amp;gt;
      &amp;lt;/fileSet&amp;gt;
    &amp;lt;/fileSets&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;code&gt;filtered&lt;/code&gt; property is set to true then all &lt;code&gt;${reference}&lt;/code&gt; are resolved. The built-in references are: &lt;code&gt;groupId,version,artifactId,rootArtifactId,package ...&lt;/code&gt;. If &lt;code&gt;packaged&lt;/code&gt; is set to true then a directory tree representing the package is created before the resources are copied. Remember these are Velocity templates so you should  be able to use Velocity control statements (note: I&amp;rsquo;ve not tried these yet)&lt;/p&gt;

&lt;p&gt;Once you are happy with the archetype you can execute &lt;code&gt;mvn install&lt;/code&gt; to install the archetype. This archetype should now appear in the list when you execute &lt;code&gt;mvn archetype:generate&lt;/code&gt;. You can release the archetype if you have your own remote repository. You will however need to create a achetype-catalog.xml if you want other users to use this archetype from your own remote repository. The archetype-catalog.xml file should look like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
    &amp;lt;archetype-catalog&amp;gt;
      &amp;lt;archetypes&amp;gt;
        &amp;lt;archetype&amp;gt;
          &amp;lt;groupId&amp;gt;my.group&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;an-archetype&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;0.0.1&amp;lt;/version&amp;gt;
          &amp;lt;description&amp;gt;my example archetype&amp;lt;/description&amp;gt;
          &amp;lt;repository&amp;gt;http://repository-host/nexus/content/repositories/releases&amp;lt;/repository&amp;gt;
        &amp;lt;/archetype&amp;gt;
      &amp;lt;/archetypes&amp;gt;
    &amp;lt;/archetype-catalog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then use this archetype to create a project using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    mvn archetype:generate -DarchetypeCatalog=http://&amp;lt;uri-path&amp;gt;/archetype-catalog.xml
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>