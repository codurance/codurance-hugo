<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xquery on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/xquery/</link>
    <description>Recent content in Xquery on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 14 Jan 2012 20:53:44 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/xquery/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Saxon XQuery With Multiple Documents</title>
      <link>http://codurance.com/blog/saxon-xquery-with-multiple-documents/</link>
      <pubDate>Sat, 14 Jan 2012 20:53:44 +0000</pubDate>
      
      <guid>http://codurance.com/blog/saxon-xquery-with-multiple-documents/</guid>
      <description>&lt;p&gt;Saxon is a wonderful API for XML processing. It provides complete support for XPath, XQuery and XSLT. Although I&amp;rsquo;m always baffled with it&amp;rsquo;s lack of adoption compared to Xalan and Xerces. Having said that the online documentation can definitely do with some improvement. Â The following is a quick example of of how you may execute an XQuery that takes multiple XML documents as input.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Test
public void runXQueryWithMultipleInputDocuments() throws SaxonApiException {
    Processor processor = new Processor(false);

    DocumentBuilder documentBuilder = processor.newDocumentBuilder();
    XdmNode document = documentBuilder.build(
            new StreamSource(new StringReader(&amp;quot;&amp;lt;my&amp;gt;&amp;lt;document&amp;gt;content&amp;lt;/document&amp;gt;&amp;lt;/my&amp;gt;&amp;quot;)));
    XdmNode document2 = documentBuilder.build(
            new StreamSource(new StringReader(&amp;quot;&amp;lt;my&amp;gt;&amp;lt;document&amp;gt;content2&amp;lt;/document&amp;gt;&amp;lt;/my&amp;gt;&amp;quot;)));

    XQueryCompiler xQueryCompiler = processor.newXQueryCompiler();
    XQueryExecutable xQueryExecutable = xQueryCompiler.compile(
            &amp;quot;declare variable $mydoc external; &amp;quot; +
            &amp;quot;declare variable $mydoc2 external; &amp;quot; +
            &amp;quot;&amp;lt;newdoc&amp;gt;&amp;lt;doc1&amp;gt;{$mydoc/my/document/text()}&amp;lt;/doc1&amp;gt;&amp;quot; +
            &amp;quot;&amp;lt;doc2&amp;gt;{$mydoc2/my/document/text()}&amp;lt;/doc2&amp;gt;&amp;lt;/newdoc&amp;gt;&amp;quot;);

    XQueryEvaluator xQueryEvaluator = xQueryExecutable.load();

    QName name = new QName(&amp;quot;mydoc&amp;quot;);
    xQueryEvaluator.setExternalVariable(name, document);
    QName name2 = new QName(&amp;quot;mydoc2&amp;quot;);
    xQueryEvaluator.setExternalVariable(name2, document2);

    System.out.println(xQueryEvaluator.evaluate());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This result is an output of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;newdoc&amp;gt;
   &amp;lt;doc1&amp;gt;content&amp;lt;/doc1&amp;gt;
   &amp;lt;doc2&amp;gt;content2&amp;lt;/doc2&amp;gt;
&amp;lt;/newdoc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>