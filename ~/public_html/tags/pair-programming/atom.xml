<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pair Programming on Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/tags/pair-programming/</link>
    <description>Recent content in Pair Programming on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 17 Jun 2015 09:00:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/tags/pair-programming/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Finding the biting point with pair programming</title>
      <link>http://codurance.com/blog/finding-the-biting-point/</link>
      <pubDate>Wed, 17 Jun 2015 09:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/finding-the-biting-point/</guid>
      <description>

&lt;h2 id=&#34;the-inevitable-imbalance-in-pair-programming&#34;&gt;The inevitable imbalance in pair programming.&lt;/h2&gt;

&lt;p&gt;At some point throughout a developers career, no matter their experience, they will most likely find themselves in a situation where they are either the Junior or the Senior of the two in a pair programming session. In this context, being the &lt;strong&gt;Junior&lt;/strong&gt; does not only mean being a less experienced developer, but it could also mean somebody that has not been introduced to the current project yet, or someone who is inexperienced with the language.&lt;/p&gt;

&lt;p&gt;When you find yourself in this situation, you might notice that the junior developer of the two struggles getting to grips with the code, and the senior might feel as if they are carrying the weight of the pairing session on their back. This can certainly end up frustrating for both. As a result, the senior developer will jump in the driving seat behind the keyboard and lead the way, not much is exchanged between the two and the junior developer will simply watch until whatever task is completed, maybe trying to ask a question or provide some help here or there.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/finding-the-biting-point/picture1.png&#34;  class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;So what happens when they switch roles? All of a sudden the junior of the two is put behind the keyboard and struggles to move forward. The senior will become frustrated and impatient, and both members of the team will feel uncomfortable working together, possibly creating tension within the entire working environment. This problem will stagnate and not go away because neither parties feel there is nothing they can do and in order to get the work done &lt;strong&gt;now&lt;/strong&gt;, the senior developer must continue to carry the weight of the work on the back while the junior developer watches.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/finding-the-biting-point/picture2.png&#34;  class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Even worse, what will happen when the junior developer will have to separate and work by themselves? This is both a cause and symptom of the junior developer sitting in the passenger seat too long. He was never able to drive for himself and as a result was never able to find the biting point of the software.&lt;/p&gt;

&lt;h2 id=&#34;finding-the-biting-point&#34;&gt;Finding the biting point?&lt;/h2&gt;

&lt;p&gt;When learning to drive a manual transmission car, the steps in order to move the car forward are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Push the clutch down all the way with your left foot&lt;/li&gt;
&lt;li&gt;Put the car into first gear&lt;/li&gt;
&lt;li&gt;Slowly begin to put your right foot on the gas pedal&lt;/li&gt;
&lt;li&gt;Slowly lift your left foot off of the clutch until the car starts to accelerate&lt;/li&gt;
&lt;/ul&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/finding-the-biting-point/picture3.png&#34;  class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;Finding the sweet spot where the clutch meets the gears was taught to me as &amp;lsquo;Finding the biting point&amp;rsquo;. That biting point is a very specific feeling that you only experience once you have driven a car for yourself. You could watch someone work the pedals a thousand times but until you get behind them yourself you will never get used to their feedback or tension. To me, this intrinsic feeling also exists in software. I can remember times where I have been sitting in the back seat of a pairing session contributing sound and useful ideas and solutions. Once I was handed the keyboard I found myself stalling. This is because I was never able to find the biting point myself and gain my own understanding of the structure and feel of the code. This will most likely have to happen once, better sooner than later.&lt;/p&gt;

&lt;h2 id=&#34;so-what-should-i-do&#34;&gt;So what should I do?&lt;/h2&gt;

&lt;h3 id=&#34;as-a-junior-in-the-pair&#34;&gt;As a Junior in the pair&amp;hellip;&lt;/h3&gt;

&lt;p&gt;I know it&amp;rsquo;s tough to admit ignorance, but everyone has to start somewhere. Ask questions often, if there&amp;rsquo;s a task you think you can handle, ask for the keyboard, request that your partner guides you and is patient with you while you get to grips with the code. Study in your own time. If possible and if you haven&amp;rsquo;t already, clone the repo on your machine and browse the code, branch off and try to add a new feature and see what will happen. Most importantly, be honest. There&amp;rsquo;s nothing wrong with not knowing something, however the same can not be said about holding yourself back.&lt;/p&gt;

&lt;h3 id=&#34;as-a-senior-in-the-pair&#34;&gt;As a Senior in the pair&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Encourage your pair, at regular intervals pass them the keyboard and guide them. Answer their questions where possible. Most importantly, &lt;strong&gt;try to be patient&lt;/strong&gt;. Remember that if you&amp;rsquo;re teaching a less experienced developer, you&amp;rsquo;re not only doing them a favour, but also strengthening your entire team.&lt;/p&gt;

&lt;h3 id=&#34;it-takes-two-to-tango&#34;&gt;It takes two to tango.&lt;/h3&gt;

&lt;p&gt;If you are trying to teach someone who is clearly showing they are not interested in learning, know that you&amp;rsquo;ve tried you&amp;rsquo;re best and don&amp;rsquo;t exert further effort until they are willing. Alternatively, if you&amp;rsquo;re eager to grab the keyboard from someone who is being particularly stubborn, it&amp;rsquo;s probably best to not stir further and just wait for a better opportunity. However this isn&amp;rsquo;t an opportunity to completely switch off, continue contributing where possible.&lt;/p&gt;

&lt;p&gt;Good results will require effort and good will from both sides. Providing that that can be managed, there&amp;rsquo;s no reason for you not to be strengthening your team during every pairing session.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rethinking Pair Programming</title>
      <link>http://codurance.com/blog/rethinking-pair-programming/</link>
      <pubDate>Sun, 15 Mar 2015 22:49:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/rethinking-pair-programming/</guid>
      <description>

&lt;p&gt;By default, we always do our work in pairs. We strongly believe that the quality achieved by two people working on the same task is superior to when done by a single person. However, there are times where pairing is not very efficient.&lt;/p&gt;

&lt;h2 id=&#34;pair-programming-pitfalls&#34;&gt;Pair programming pitfalls&lt;/h2&gt;

&lt;p&gt;In a professional environment, pairing with developers who have a different software development foundation can be slow, tiring, and quite frustrating. Let’s explore a few pair programming pitfalls.&lt;/p&gt;

&lt;h3 id=&#34;pair-programming-can-be-slow-and-frustrating&#34;&gt;Pair programming can be slow and frustrating&lt;/h3&gt;

&lt;p&gt;Having to explain and agree on every single variable name can be extremely annoying. Things get even worse when discussing design decisions. Debates can last minutes, if not hours. Frustration kicks in. How many times, while pairing, we though: “Oh, come on man. How can you disagree with this? It’s common sense. Can we stop debating and just finish the bloody story?” Over the years I came to learn that common sense doesn’t exist. It’s only a phrase people use when they run out of arguments.&lt;/p&gt;

&lt;p&gt;**How to improve it: **Pair-programming becomes far more efficient and pleasant when developers don’t need to discuss basic concepts like the size of a method, Single Responsibility Principle, how to name a variable, and some basic software design principles. When developers have a similar foundation, they can purely focus on finding a better solution to the problem instead of wasting their time with unnecessary discussions. One way to bring the whole team to the same level of understanding is to organise regular technical meetings (hands-on sessions, book club, roundtable discussions, etc.), define team standards, retrospectives, and code reviews.&lt;/p&gt;

&lt;h3 id=&#34;pair-programming-can-be-very-tiring&#34;&gt;Pair programming can be very tiring&lt;/h3&gt;

&lt;p&gt;Spending the whole day pairing with someone can be very tiring. We need to justify and agree on every single line of code. Things that are trivial for one developer may not be as trivial for another developer. As eXtreme Programming becomes more popular, pair programming is becoming mandated in certain companies. Developers are asked to arrive at the same time, break for lunch at the same time, and leave at the same time, just because they need to be pairing full time. By the end of the day, developers are exhausted, as they had no time for themselves.&lt;/p&gt;

&lt;p&gt;**How to improve it: **Developers need some alone time. Regular breaks are important. Using the Pomodoro technique is a good way to force regular breaks. More tips below.&lt;/p&gt;

&lt;h3 id=&#34;pair-programming-can-stifle-creativity&#34;&gt;Pair programming can stifle creativity&lt;/h3&gt;

&lt;p&gt;One of our clients recently asked me if their UX and UI teams should also do their work in pairs. Overall, I think it is a good idea, however, there are times that you need space to create and innovate. There are times when you have a few half-baked ideas you want to explore but you are not in a position to verbalise them yet. This is also true for software design. Sometimes, we need some alone time in order to create. Creativity and innovation very rarely emerge in an environment where you are pressured by time or by a person sitting next to you waiting for you to explain what you are planning to do.&lt;/p&gt;

&lt;p&gt;**How to improve it: **It should be OK for any team member to express her desire to work on a task alone. That doesn’t mean that other team members will not review her work. After working alone for a short period of time, the person could then present her ideas to the rest of the team and choose a pair to polish and finish the work.&lt;/p&gt;

&lt;h3 id=&#34;inexperienced-developers-not-always-benefit-from-pairing&#34;&gt;Inexperienced developers not always benefit from pairing&lt;/h3&gt;

&lt;p&gt;Pair programming is a great way to mentor inexperienced developers. However, it cannot happen 100% of the time. Speaking to our apprentices, they said that although it was great to have someone &lt;em&gt;teaching&lt;/em&gt; them full time, they also needed some time alone to do their own research and make their own mistakes. Developers learn by doing it and they need some space to do things at their own speed. Our apprentices felt that although they were learning a lot from our craftsmen, they were not assimilating everything.&lt;/p&gt;

&lt;p&gt;Pairing an experienced developer with an inexperienced developer is a great way to give the inexperienced developer an idea of how things work. However, the side effect of this is not always positive: the inexperienced developer ends up not spending enough time researching, trying things out, and making mistakes. The inexperienced developer may learn how the more experienced developer does things but she can’t fully understand why.&lt;/p&gt;

&lt;p&gt;**How to improve it: ** A better way to mentor inexperienced developers would be to start a task as a pair, give some high-level directions, and then let the inexperienced developer do the task on her own. If she gets stuck, she can always ask for help. Once she is done, the experienced developer should review her work. At that point, if improvements are suggested, both developers can compare the different approaches.&lt;/p&gt;

&lt;h2 id=&#34;general-guidelines&#34;&gt;General guidelines&lt;/h2&gt;

&lt;p&gt;Like a football team, developers should have the same goals and work as a team. However, we also need to provide space for individual creativity. The best football teams win games not only because of their great teamwork but also because of their individual talent. A single individual play can change the whole game.&lt;/p&gt;

&lt;p&gt;Some people work better in the morning. Others, like myself, work far better in the evenings. But it is important to have a time where the whole team is together, working in pairs. We recently agreed as a team to have our “pairing hours” from 10am to 5pm. This way, people can have some time alone either early in the morning or late in the afternoon.&lt;/p&gt;

&lt;p&gt;By default, we prefer to work in pairs. We have no doubts about the benefits of pair programming. However, we also believe that providing space for individual creativity and learning is essential.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>