<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Craftsmanship and Agile Development</title>
    <link>http://codurance.com/</link>
    <description>Recent content on Software Craftsmanship and Agile Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 16 May 2016 00:20:00 +0000</lastBuildDate>
    <atom:link href="http://codurance.com/atom/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Publish-subscribe model in Kafka</title>
      <link>http://codurance.com/blog/Publish-subscribe-model-in-Kafka/</link>
      <pubDate>Mon, 16 May 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/Publish-subscribe-model-in-Kafka/</guid>
      <description>

&lt;p&gt;This is the fourth post in the series about integrating sync clients with async systems (&lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&#34;&gt;1, &lt;/a&gt;&lt;a href=&#34;http://codurance.com/2016/04/30/akka-basics/&#34;&gt;2, &lt;/a&gt;&lt;a href=&#34;http://codurance.com/2016/05/10/finite-state-machines-with-akka/&#34;&gt;3&lt;/a&gt;). Here we&amp;rsquo;ll try to understand how &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt; works in order to correctly leverage its publish-subscribe implementation.&lt;/p&gt;

&lt;h2 id=&#34;kafka-concepts&#34;&gt;Kafka concepts&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href=&#34;http://kafka.apache.org/documentation.html#introduction&#34;&gt;official documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kafka is a distributed, partitioned, replicated commit log service. It provides the functionality of a messaging system, but with a unique design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kafka runs as a cluster and the nodes are called brokers. Brokers can be leaders or replicas to provide high-availability and fault tolerance. Brokers are in charge of partitions, being the distribution unit where messages are stored. Those messages are ordered and they&amp;rsquo;re accessible by an index called offset. A set of partitions forms a topic, being a feed of messages. A partition can have different consumers, and they access to the messages using its own offset. Producers publish messages into Kafka topics. This diagram from &lt;a href=&#34;http://kafka.apache.org/documentation.html#intro_topics&#34;&gt;Kafka&amp;rsquo;s documentation&lt;/a&gt; could help to understand this:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/topic.png&#34; alt=&#34;Kafka&amp;#39;s topic&#34; title=&#34;Kafka&amp;#39;s topic&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h2 id=&#34;queuing-vs-publish-subscribe&#34;&gt;Queuing vs publish-subscribe&lt;/h2&gt;

&lt;p&gt;Consumer groups is another key concept and helps to explain why Kafka is more flexible and powerful than other messaging solutions like &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;. Consumers are associated to consumer groups. If every consumer belongs to the same consumer group, the topic&amp;rsquo;s messages will be evenly load balanced between consumers; that&amp;rsquo;s called a &amp;lsquo;queuing model&amp;rsquo;. By contrast, if every consumer belongs to different consumer group, all the messages will be consumed in every client; that&amp;rsquo;s called a &amp;lsquo;publish-subscribe&amp;rsquo; model.&lt;/p&gt;

&lt;p&gt;You can have a mix of both approaches, having different logical consumer groups, for different needs, and several consumers inside of every group to increase throughput through parallelism. Again, another diagram from &lt;a href=&#34;http://kafka.apache.org/documentation.html#intro_topics&#34;&gt;Kafka&amp;rsquo;s documentation&lt;/a&gt;:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/consumer-groups.png&#34; alt=&#34;Kafka&amp;#39;s consumer groups&#34; title=&#34;Kafka&amp;#39;s consumer groups&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h2 id=&#34;understanding-our-needs&#34;&gt;Understanding our needs&lt;/h2&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/law_enforcement.png&#34; alt=&#34;Law enforcement architecture&#34; title=&#34;Law enforcement architecture&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;As we saw in previous posts (&lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&#34;&gt;1, &lt;/a&gt;&lt;a href=&#34;http://codurance.com/2016/04/30/akka-basics/&#34;&gt;2, &lt;/a&gt;&lt;a href=&#34;http://codurance.com/2016/05/10/finite-state-machines-with-akka/&#34;&gt;3&lt;/a&gt;) the Items service publishes messages into a Kafka topic called &lt;code&gt;item_deleted&lt;/code&gt;. This message will live in one partition of the topic. To define in which partition the message will live, Kafka provides &lt;a href=&#34;https://kafka.apache.org/090/javadoc/org/apache/kafka/clients/producer/Partitioner.html&#34;&gt;three alternatives&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If a partition is specified in the record, use it&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If no partition is specified but a key is present choose a partition based on a hash of the key&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If no partition or key is present choose a partition in a round-robin fashion&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;item_id&lt;/code&gt; as a key. Consumers contained in different instances of the Law Enforcement service are only interested in particular partitions, as they&amp;rsquo;re keeping internal state for some items. Let&amp;rsquo;s inspect different Kafka consumer implementations to see which is the most convenient for our use case.&lt;/p&gt;

&lt;h2 id=&#34;kafka-consumers&#34;&gt;Kafka Consumers&lt;/h2&gt;

&lt;p&gt;There are three consumers in Kafka: &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/Consumer+Group+Example&#34;&gt;High level consumer&lt;/a&gt;, &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/0.8.0+SimpleConsumer+Example&#34;&gt;Simple Consumer&lt;/a&gt; and &lt;a href=&#34;http://kafka.apache.org/090/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html&#34;&gt;New Consumer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Out of the three consumers, &lt;strong&gt;Simple Consumer&lt;/strong&gt; operates at the lowest-level. It meets our requirements as allows the consumer to &amp;ldquo;consume only a subset of the partitions in a topic in a process&amp;rdquo;. However, as the documentation says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The SimpleConsumer does require a significant amount of work not needed in the Consumer Groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You must keep track of the offsets in your application to know where you left off consuming&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You must figure out which Broker is the lead Broker for a topic and partition&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You must handle Broker leader changes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you read the code suggested for handling those concerns, you&amp;rsquo;ll be quickly discouraged to use this consumer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New Consumer&lt;/strong&gt; offers the right level of abstraction and allows us to subscribe to specific partitions. They suggest the following use case in the documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first case is if the process is maintaining some kind of local state associated with that partition (like a local on-disk key-value store) and hence it should only get records for the partition it is maintaining on disk.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately our system is using Kafka 0.8, and this consumer is only available from 0.9. We don&amp;rsquo;t have the resources to migrate to that version, so we&amp;rsquo;ll need to stick with &lt;strong&gt;High level consumer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That consumer offers a nice API, but it doesn&amp;rsquo;t allow us to subscribe to specific partitions. That means that every instance of the Law Enforcement service will consume every message, even those that are not pertinent. We can achieve that by defining different consumer groups per instance.&lt;/p&gt;

&lt;h2 id=&#34;leveraging-akka-event-bus&#34;&gt;Leveraging Akka Event Bus&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&#34;http://codurance.com/2016/05/10/finite-state-machines-with-akka/&#34;&gt;previous post&lt;/a&gt; we have defined some Finite State Machine actor that is waiting for &lt;code&gt;ItemDeleted&lt;/code&gt; messages.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  when(Active) {
    case Event(ItemDeleted(item), currentItemsToBeDeleted@ItemsToBeDeleted(items)) =&amp;gt;
      val newItemsToBeDeleted = items.filterNot(_ == item)
      newItemsToBeDeleted.size match {
        case 0 =&amp;gt; finishWorkWith(CensorResult(Right()))
        case _ =&amp;gt; stay using currentItemsToBeDeleted.copy(items = newItemsToBeDeleted)
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our Kafka Consumer could forward every message to those actors and let them to discard/filter irrelevant items. However we don&amp;rsquo;t want to overwhelm our actors with redundant and inefficient work, so we&amp;rsquo;ll add a layer of abstraction that will let them discard the proper messages in a really efficient way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;final case class MsgEnvelope(partitionKey: String, payload: ItemDeleted)

class ItemDeletedBus extends EventBus with LookupClassification {
  override type Event = MsgEnvelope
  override type Classifier = String
  override type Subscriber = ActorRef

  override protected def mapSize(): Int = 128

  override protected def publish(event: Event, subscriber: Subscriber): Unit = subscriber ! event.payload

  override protected def classify(event: Event): Classifier = event.partitionKey

  override protected def compareSubscribers(a: Subscriber, b: Subscriber): Int = a.compareTo(b)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/scala/event-bus.html&#34;&gt;Akka Event Bus&lt;/a&gt; offers us subscription by partition that we&amp;rsquo;re missing in our Kafka High Level Consumer. From our Kafka Consumer we&amp;rsquo;ll publish every message into the bus:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;    itemDeletedBus.publish(MsgEnvelope(item.partitionKey, ItemDeleted(item)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the previous post we showed how to subscribe to messages using that partition key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;  itemDeletedBus.subscribe(self, item.partitionKey)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;LookupClassification&lt;/code&gt; will filter unwanted messages, so our actors won&amp;rsquo;t be overloaded.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Thanks to the flexibility that Kafka provides, we were able to design our system understanding different trade-offs. In the next posts we&amp;rsquo;ll see how to coordinate the outcome of those FSMs to provide a sync response to the client.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&#34;&gt;Part 1&lt;/a&gt; | &lt;a href=&#34;http://codurance.com/2016/04/30/akka-basics/&#34;&gt;Part 2&lt;/a&gt; | &lt;a href=&#34;http://codurance.com/2016/05/10/finite-state-machines-with-akka/&#34;&gt;Part 3&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bowling Kata in Clojure, F# and Scala</title>
      <link>http://codurance.com/blog/bowling-kata-in-clojure-fsharp-scala/</link>
      <pubDate>Sun, 15 May 2016 00:01:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/bowling-kata-in-clojure-fsharp-scala/</guid>
      <description>

&lt;p&gt;In one of our evening apprenticeship meetings, a pair was doing the &lt;a href=&#34;http://codingdojo.org/cgi-bin/index.pl?KataBowling&#34;&gt;Bowling Kata&lt;/a&gt; in Java. After reviewing their code, I thought that it would be a good idea to do it myself.&lt;/p&gt;

&lt;p&gt;Every craftsman at Codurance is a polyglot developer and, although we have very similar values, we all have our own preferences when it comes to programming languages and coding styles. As you can imagine, we cannot always avoid cracking a joke or two about all the languages we don’t like so much but other craftsmen in the company do. So, just for fun, quite a few of us decided to do the same kata using our language of choice. It was great to see the same problem solved with different languages. Although there are still a few craftsmen and apprentices working on solving the kata in different languages, here are 3 of my favourite solutions so far (in no particular order):&lt;/p&gt;

&lt;h2 id=&#34;clojure-by-mashooq&#34;&gt;Clojure (by Mashooq)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns bowling.core-test
  (:require [clojure.test :refer :all]
            [bowling.core :refer :all]))

(deftest bowling 
  (testing &amp;quot;strikes for all rolls&amp;quot;
    (is (= 300 (score &amp;quot;XXXXXXXXXXXX&amp;quot;))))

  (testing &amp;quot;normal scores&amp;quot;
    (is (= 99 (score &amp;quot;91919393929291219191&amp;quot;))))

  (testing &amp;quot;normal scores or misses&amp;quot;
    (is (= 90 (score &amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 93 (score &amp;quot;919-9-9-9-9-929-9-9-&amp;quot;))))
  
  (testing &amp;quot;mixture of stikes and normals&amp;quot;
    (is (= 98 (score &amp;quot;9-X8-9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 104 (score &amp;quot;9-X8-9-9-9-9-9-9-X23&amp;quot;)))
    (is (= 28 (score &amp;quot;--X81--------------&amp;quot;)))
    (is (= 27 (score &amp;quot;--X8-1-------------&amp;quot;))))
  
  (testing &amp;quot;spares for all rolls&amp;quot;
    (is (= 150 (score &amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot;))))

  (testing &amp;quot;mixture of spares and normals&amp;quot;
    (is (= 82 (score &amp;quot;9-8/--9-9-9-9-9-9-9-&amp;quot;)))
    (is (= 84 (score &amp;quot;9-8/--9-9-9-9-9-9-9/1&amp;quot;)))
    (is (= 12 (score &amp;quot;--8/1---------------&amp;quot;)))
    (is (= 11 (score &amp;quot;--8/-1--------------&amp;quot;)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns bowling.core)

(defn- spare?[s] (= \/ s))
(defn- strike? [s] (= \X s))
(defn- spare-or-strike? [s] (or (spare? s) (strike? s)))
(defn- miss? [s] (or (= nil s) (= \- s)))

(defn- score-for [s] 
  (cond 
     (spare-or-strike? s)  10
     (miss? s)  0 
     :else (read-string (str s))))

(defn- score-roll [this-roll rem-rolls]
  (cond 
    (strike? this-roll) (+ 10 (score-for (first rem-rolls)) (score-for (first (rest rem-rolls))))
    (spare? this-roll) (+ 10 (score-for (first rem-rolls)))
    (spare? (first rem-rolls)) 0
    :else (score-for this-roll)))

(defn- score-rolls [acc rolls]
  (if (seq rolls)  
    (let [running-score (+ acc (score-roll (first rolls) (rest rolls)))]
      (score-rolls running-score (rest rolls)))
    acc))

(defn- expand-strikes [rolls]
  (seq (reduce str  (map #(if  (strike? %) &amp;quot;X-&amp;quot;  (str %)) (seq rolls)))))

(defn- deduct-extra-rolls [score rolls]
  (- score  (score-rolls 0 (drop 20 (expand-strikes rolls)))))

(defn score [rolls] 
  (deduct-extra-rolls (score-rolls 0 (seq rolls)) rolls))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/mashooq/katas/tree/master/clojure/bowling&#34;&gt;Mash&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;f-by-pedro&#34;&gt;F# (by Pedro)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;namespace BowlingV2.FSharpKatas

    module Bowling = 
        open System

        type private Rolls = Strike | Spare | Roll
        type private Pins = Pins of int
        type private Roll = Rolls * Pins
        
        let private maxRolls = 20
        let private maxPins = 10
        let private noPins = 0
        
        let private pinCountForRoll roll =
            let (Pins pins) = snd roll
            pins
            
        let private pinsFromRawRoll rawRoll =
            Pins (Int32.Parse(rawRoll.ToString()))
            
        let private sparePinsFromRawRoll rawRoll = 
            Pins (maxPins - Int32.Parse(rawRoll.ToString()))

        let private parse roll index rolls =
            let previousRoll = fun () -&amp;gt; Seq.item (index - 1) rolls
            match roll with
            | &#39;-&#39; -&amp;gt; Roll, Pins noPins
            | &#39;/&#39; -&amp;gt; Spare, sparePinsFromRawRoll(previousRoll())
            | &#39;X&#39; -&amp;gt; Strike, Pins maxPins
            | r -&amp;gt; Roll, pinsFromRawRoll r

        let private scoreRoll index rolls =
            let bonusRoll = fun(lookAhead) -&amp;gt;  
                if index + lookAhead &amp;lt; Seq.length rolls 
                then pinCountForRoll (Seq.item (index + lookAhead) rolls) 
                else noPins       

            let exceedsMaxRolls = fun() -&amp;gt;
                rolls 
                |&amp;gt; Seq.take index
                |&amp;gt; Seq.map (fun r -&amp;gt; match r with | (Strike, _) -&amp;gt; 2 | _ -&amp;gt; 1)
                |&amp;gt; Seq.sum &amp;gt;= maxRolls

            match Seq.item index rolls with
                | (_, _) when exceedsMaxRolls() -&amp;gt; noPins
                | (Spare, Pins pins) -&amp;gt; pins + bonusRoll 1
                | (Strike, Pins pins) -&amp;gt; pins + bonusRoll 1 + bonusRoll 2
                | (Roll, Pins pins) -&amp;gt; pins

        let scoreGame rolls =
            let parsedRolls = rolls |&amp;gt; Seq.mapi (fun index roll -&amp;gt; 
                                                    parse roll index rolls)

            parsedRolls
            |&amp;gt; Seq.mapi (fun index _ -&amp;gt; scoreRoll index parsedRolls)
            |&amp;gt; Seq.sum
                     
    module BowlingTests =
        open NUnit.Framework
        open Swensen.Unquote
        open Bowling

        [&amp;lt;Test&amp;gt;]
        let ``calculate scores with no strikes or spares``() =
            test &amp;lt;@ scoreGame &amp;quot;--&amp;quot; = 0 @&amp;gt; 
            test &amp;lt;@ scoreGame &amp;quot;1&amp;quot; = 1 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;13&amp;quot; = 4 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;13521&amp;quot; = 12 @&amp;gt;
            
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing a miss``() =
            test &amp;lt;@ scoreGame &amp;quot;1-5-&amp;quot; = 6 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot; = 90 @&amp;gt;
            
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing spares``() =
            test &amp;lt;@ scoreGame &amp;quot;1/&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/--&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/-5&amp;quot; = 15 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35-&amp;quot; = 21 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/3/23&amp;quot; = 30 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot; = 150 @&amp;gt;
        
        [&amp;lt;Test&amp;gt;]
        let ``calculate scores containing strikes``() =
            test &amp;lt;@ scoreGame &amp;quot;X&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X--&amp;quot; = 10 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X--51&amp;quot; = 16 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;X51&amp;quot; = 22 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;XXXXXXXXXXXX&amp;quot; = 300 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;XXXXXXXXXX12&amp;quot; = 274 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX45&amp;quot; = 103 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X35&amp;quot; = 149 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/&amp;quot; = 153 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/23&amp;quot; = 160 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/X&amp;quot; = 173 @&amp;gt;
            test &amp;lt;@ scoreGame &amp;quot;1/35XXX458/X3/XX6&amp;quot; = 189 @&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/pedromsantos/FSharpKatas/blob/master/BowlingV2.fs&#34;&gt;Pedro&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;scala-by-sandro&#34;&gt;Scala (by Sandro)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.codurance.bowlingkata.full_scoring

import com.codurance.UnitSpec
import com.codurance.bowlingkata.full_scoring.BowlingFullScoreCalculator.scoreFor

class BowlingFullScoreCalculatorShould extends UnitSpec {

	&amp;quot;calculate scores with no strikes or spares&amp;quot; in {
		scoreFor(&amp;quot;11111111112222222222&amp;quot;) should be (30)
	}

	&amp;quot;calculate scores containing a miss&amp;quot; in {
		scoreFor(&amp;quot;--------------------&amp;quot;) should be (0)
		scoreFor(&amp;quot;1-1----------------1&amp;quot;) should be (3)
		scoreFor(&amp;quot;9-9-9-9-9-9-9-9-9-9-&amp;quot;) should be (90)
	}

	&amp;quot;calculate scores containing spares&amp;quot; in {
		scoreFor(&amp;quot;5/11------------3/11&amp;quot;) should be (26)
		scoreFor(&amp;quot;5/5/5/5/5/5/5/5/5/5/5&amp;quot;) should be (150)
	}

	&amp;quot;calculate scores containing strikes&amp;quot; in {
		scoreFor(&amp;quot;XXXXXXXXXXXX&amp;quot;) should be(300)
		scoreFor(&amp;quot;XXXXXXXXXX12&amp;quot;) should be(274)
		scoreFor(&amp;quot;1/35XXX458/X3/23&amp;quot;) should be(160)
		scoreFor(&amp;quot;1/35XXX458/X3/XX6&amp;quot;) should be(189)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package com.codurance.bowlingkata.full_scoring

object BowlingFullScoreCalculator {

	def scoreFor(rolls: String): Int = totalScore(rolls.split(&amp;quot;&amp;quot;).toList)

	private def totalScore(rolls: List[String], index: Int = 0, score: Int = 0): Int = {
		lazy val MISS  = &amp;quot;-&amp;quot;
		lazy val SPARE = (&amp;quot;/&amp;quot;, () =&amp;gt; 10 - rollScoreAt(index - 1) + if_(index &amp;lt; 19, rollScoreAt(index + 1)))
		lazy val STRIKE = (&amp;quot;X&amp;quot;, () =&amp;gt; 10 + if_(index + numberOfPreviousStrikes() &amp;lt; 18,
                                               rollScoreAt(index + 1) + rollScoreAt(index + 2)))

		def numberOfPreviousStrikes() = rolls.mkString.take(index).count(_ == &#39;X&#39;)

		def rollScoreAt(index: Int): Int =
			rolls(index) match {
				case STRIKE._1 =&amp;gt; 10
				case SPARE._1  =&amp;gt; 10 - rolls(index - 1).toInt
				case MISS      =&amp;gt; 0
				case pins      =&amp;gt; pins.toInt
			}

		rolls.drop(index) match {
			case STRIKE._1 :: _ =&amp;gt; totalScore(rolls, index + 1, score + STRIKE._2())
			case SPARE._1 :: _  =&amp;gt; totalScore(rolls, index + 1, score + SPARE._2())
			case MISS :: _      =&amp;gt; totalScore(rolls, index + 1, score)
			case n :: _         =&amp;gt; totalScore(rolls, index + 1, score + n.toInt)
			case List()         =&amp;gt; score
		}
	}

	private def if_(condition: Boolean, ifTrue: =&amp;gt; Int): Int = if (condition) ifTrue else 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See on &lt;a href=&#34;https://github.com/sandromancuso/bowling_kata_scala&#34;&gt;Sandro&amp;rsquo;s GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;fun-passion-and-respect&#34;&gt;Fun, passion, and respect&lt;/h2&gt;

&lt;p&gt;Having fun at work, be surrounded by passionate and talented craftsmen, the respect we have for each other, and the willingness to learn and share, are some of the things I love the most about the Codurance’s culture. What started as apprentices practicing with a kata transformed into a great way to learn and share knowledge among craftsmen and apprentices. Some of our craftsmen and apprentices are also working on their solutions in Kotlin, Haskell, Java, and C#.&lt;/p&gt;

&lt;p&gt;As among ourselves we will probably never agree which one we prefer, we will let you choose which one you like the most. :)&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&#34;https://twitter.com/mashooq&#34;&gt;Mash&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/pedromsantos&#34;&gt;Pedro&lt;/a&gt; for the Clojure and F# implementations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Retrospective in the Park</title>
      <link>http://codurance.com/blog/retrospective-park/</link>
      <pubDate>Sat, 14 May 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/retrospective-park/</guid>
      <description>

&lt;p&gt;The other day, I facilitated a sprint retrospective in the park. The sun was shining, and we had all been working hard to complete our backlog, so it felt like a nice reward for everyone’s efforts. Holding a retrospective outdoors can also give it an energy and sense of enthusiasm that is harder to find in a small room.&lt;/p&gt;

&lt;p&gt;I’ve run outdoor retrospectives before, and have previously followed fairly classic plans, with much arranging of index cards. This has never been a great success, as the slightest breath of a breeze can make a mess of your planning. For this retrospective, I designed a plan to avoid these problems, drawing some ideas from the &lt;a href=&#34;http://retrospectivewiki.org/index.php?title=Appreciative_Retrospective&#34;&gt;Appreciative Retrospective&lt;/a&gt; plan.&lt;/p&gt;

&lt;p&gt;This retrospective took an hour for a team of nine. You’ll need a pile of index cards or sticky notes, and a pen per person. Here’s how to do it:&lt;/p&gt;

&lt;h2 id=&#34;1-choose-your-location&#34;&gt;1. Choose your location&lt;/h2&gt;

&lt;p&gt;Some people are sun lovers, whilst others, like me, burn easily and need some shade, so find a location that will work for everyone. Don&amp;rsquo;t worry too much about the state of the grass, as I suggest you conduct the retrospective standing up, if possible.&lt;/p&gt;

&lt;p&gt;Get everyone to stand in a circle, with enough personal space for everyone, but close enough that you can hear everyone speak.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: It&amp;rsquo;s nice if you can find a location where there won&amp;rsquo;t be too many distractions. We weren&amp;rsquo;t entirely successful: there was a hen party in another corner of the park, whose popping of prosecco corks and parading of an anatomically exaggerated blow-up mannequin was hard to ignore; there was also a group of male models sunning themselves noisily behind us (I’m working at a fashion company, so this is less unusual than it may sound), and three young women were smoking some &lt;em&gt;interesting&lt;/em&gt; cigarettes upwind of us. Nonetheless, our retrospective was a success despite occasional distractions.&lt;/p&gt;

&lt;h2 id=&#34;2-characterise-the-sprint&#34;&gt;2. Characterise the sprint&lt;/h2&gt;

&lt;p&gt;Ask everyone to spend a couple of minutes coming up with three words to characterise the sprint; then go clockwise round the circle and ask each person to tell the team their three words.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: It&amp;rsquo;s surprising how much difficulty people have sticking to three words; the important focus of this task is not the three-word limit, but getting a concise summary of the sprint.&lt;/p&gt;

&lt;h2 id=&#34;3-thank-your-neighbour&#34;&gt;3. Thank your neighbour&lt;/h2&gt;

&lt;p&gt;Moving anticlockwise around the team, ask each team member to thank their neighbour for something they have done during this sprint.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: Our Scrum Master broke the rules by thanking the whole team for their efforts. The focus of this task is to generate a positive mood across the team, and it&amp;rsquo;s important that no one misses out on individual thanks, so I asked him to thank his neighbour for something as well.&lt;/p&gt;

&lt;h2 id=&#34;4-describe-what-went-well&#34;&gt;4. Describe what went well&lt;/h2&gt;

&lt;p&gt;Hand each person three cards, and give them three minutes to write down three things that went well during the sprint. Going clockwise round the circle from a different starting point, ask each person to read out their three successes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: It&amp;rsquo;s useful for the facilitator to observe and comment on common themes, as this can help reinforce good practice.&lt;/p&gt;

&lt;h2 id=&#34;5-describe-what-could-improve&#34;&gt;5. Describe what could improve&lt;/h2&gt;

&lt;p&gt;Hand each person three more cards, and give them another three minutes to write down three things that could have gone even better during the sprint. Then go anticlockwise round the circle and ask each person to read out their three improvements.&lt;/p&gt;

&lt;h2 id=&#34;6-group-the-improvements&#34;&gt;6. Group the improvements&lt;/h2&gt;

&lt;p&gt;Instead of arranging the cards on a whiteboard (which isn&amp;rsquo;t practical in the park), appoint a champion for each improvement. Ask the first person to choose one of the improvements they suggested, and then get everyone else to hand this person any cards that describe a similar improvement. Keep running round the team until each team member has just one group of cards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: There&amp;rsquo;s a chance that you&amp;rsquo;ll end up with more themes than team members, in which case you&amp;rsquo;ll have to make a decision to drop some of these themes; in our case we had fewer common themes than team members, so we didn&amp;rsquo;t have to do this.&lt;/p&gt;

&lt;h2 id=&#34;7-select-and-discuss-the-most-common-themes&#34;&gt;7. Select and discuss the most common themes&lt;/h2&gt;

&lt;p&gt;Rather than dot-voting, which again is impractical in the park, select the commonest themes. Ask everyone with any cards to take a step into the circle. Then ask everyone with just one card to take a step out again; then everyone with just two cards; then three, and so on until just three people are left in the inner circle.&lt;/p&gt;

&lt;p&gt;Then have a three-minute discussion of each of these suggested improvements, with the focus of identifying at least one action per theme for the next sprint. Ensure someone is assigned to each action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: We ran slightly over the three minutes assigned to each theme, but this wasn&amp;rsquo;t a problem; if we hadn&amp;rsquo;t had a time limit, I suspect the conversation would have been much less focused.&lt;/p&gt;

&lt;h2 id=&#34;8-round-off-the-retrospective&#34;&gt;8. Round off the retrospective&lt;/h2&gt;

&lt;p&gt;Finally, going round the circle clockwise, ask everyone to describe how they felt about the retrospective itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observations&lt;/strong&gt;: The feedback was very positive. The team had clearly enjoyed the opportunity to get out of the office, and they felt that the session had been successful: everyone was engaged and we came up with some good actions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Initiative Circles</title>
      <link>http://codurance.com/blog/initiative-circles/</link>
      <pubDate>Fri, 13 May 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/initiative-circles/</guid>
      <description>&lt;p&gt;We have been trying to encourage decentralised decision making at Codurance. To that effect, everyone within the company understands that they have the power to make any decision they need to make so long as they seek advise from the people that may be impacted. In order to help people make effective decisions, all company information is available to everyone in the company, including financials and salaries. This is all well and good, but in practice people do not simply go and start making informed strategic decisions just because they have the power to do so. For one, they are busy with their day jobs and simply do not have much time to look at the company holistically. Even if they have some wonderful ideas, they may not have the inclination or confidence to kick-off the initiative.&lt;/p&gt;

&lt;p&gt;This has led us to introduce of Initiative Circles. We have a board in &lt;a href=&#34;https://trello.com&#34;&gt;Trello&lt;/a&gt; with the simple &lt;em&gt;Backlog, In Progress, and Complete&lt;/em&gt; workflow. When someone comes up with anything tactical or strategic they can add it as an initiative to the backlog. The only perquisite is that the initiative must have a focused and achievable objective. The initiative can be moved into “In Progress” when 3 or more individuals volunteer to be full-time members of that initiative. The members have full authority, responsibility and accountability to fulfil the objective of that initiative. They assign an aspirational completion date for the initiative before moving it into “In Progress”. The date may change as the initiative progresses. The initiative will be blocked if the members drop below 3. We ask people to try and avoid taking on initiatives that they cannot dedicate time towards, so that blocked initiatives are kept to a minimum.&lt;/p&gt;

&lt;p&gt;A regular update regarding the progress of the initiative is provided to the rest of the company. Any decisions made by an Initiative Circle is communicated to the rest of the company via our usual communication channels. If anyone has strong objections, they will voice those directly with the members of the Initiative Circle. The circle is not expected to satisfy everyone in the company with regards to their decisions. However, all members within the circle must agree to the decisions made by that circle. No decision within the company is written in stone and may be modified by subsequent decisions. So in case people strongly disagree with the outcomes of an initiative, they are welcome to create a new initiative to replace existing policies and practices.&lt;/p&gt;

&lt;p&gt;We have integrated Initiative Circles Trello board with the &lt;a href=&#34;https://slack.com&#34;&gt;Slack&lt;/a&gt; channel so that all updates are posted there automatically. Everyone is subscribed to this channel and can keep abreast of the progress of current Initiative Circles and proposal for new initiatives. If the objective of an initiative or it&amp;rsquo;s completion date is changed then the rest of the company is notified via this channel.&lt;/p&gt;

&lt;p&gt;So far this has proven very successful. This simple process has allowed us to synchronise our efforts to shape both tactical and strategic direction for Codurance. It has also allowed us to seek support from others within the company in a very natural way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AWS Lambda for Beginners</title>
      <link>http://codurance.com/blog/aws-lambdas/</link>
      <pubDate>Wed, 11 May 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/aws-lambdas/</guid>
      <description>

&lt;p&gt;AWS Lambda is a compute service from Amazon. It makes deployment and provisioning very simple and fits very well with microservices based architecture. You can find out more about AWS Lambda &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/welcome.html&#34;&gt;here&lt;/a&gt;. Currently supported platforms are JVM, Node JS and Python.&lt;/p&gt;

&lt;p&gt;The programming model for the lambdas consists of &lt;strong&gt;Handler, Context Object, Logging and Exceptions&lt;/strong&gt;. These are described &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/programming-model-v2.html&#34;&gt;here&lt;/a&gt;. Lambda must not hold state because they are brought up and down and replicated as needed. Persistent state should be stored in a service that is outside the lifecycle of the lambda such as Amazon DynamoDB, S3 etc.&lt;/p&gt;

&lt;p&gt;First of all follow the instructions &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/setup.html&#34;&gt;here&lt;/a&gt; to setup an AWS Account and AWS Command-line Interface and note down your account id.&lt;/p&gt;

&lt;h3 id=&#34;step-1-the-code&#34;&gt;Step 1: The Code&lt;/h3&gt;

&lt;p&gt;The most basic lambda will look like the following in Python:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def lambda_handler(event, context):
  return &amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or like the following in Java:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package example;

import com.amazonaws.services.lambda.runtime.Context; 

public class Hello {
    public String lambdaHandler(String event, Context context) {
        return &amp;quot;Hello World!&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can follow the, somewhat lengthy, instructions &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/get-started-create-function.html&#34;&gt;here&lt;/a&gt; to deploy this function … but that’s no fun! Let’s do it devops style ;)&lt;/p&gt;

&lt;p&gt;Paste the above Python code in a file called &lt;code&gt;helloworld.py&lt;/code&gt;. If you want to use the Java version then follow the instructions &lt;a href=&#34;http://docs.aws.amazon.com/lambda/latest/dg/java-create-jar-pkg-maven-no-ide.html&#34;&gt;here&lt;/a&gt; to build your lambda and create a deployment package using Maven.&lt;/p&gt;

&lt;h3 id=&#34;step-2-the-role&#34;&gt;Step 2: The Role&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;trust.json&lt;/code&gt; file . The trust allows our function to assume the &lt;a href=&#34;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html&#34;&gt;role&lt;/a&gt; of an AWS Lambda.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;trust.json&lt;/code&gt; we are allowing the function to assume the role of a &lt;code&gt;lambda.amazonaws.com&lt;/code&gt; service, otherwise the infra will not allow our function to run.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [{
    &amp;quot;Sid&amp;quot;: &amp;quot;&amp;quot;,
    &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
    &amp;quot;Principal&amp;quot;: {
      &amp;quot;Service&amp;quot;: &amp;quot;lambda.amazonaws.com&amp;quot;
    },
    &amp;quot;Action&amp;quot;: &amp;quot;sts:AssumeRole&amp;quot;
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-3-the-deployment&#34;&gt;Step 3: The Deployment&lt;/h3&gt;

&lt;p&gt;Create the following script (&lt;code&gt;deploy.sh&lt;/code&gt;). &lt;em&gt;Note: the script assumes that you have the &lt;code&gt;AWS_ACCOUNT_ID&lt;/code&gt; environment variable set.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

### Create the lambda package
zip -j helloworld.zip *.py

### Create the role for the lambda to assume
role=&amp;quot;helloworld_exec_role&amp;quot;
trust=&amp;quot;trust.json&amp;quot;
aws iam create-role --role-name $role --assume-role-policy-document file://$trust
aws iam update-assume-role-policy --role-name $role --policy-document file://$trust

### Create the lambda function
function_name=&amp;quot;helloworld&amp;quot;
handler_name=&amp;quot;helloworld.lambda_handler&amp;quot;
package_file=helloworld.zip
runtime=python2.7
aws lambda create-function \
  --function-name $function_name \
  --handler $handler_name \
  --runtime $runtime \
  --memory 512 \
  --timeout 60 \
  --role arn:aws:iam::${AWS_ACCOUNT_ID}:role/$role \
  --zip-file fileb://$package_file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or for Java:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

### Create the lambda package
mvn package

### Create the role for the lambda to assume
role=&amp;quot;helloworld_exec_role&amp;quot;
trust=&amp;quot;trust.json&amp;quot;
aws iam create-role --role-name $role --assume-role-policy-document file://$trust
aws iam update-assume-role-policy --role-name $role --policy-document file://$trust

### Create the lambda function
function_name=&amp;quot;helloworld&amp;quot;
handler_name=&amp;quot;example.Hello::lambdaHandler&amp;quot;
package_file=&amp;quot;target/lambda-java-example-1.0-SNAPSHOT.jar&amp;quot;
runtime=&amp;quot;java8&amp;quot;
aws lambda create-function \
  --function-name $function_name \
  --handler $handler_name \
  --runtime $runtime \
  --memory 512 \
  --timeout 60 \
  --role arn:aws:iam::${AWS_ACCOUNT_ID}:role/$role \
  --zip-file fileb://${package_file}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make the script executable &lt;code&gt;chmod +x deploy.sh&lt;/code&gt; and deploy your lambda &lt;code&gt;./deploy.sh&lt;/code&gt;. You may get the following error: &amp;ldquo;The role defined for the function cannot be assumed by Lambda.&amp;rdquo; This is because the role has not been replicated through in the Amazon infra. Just run the deploy script again. It will complain that the role already exists but this time the lambda creation should pass. In the future we will look at a status check to make sure that the role has been fully created before we deploy the function.&lt;/p&gt;

&lt;h3 id=&#34;step-5-the-execution&#34;&gt;Step 5: The Execution!&lt;/h3&gt;

&lt;p&gt;Invoke your lambda with the below command. You should see the result in the file called &lt;code&gt;output.txt&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aws lambda invoke --invocation-type RequestResponse --function-name helloworld --payload &#39;[&amp;quot;&amp;quot;]&#39; output.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;step-6-the-cleanup&#34;&gt;Step 6: The Cleanup&lt;/h3&gt;

&lt;p&gt;To delete the lambda function and then the role paste the following in &lt;code&gt;delete.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
role=&amp;quot;helloworld_exec_role&amp;quot;
function_name=&amp;quot;helloworld&amp;quot;
aws lambda delete-function --function-name $function_name
aws iam delete-role --role-name $role
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then make the script executable &lt;code&gt;chmod +x delete.sh&lt;/code&gt; and execute &lt;code&gt;./delete.sh&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-7-relax-you-have-arrived&#34;&gt;Step 7: Relax &amp;hellip; you have arrived ;)&lt;/h3&gt;

&lt;p&gt;&amp;hellip; and wait for the next post on AWS frolics&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Finite state machines with Akka</title>
      <link>http://codurance.com/blog/finite-state-machines-with-akka/</link>
      <pubDate>Tue, 10 May 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/finite-state-machines-with-akka/</guid>
      <description>

&lt;p&gt;As you could remember from previous posts, &lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&#34;&gt;Part 1&lt;/a&gt; and   &lt;a href=&#34;http://codurance.com/2016/04/30/akka-basics/&#34;&gt;Part 2&lt;/a&gt;, we&amp;rsquo;re implementing a solution that integrates a sync client with an async system. Today we&amp;rsquo;ll see how to keep track of the async operations so we can provide a sync response to the client. Let&amp;rsquo;s start with the architectural diagram.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/law_enforcement.png&#34; alt=&#34;Law enforcement architecture&#34; title=&#34;Law enforcement architecture&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;We can understand the system through an example. The police sends us a request to delete an illegal item, and it expects a response in 10 seconds. Relevant statuses, for this example, are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;200: the item has been successfully deleted in every container that it was published in&lt;/li&gt;
&lt;li&gt;404: the item doesn&amp;rsquo;t exist in our system&lt;/li&gt;
&lt;li&gt;504: timeout trying to delete the item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The law enforcement service communicates with the Items service asynchronously using &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;. That means that we need to subscribe to a &lt;a href=&#34;http://kafka.apache.org/documentation.html#intro_topics&#34;&gt;topic&lt;/a&gt; called &lt;code&gt;item_deleted&lt;/code&gt;. To add complexity to the system, we need to handle some multiplexing as the item could be published in different containers as the personal timeline or different groups. Let&amp;rsquo;s define what we mean with state, before getting into the details of our solution.&lt;/p&gt;

&lt;h2 id=&#34;defining-state&#34;&gt;Defining State&lt;/h2&gt;

&lt;p&gt;State is the ability to keep track of what happened in our system. A stateless application would be a pure function that doesn&amp;rsquo;t have any side effects. It receives an input, transforms it following some rules and returns an output. Such stateless applications are not very useful in a business context. Business and users want to know what happened in the past, so they can make informed decisions.&lt;/p&gt;

&lt;p&gt;We don&amp;rsquo;t need to keep the state in our application server, though. State is often stored in datastores or in clients. One canonical example is session management in an http-based application. Http is a stateless protocol meaning that to keep state between the requests, we&amp;rsquo;ll need to do it ourselves, without help from the protocol.&lt;/p&gt;

&lt;p&gt;Sticky sessions was a popular solution some years ago. State is stored in the server&amp;rsquo;s memory, so clients need to keep track of which server has been assigned to them. This solution has several problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fault tolerance: if the server crashes the session is lost. The user experience in such cases is really bad&lt;/li&gt;
&lt;li&gt;Scalability: if some server is overwhelmed we can&amp;rsquo;t easily scale out, as some users are tied to that particular server until the end of the session. Replicating sessions between servers is pretty complex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A different approach is keeping the session in cookies on the client and/or in some datastore like &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt;. Thanks to that we keep our servers stateless, facilitating load balancers to distribute requests efficiently.&lt;/p&gt;

&lt;p&gt;This example takes us through state between requests, but we could have state inside a single request. Let&amp;rsquo;s see how OOP handles state.&lt;/p&gt;

&lt;h2 id=&#34;state-and-behaviour-in-oop&#34;&gt;State and Behaviour in OOP&lt;/h2&gt;

&lt;p&gt;Objects and Actors are responsible for keeping their own state. That encapsulation forces clients to interact with that state through exposed interfaces. State affects the object&amp;rsquo;s behaviour as we can see in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class Account(var balance: Int, var overdraft: Int = 0) {

  def deposit(value: Int) = {
      balance = balance + value
  }

  def withdrawal(value: Int) = {
    val remaining = balance - value
    if (remaining &amp;lt; 0) {
      balance = 0
      overdraft = overdraft + remaining.abs
      notifyAccountHolder(overdraft)
    } else {
      balance = remaining
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re swapping the behaviour of withdrawal depending on the state contained in balance. As soon as this code gets more special cases and branches the readability and maintainability worsens. We could use polymorphism, composition or simply extracting private methods in order to make that complexity bearable. Akka provides a really handy DSL called &lt;a href=&#34;https://www.wikiwand.com/en/Finite-state_machine&#34;&gt;Finite State Machines&lt;/a&gt; to achieve that.&lt;/p&gt;

&lt;h2 id=&#34;finite-state-machines&#34;&gt;Finite State Machines&lt;/h2&gt;

&lt;p&gt;As Erlang documentation &lt;a href=&#34;http://erlang.org/documentation/doc-4.8.2/doc/design_principles/fsm.html&#34;&gt;states&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A FSM can be described as a set of relations of the form:&lt;/p&gt;

&lt;p&gt;State(S) x Event(E) -&amp;gt; Actions (A), State(S&amp;rsquo;)&lt;/p&gt;

&lt;p&gt;These relations are interpreted as meaning:&lt;/p&gt;

&lt;p&gt;If we are in state S and the event E occurs, we should perform the actions A and make a transition to the state S&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our example:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;State(positive balance) x Event(significative withdrawal) -&amp;gt; Actions (update balance, withdrawal, and notify account holder), State(negative balance)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile in a negative balance state we could define different rules, as how many times we&amp;rsquo;ll allow the overdraft operation.&lt;/p&gt;

&lt;h2 id=&#34;finite-state-machines-in-akka&#34;&gt;Finite State Machines in Akka&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s see a diagram about the architecture that we&amp;rsquo;re going to implement from a lower point of view:&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/fsm.png&#34; alt=&#34;FSM architecture&#34; title=&#34;FSM architecture&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;The Law enforcement service will contain multiple instances of ItemCensor actor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  class ItemCensor extends Actor with FSM[State, Data]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to keep the example easy to understand, we&amp;rsquo;ll model only two possible states. Simple FSMs are well designed using the &lt;a href=&#34;http://doc.akka.io/docs/akka/current/scala/actors.html#Become_Unbecome&#34;&gt;become/unbecome&lt;/a&gt; functionality.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to note the difference between State and Data. You could think of State as the labels of the visual representation of your FSM. The Data is local to every state.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;sealed trait State

case object Idle extends State

case object Active extends State
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;sealed trait Data

case object Uninitialized extends Data

final case class ItemsToBeDeleted(items: Seq[Item]) extends Data
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;case class Item(itemId: UUID, containerId: UUID, containerType: String) {
  def partitionKey = s&amp;quot;${itemId.toString}-${containerId.toString}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;first-steps-with-fsm&#34;&gt;First steps with FSM&lt;/h2&gt;

&lt;p&gt;In future posts we&amp;rsquo;ll see how to create actors and manage its lifecycle. For now it&amp;rsquo;s enough to know that in our system there is an actor with coordination responsibilities that is in charge of creating, resuming and pooling these ItemCensor actors. When the coordinator creates an instance this is executed inside the FSM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  startWith(Idle, Uninitialized)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That Akka method sets the initial state and in our case an empty state data. Now we&amp;rsquo;re ready to receive messages:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;when(Idle) {
case Event(ItemsReported(items), _) =&amp;gt;
  items match {
    case List() =&amp;gt; finishWorkWith(CensorResult(Left(ItemNotFound)))
    case items =&amp;gt;
      setTimer(&amp;quot;CensorTimer&amp;quot;, CensorTimeout, 10 seconds)
      items.foreach(item =&amp;gt; {
        pipe(itemReportedProducer.publish(item)) to self
        itemDeletedBus.subscribe(self, item.partitionKey)
      })
      goto(Active) using ItemsToBeDeleted(items)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s explain this snippet. &lt;code&gt;when&lt;/code&gt; method defines the scope of some state. When in &lt;code&gt;Idle&lt;/code&gt; state this actor will receive messages of type &lt;code&gt;ItemsReported&lt;/code&gt;. The partial function that you define to match messages has some particularity. FSM wraps received messages into &lt;code&gt;Event&lt;/code&gt; objects and include current state data. We pattern match over the message and if we figure out that there are no item in any container we don&amp;rsquo;t even start the work (this will eventually lead to a 404 response). Otherwise we start a timer that will send a message of type &lt;code&gt;CensorTimeout&lt;/code&gt; after 10 seconds.&lt;/p&gt;

&lt;p&gt;After that we publish every item into Kafka. Remember that a single physical item can live in different containers, so that&amp;rsquo;s why we talk about &lt;code&gt;items&lt;/code&gt;. &lt;code&gt;ItemReportedProducer&lt;/code&gt; returns a future and we can &lt;code&gt;pipe&lt;/code&gt; it into the same actor. Thanks to that we can listen to failures of that future and make the process fail early.&lt;/p&gt;

&lt;p&gt;We subscribe the item into an &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/java/event-bus.html&#34;&gt;Akka Event Bus&lt;/a&gt;, so this actor can react exclusively to its deleted items. Finally, we&amp;rsquo;ll move the FSM into Active state including the state data of &lt;code&gt;ItemsToBeDeleted&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;updating-data-state-in-a-fsm&#34;&gt;Updating Data State in a FSM&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ItemCensor&lt;/code&gt; actor needs to wait until Items service finishes deleting the items. Items service will publish some events into Kafka, and our Event Bus will be subscribed to that topic. &lt;code&gt;ItemCensor&lt;/code&gt; is subscribed to only the items that it&amp;rsquo;s interested in, and the Event Bus will send messages of type &lt;code&gt;ItemDeleted&lt;/code&gt; to the actor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;when(Active) {
case Event(ItemDeleted(item), currentItemsToBeDeleted@ItemsToBeDeleted(items)) =&amp;gt;
  val newItemsToBeDeleted = items.filterNot(_ == item)
  newItemsToBeDeleted.size match {
    case 0 =&amp;gt; finishWorkWith(CensorResult(Right()))
    case _ =&amp;gt; stay using currentItemsToBeDeleted.copy(items = newItemsToBeDeleted)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As soon as we get &lt;code&gt;ItemDeleted&lt;/code&gt; messaged from the Event Bus we update the state data &lt;code&gt;ItemsToBeDeleted&lt;/code&gt;. If we exhaust the items, then we can finish successfully with a &lt;a href=&#34;http://www.scala-lang.org/api/rc2/scala/Either.html&#34;&gt;Right&lt;/a&gt; message. Otherwise we &lt;code&gt;stay&lt;/code&gt; in the same state with the new state data, waiting until new messages arrive.&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-failure&#34;&gt;Dealing with failure&lt;/h2&gt;

&lt;p&gt;FSM in Akka allows you to capture messages that the actor received but no partial function matched it properly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;whenUnhandled {
case Event(CensorTimeout, _) =&amp;gt;
  finishWorkWith(CensorResult(Left(CensorTimeout(&amp;quot;Censor timed out&amp;quot;))))

case Event(failure: Failure, _) =&amp;gt;
  finishWorkWith(CensorResult(Left(CensorException(failure.cause.getMessage))))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;whenUnhandled&lt;/code&gt; will try to match every unhandled message. If after 10 seconds the actor is still around a &lt;code&gt;CensorTimeout&lt;/code&gt; message will be sent by &lt;code&gt;CensorTimer&lt;/code&gt; so we can finish the work with the proper error case. If &lt;code&gt;itemReportedProducer&lt;/code&gt; fails publishing an item to Kafka, this code will receive a &lt;code&gt;Failure&lt;/code&gt; message as we piped that future into &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;finishing-the-fsm&#34;&gt;Finishing the FSM&lt;/h2&gt;

&lt;p&gt;The lifecycle of the FSM will be controlled by an outside actor, called coordinator. Whenever we want to finish the work of this FSM, we&amp;rsquo;ll have to send a message to the coordinator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private def finishWorkWith(message: Any) = {
    coordinator ! message
    goto(Idle)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We don&amp;rsquo;t need to go to &lt;code&gt;Idle&lt;/code&gt; status, but doing it makes it clearer to the reader that that actor is not on duty anymore.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;FSM is in the core of our solution. In next posts we&amp;rsquo;ll see how we integrate, coordinate, and supervise those FSMs so they can serve its purpose of bridging sync clients with async systems. At the same time we&amp;rsquo;ll see how Kafka and Akka Event Bus implement its own versions of pub-sub philosophy, so they can react asynchronously to changes in our system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&#34;&gt;Part 1&lt;/a&gt; | &lt;a href=&#34;http://codurance.com/2016/04/30/akka-basics/&#34;&gt;Part 2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Smells – Part II</title>
      <link>http://codurance.com/blog/code-smells%E2%80%93part-two/</link>
      <pubDate>Fri, 06 May 2016 12:10:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/code-smells%E2%80%93part-two/</guid>
      <description>

&lt;p&gt;In the last post, &lt;a href=&#34;http://codurance.com/2016/03/17/code-smells-part-I/&#34;&gt;Code Smells - Part I&lt;/a&gt;,  I talked about the bloaters: they are code smells that can be identified as Long Methods, Large Classes, Primitive Obsessions, Long Parameter List and Data Clumps. In this one, I would like to dig into the &lt;strong&gt;Object-Orientation Abusers&lt;/strong&gt; and the &lt;strong&gt;Change Preventers&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;object-orientation-abusers&#34;&gt;Object-Orientation Abusers&lt;/h2&gt;

&lt;p&gt;This type of code smell usually happens when object-oriented principles are incomplete or incorrectly applied.&lt;/p&gt;

&lt;h4 id=&#34;switch-statements&#34;&gt;Switch Statements&lt;/h4&gt;

&lt;p&gt;This case is simple to identify: we have a switch case. But you should consider it a smell too if you find a sequence of ifs. (That&amp;rsquo;s a switch case in disguise.)&lt;/p&gt;

&lt;p&gt;Why are switch statements bad? Because when a new condition is added, you have to find every occurrence of that switch case.&lt;/p&gt;

&lt;p&gt;So while talking to &lt;a href=&#34;https://twitter.com/DHatanian&#34;&gt;David&lt;/a&gt;, he asked me: and what happens if I encapsulate the switch into a method, is it acceptable then? That&amp;rsquo;s really a good question&amp;hellip; If your switch case is only used to &amp;ldquo;take care&amp;rdquo; of one behaviour and that&amp;rsquo;s it, then it might be ok. Remember identifying a code smell doesn&amp;rsquo;t mean that you have to get always rid of it: it&amp;rsquo;s a trade off. If you find your switch statement replicated and each replication has  different behaviour, then you cannot simply isolate the switch statement in a method. You need to find a proper &amp;ldquo;home&amp;rdquo; for it to be in. As a rule of thumb, you should think of polymorphism when you find yourself in this situation. There are two refactoring techniques that we can apply here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Replace Type Code with Subclasses&lt;/em&gt;&lt;/strong&gt;
This technique consists of creating subclasses for each switch case and applying the respective behaviour to these subclasses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Replace Type Code With Strategy&lt;/em&gt;&lt;/strong&gt;
Similar to the above one, in this case, you should make use of one of the patterns: &lt;a href=&#34;https://en.wikipedia.org/wiki/State_pattern&#34;&gt;State&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Strategy_pattern&#34;&gt;Strategy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So when to use one or the other? If the &lt;strong&gt;&lt;em&gt;Type Code&lt;/em&gt;&lt;/strong&gt; does not change the behaviour of a class you can use the &lt;strong&gt;&lt;em&gt;Subclasses&lt;/em&gt;&lt;/strong&gt; technique. Separating each behaviour into its appropriate subclass will enforce the &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;Single Responsibility Principle&lt;/a&gt; and make the code more readable in general. If you need to add another case, you just add a new class to your code without having to modify any other code. So you apply the &lt;a href=&#34;https://en.wikipedia.org/wiki/Open/closed_principle&#34;&gt;Open/Closed Principle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You should use the Strategy approach when the &lt;strong&gt;&lt;em&gt;Type Code&lt;/em&gt;&lt;/strong&gt; affects the behaviour of your classes. If you&amp;rsquo;re changing the state of the class, fields and many other actions then you should use the &lt;a href=&#34;https://en.wikipedia.org/wiki/State_pattern&#34;&gt;State Pattern&lt;/a&gt;. If it only affects how you select a behaviour of the class then the &lt;a href=&#34;https://en.wikipedia.org/wiki/Strategy_pattern&#34;&gt;Strategy Pattern&lt;/a&gt; is a better choice.&lt;/p&gt;

&lt;p&gt;Hmm&amp;hellip; It&amp;rsquo;s a little confusing, no? So let&amp;rsquo;s try with an example.&lt;/p&gt;

&lt;p&gt;You have an enumeration EmployeeType:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public enum EmployeeType 
{ 		
	Worker, 		
	Supervisor, 		
	Manager 	
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a class Employee:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Employee 
{     
	private float salary;     
	private float bonusPercentage;     
	private EmployeeType employeeType;      

	public Employee(float salary, float bonusPercentage, EmployeeType employeeType)     
	{         
		this.salary = salary;         
		this.bonusPercentage = bonusPercentage;         
		this.employeeType = employeeType;     
	}      

	public float CalculateSalary()      
	{         
		switch (employeeType)          
		{             
			case EmployeeType.Worker:                 
				return salary;              
			case EmployeeType.Supervisor:                 
				return salary + (bonusPercentage * 0.5F);             
			case EmployeeType.Manager:                 
				return salary + (bonusPercentage * 0.7F);         
		}

        return 0.0F;     
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It all looks ok. But what happen if you need to calculate the year bonus? You will add another method like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public float CalculateYearBonus()  
{     
	switch (employeeType)      
	{         
		case EmployeeType.Worker:             
			return 0;          
		case EmployeeType.Supervisor:             
			return salary + salary * 0.7F;         
		case EmployeeType.Manager:             
			return salary + salary * 1.0F;	     
	}

	return 0.0F;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the repetition of the switch? So let&amp;rsquo;s try first the subclass approach: Here is the superclass:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;abstract public class Employee  
{ 

	  protected float salary;     
	protected float bonusPercentage;      

	public Employee(float salary, float bonusPercentage)     
	{         
		this.salary = salary;         
		this.bonusPercentage = bonusPercentage;     
	}      

	abstract public float CalculateSalary();

	  virtual public float CalculateYearBonus()      
	{ 
	    return 0.0F;     
	}
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here we have the subclasses:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Worker: Employee  
{ 

	public Worker(float salary, float bonusPercentage)   
		: base(salary, bonusPercentage)  
	{}    

	 override public float CalculateSalary()      
	 {         
	 	return salary;      
	 }
 }

public class Supervisor : Employee 
{     

	public Supervisor(float salary, float bonusPercentage) 
	        : base(salary, bonusPercentage)     
	{}      

	override public float CalculateSalary()      
	{         
		return salary + (bonusPercentage * 0.5F);     
	}      

	public override float CalculateYearBonus()     
	{         
		return salary + salary * 0.7F;     
	}
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the Strategy approach we would create an interface for calculating the remuneration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IRemunerationCalculator  	
{ 		
	float CalculateSalary(float salary); 		
	float CalculateYearBonus(float salary); 	
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the interface in place, we can now pass to the employee any class that conforms to that protocol and calculate the correct salary/bonus.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Employee
{     
	private float salary;     
	private IRemunerationCalculator remunerationCalculator;      

	public Employee(float salary, IRemunerationCalculator remunerationCalculator)     
	{
        this.salary = salary;         
        this.remunerationCalculator = remunerationCalculator;     
    }      

    public float CalculateSalary()     
    {         
    	return remunerationCalculator.CalculateSalary(salary);     
    } 			     

    public float CalculateYearBonus()      
    {         
    	return remunerationCalculator.CalculateYearBonus(salary);     
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;temporary-field&#34;&gt;Temporary Field&lt;/h4&gt;

&lt;p&gt;This case occurs when we are calculating a big algorithm that needs several input variables. Creating these fields in the class has no value most of the time because they are just used for this specific calculation. And this can be dangerous too because you have to be sure you reinitialize them before you start the next computation.&lt;/p&gt;

&lt;p&gt;Here the best refactoring technique is to use &lt;strong&gt;&lt;em&gt;Replace Method with Method Object&lt;/em&gt;&lt;/strong&gt;, which will extract the method into a separate class. Then you can split the method into several methods within the same class.&lt;/p&gt;

&lt;h4 id=&#34;refused-bequest&#34;&gt;Refused Bequest&lt;/h4&gt;

&lt;p&gt;This code smell is a little tricky to detect because this happens when a subclass doesn&amp;rsquo;t use all the behaviours of its parent class. So it&amp;rsquo;s as if the subclass &amp;ldquo;refuses&amp;rdquo; some behaviours (&amp;ldquo;bequest&amp;rdquo;) of its parent class.&lt;/p&gt;

&lt;p&gt;In this case, if it makes no sense to continue to use inheritance, the best refactoring technique is to change to &lt;strong&gt;&lt;em&gt;Delegation&lt;/em&gt;&lt;/strong&gt;: we can get rid of the inheritance by creating a field of the parent&amp;rsquo;s classes type in our subclass. This way every time you need the methods from the parent class you just delegate them to this new object.&lt;/p&gt;

&lt;p&gt;When the inheritance is the correct thing to do, then move all unnecessary fields and methods from the subclass. Extract all methods and fields from the subclass and parent class and put them in a new class. Make this new class the SuperClass, from whom the subclass and parent class should inherit. This technique is called &lt;strong&gt;&lt;em&gt;Extract Superclass&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;alternative-classes-with-different-interfaces&#34;&gt;Alternative Classes with Different Interfaces&lt;/h4&gt;

&lt;p&gt;Hmm, this case makes me think of &amp;ldquo;lack of communication&amp;rdquo; between members of the same team because this happens when we have two classes that do the same thing but have different names for their methods.
Start by &lt;strong&gt;&lt;em&gt;Renaming Methods&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;Moving Method&lt;/em&gt;&lt;/strong&gt;, so you can have both classes implementing the same interface. In some cases, only part of the behaviour is duplicated in both classes. If so, try &lt;strong&gt;&lt;em&gt;Extract Superclass&lt;/em&gt;&lt;/strong&gt; and make the original classes the subclasses.&lt;/p&gt;

&lt;h2 id=&#34;change-preventers&#34;&gt;Change Preventers&lt;/h2&gt;

&lt;p&gt;Oh boy! This kind of code smells are the ones you really want to avoid. These are the ones that when you make a change in one place, you have to go basically throughout your code-base making changes in other places too. So it&amp;rsquo;s a nightmare that all of us want to avoid!&lt;/p&gt;

&lt;h4 id=&#34;divergent-change&#34;&gt;Divergent Change&lt;/h4&gt;

&lt;p&gt;This is the case when you find yourself changing the same class for several different reasons. This means that you are violating the [Single Responsibility Principle](&lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design&#34;&gt;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design&lt;/a&gt;) (which has to do with separation of concerns).&lt;/p&gt;

&lt;p&gt;The refactoring technique applied here is &lt;strong&gt;&lt;em&gt;Extract Class&lt;/em&gt;&lt;/strong&gt; since you want to extract the different behaviours into different classes.&lt;/p&gt;

&lt;h4 id=&#34;shotgun-surgery&#34;&gt;Shotgun Surgery&lt;/h4&gt;

&lt;p&gt;This means that when you make a small change in a class, you have to go and change several classes at the same time.&lt;/p&gt;

&lt;p&gt;Even though it seems the same as the &lt;strong&gt;&lt;em&gt;Divergent Change&lt;/em&gt;&lt;/strong&gt; smell, in reality, they are opposite of each other: &lt;strong&gt;&lt;em&gt;Divergent Change&lt;/em&gt;&lt;/strong&gt; is when many changes are made to a single class. &lt;strong&gt;&lt;em&gt;Shotgun Surgery&lt;/em&gt;&lt;/strong&gt; refers to when a single change is made to multiple classes simultaneously.&lt;/p&gt;

&lt;p&gt;Here the refactoring technique to apply is &lt;strong&gt;&lt;em&gt;Move Method&lt;/em&gt;&lt;/strong&gt; and/or &lt;strong&gt;&lt;em&gt;Move Field&lt;/em&gt;&lt;/strong&gt;. This will permit you to move the duplicated methods or fields to a common class. If that class doesn&amp;rsquo;t exist, create a new one. In the case where the original class stays almost empty, maybe you should think if this class is redundant, and if so, get rid of it by using &lt;strong&gt;&lt;em&gt;Inline Class&lt;/em&gt;&lt;/strong&gt;: move the remaining methods/fields to one of the new classes created. This all depends on whether the original class still has any responsibilities.&lt;/p&gt;

&lt;h4 id=&#34;parallel-inheritance-hierarchies&#34;&gt;Parallel Inheritance Hierarchies&lt;/h4&gt;

&lt;p&gt;This case is when you find yourself creating a new subclass for class B because you add a subclass to class A.&lt;/p&gt;

&lt;p&gt;Here you can: first, make one of the hierarchy refer to instances of another hierarchy. After this first step you can then use &lt;strong&gt;&lt;em&gt;Move Method&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Move Field&lt;/em&gt;&lt;/strong&gt; to remove the hierarchy in the referred class. You can apply here the &lt;a href=&#34;https://en.wikipedia.org/wiki/Visitor_pattern&#34;&gt;Visitor pattern&lt;/a&gt; too.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In the case of &lt;strong&gt;&lt;em&gt;Object-Orientation Abusers&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Change Preventers&lt;/em&gt;&lt;/strong&gt;, I think that they are simpler to avoid if you know how to apply a good design to your code. And that comes with a lot of practice.&lt;/p&gt;

&lt;p&gt;Today I&amp;rsquo;ve talked about a few refactoring techniques, but there are a lot more. You can find a good reference to all of then in &lt;a href=&#34;http://refactoring.com/catalog/&#34;&gt;Refactoring.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And as I said in the &lt;a href=&#34;http://codurance.com/2016/03/17/code-smells-part-I/&#34;&gt;first part of this series&lt;/a&gt;, code smells can&amp;rsquo;t always be removed. Study each case and decide: remember there is always a trade off.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Language feature envy</title>
      <link>http://codurance.com/blog/language-feature-envy/</link>
      <pubDate>Fri, 06 May 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/language-feature-envy/</guid>
      <description>

&lt;p&gt;In my day job I mainly write C# code. On my own I like to try other languages like Swift, F#, Clojure, Objective C or Java. I learn a lot from writing code in different languages. When I go back to C# I often miss some of the features C# does not have. By far what I miss the most is Java/Swift enums. It happens quite frequently that I need to express a few finite number of instances of a type. The &lt;a href=&#34;http://snipplr.com/view/42422/the-planet-enum-example/&#34;&gt;Java planets&lt;/a&gt; example illustrates this quite effectively.&lt;/p&gt;

&lt;p&gt;Recently I was porting a music library I wrote in Swift &lt;a href=&#34;https://github.com/pedromsantos/Ellis&#34;&gt;Ellis&lt;/a&gt; to C#. In music there are only 12 notes so using a class to express a musical note feels wrong. Using a enum in C# would be the correct choice&amp;hellip; If I could only add behaviour to enums in C#. Here is an excerpt of the Note enum in Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public enum Note: Int
{
    case C = 0
    case CSharp
    case DFlat
    case D
    case DSharp
    case EFlat
    ...

    public func sharp() -&amp;gt; Note
    {
        ...
    }

    public func flat() -&amp;gt; Note
    {
        ...
    }

    public func intervalWithNote(other: Note) -&amp;gt; Interval
    {
        ...
    }

    public func measureAbsoluteSemitones(other: Note) -&amp;gt; Int
    {
        ...
    }

    public func transpose(transposingInterval: Interval) -&amp;gt; Note
    {
      ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that besides being able to define a finite number of instances I&amp;rsquo;m also able to add behaviour to my enum.&lt;/p&gt;

&lt;p&gt;In C# we are stuck with using something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class Note
{
    public static readonly Note C = new Note(Pitch.C, &amp;quot;C&amp;quot;, Accident.None, MinNoteIndex);
    public static readonly Note CSharp = new Note(Pitch.CSharp, &amp;quot;C#&amp;quot;, Accident.Sharp, 1);
    public static readonly Note DFlat = new Note(Pitch.DFlat, &amp;quot;Db&amp;quot;, Accident.Flat, 2);
    public static readonly Note D = new Note(Pitch.D, &amp;quot;D&amp;quot;, Accident.None, 3);
    public static readonly Note DSharp = new Note(Pitch.DSharp, &amp;quot;D#&amp;quot;, Accident.Sharp, 4);
    public static readonly Note EFlat = new Note(Pitch.EFlat, &amp;quot;Eb&amp;quot;, Accident.Flat, 5);
    public static readonly Note E = Note(Pitch.E, &amp;quot;E&amp;quot;, Accident.None, 6);
    public static readonly Note F = new Note(Pitch.F, &amp;quot;F&amp;quot;, Accident.None, 7);
    public static readonly Note FSharp = new Note(Pitch.FSharp, &amp;quot;F#&amp;quot;, Accident.Sharp, 8);
    ...

    private Note(Pitch pitch, string name, Accident accident, int index)
    {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s not too bad, but not exactly the same as in Java or Swift.&lt;/p&gt;

&lt;p&gt;There is a feature in Java enums that I still miss for my note implementation in C#, the ordinal method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final int ordinal()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This according to the Java documentation &amp;ldquo;Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero)&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If I want to emulate this behaviour in C# I can do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public static IEnumerable&amp;lt;Note&amp;gt; Notes
{
    get
    {
        yield return C;
        yield return CSharp;
        yield return DFlat;
        yield return D;
        yield return DSharp;
        yield return EFlat;
        yield return E;
        yield return F;
        yield return FSharp;
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can access Note instances using an indexer with code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Note.Notes.ElementAt(indexForNote);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again not ideal but not terrible either. But notice that we are adding up workarounds, all small but it adds up.&lt;/p&gt;

&lt;p&gt;We are getting close to emulate Java/Swift enums in C#. The next step is to emulate the &amp;ldquo;singleton&amp;rdquo; aspect of each instance of the enum. In the current implementation the following line is false in C#:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Note.C == Note.C;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we need is for each instance to be ever unique, AKA the &amp;ldquo;dreadful&amp;rdquo; singleton. This allows us to compare instances without overriding equals and saves us from having potentially thousands of instances representing the same value. After a bit off head scratching I remembered about the Lazy&lt;t&gt; type. That led me to try it in my note implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;public class Note
{
	public static readonly Note C = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.C, &amp;quot;C&amp;quot;, Accident.None, 0)).Value;
	public static readonly Note CSharp = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.CSharp, &amp;quot;C#&amp;quot;, Accident.Sharp, 1)).Value;
	public static readonly Note DFlat = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.DFlat, &amp;quot;Db&amp;quot;, Accident.Flat, 2)).Value;
	public static readonly Note D = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.D, &amp;quot;D&amp;quot;, Accident.None, 3)).Value;
	public static readonly Note DSharp = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.DSharp, &amp;quot;D#&amp;quot;, Accident.Sharp, 4)).Value;
	public static readonly Note EFlat = new Lazy&amp;lt;Note&amp;gt;(() =&amp;gt; new Note(Pitch.EFlat, &amp;quot;Eb&amp;quot;, Accident.Flat, 5)).Value;
	...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success the following expression is now true:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cs&#34;&gt;Note.C == Note.C;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to look at the complete implementation it’s on my GitHub &lt;a href=&#34;https://github.com/pedromsantos/Jaco/blob/master/Jaco/Notes/Note.cs&#34;&gt;Jaco.Notes.Note&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;faq&#34;&gt;FAQ:&lt;/h3&gt;

&lt;p&gt;Why don&amp;rsquo;t you create a proposal to have this implemented in C#?&lt;/p&gt;

&lt;p&gt;Nothing is ever original, others have explored that route already.&lt;/p&gt;

&lt;p&gt;Jon Skeet blogged about this in 2006:
&lt;a href=&#34;https://codeblog.jonskeet.uk/2006/01/05/classenum/#comments&#34;&gt;https://codeblog.jonskeet.uk/2006/01/05/classenum/#comments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of discussions on Roslyn GitHub:
&lt;a href=&#34;https://github.com/dotnet/roslyn/issues/6739&#34;&gt;https://github.com/dotnet/roslyn/issues/6739&lt;/a&gt;
&lt;a href=&#34;https://github.com/dotnet/roslyn/issues/3704&#34;&gt;https://github.com/dotnet/roslyn/issues/3704&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only problem is this patent may prevent other languages from having the same behaviour Java has on enums:
&lt;a href=&#34;https://www.google.com/patents/US7263687&#34;&gt;https://www.google.com/patents/US7263687&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Akka basics</title>
      <link>http://codurance.com/blog/Akka-basics/</link>
      <pubDate>Sat, 30 Apr 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/Akka-basics/</guid>
      <description>

&lt;p&gt;As &lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients&#34;&gt;the previous post&lt;/a&gt; explained our system is based on &lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt;. Before going into more detail about our solution, I&amp;rsquo;d like to explain what Akka is about and why it is so awesome.&lt;/p&gt;

&lt;p&gt;Akka is a toolkit and not a framework, you can simply use the bits that you need for your service. In this series we&amp;rsquo;ll focus on the core features and we won&amp;rsquo;t go through &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/scala/stream/index.html&#34;&gt;Akka Streams&lt;/a&gt;, &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/scala/http/index.html&#34;&gt;Akka-Http&lt;/a&gt; or &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/common/cluster.html&#34;&gt;Akka Cluster&lt;/a&gt; (since they&amp;rsquo;re out of scope, not because they&amp;rsquo;re not fantastic).&lt;/p&gt;

&lt;p&gt;Akka provides a different abstraction to deal with concurrency, paralellism and fault-tolerance. That abstraction is called Actor Model. If you have experience with the old Java ecosystem you will know how hard it is to &lt;a href=&#34;http://codurance.com/2015/12/13/testing-multithreaded-code-in-java/&#34;&gt;write safe and correct multithreaded code&lt;/a&gt;. Providing human-friendly abstractions like Actors is a revolution comparable to Java&amp;rsquo;s memory management at the time of introduction. New challenges derived from internet scale and cloud computing requires a reactive approach to programming. Akka aligns with that philosophy and enables you to implement &lt;a href=&#34;https://www.wikiwand.com/en/Event-driven_architecture&#34;&gt;Event-driven architectures&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;actors-all-the-way&#34;&gt;Actors all the way&lt;/h2&gt;

&lt;p&gt;Threads are an expensive resource, hence we need to use them judiciously. Blocking threads while we&amp;rsquo;re waiting for some I/O operation to respond is really inefficient. Actors use threads in a different way, as a result of which they&amp;rsquo;re pretty lightweight (&lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/intro/what-is-akka.html&#34;&gt;several million actors per GB of heap memory&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Actors are a good blend of Object Oriented and Functional Programming principles. OOP is basically about messages as Alan Kay, one of the pioneers of OOP, &lt;a href=&#34;http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html&#34;&gt;stated&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m sorry that I long ago coined the term &amp;ldquo;objects&amp;rdquo; for this topic because it gets many people to focus on the lesser idea. The big idea is &amp;ldquo;messaging&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An actor exchanges immutable messages and keeps their own encapsulated state: every interaction needs to be done through messages.&lt;/p&gt;

&lt;h2 id=&#34;fault-tolerance&#34;&gt;Fault tolerance&lt;/h2&gt;

&lt;p&gt;There is not a clear and shared error handling model in Java, and you can realise that after working in a couple of projects. The origin of that is a confusing abstraction called Exception and its subtypes Checked and Unchecked Exceptions. The only real difference is that checked exceptions force us to deal with the issue in the direct caller, except for that they don&amp;rsquo;t hint at the strategy that we should apply.&lt;/p&gt;

&lt;p&gt;I strongly recommend &lt;a href=&#34;http://joeduffyblog.com/2016/02/07/the-error-model/&#34;&gt;this&lt;/a&gt; post about it. One such powerful idea in the post is that bugs aren&amp;rsquo;t recoverable errors. This quote is contained in that post, &lt;a href=&#34;https://wiki.haskell.org/Error_vs._Exception&#34;&gt;original source&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was involved in the development of a library that was written in C++. One of the developers told me that the developers are divided into the ones who like exceptions and the other ones who prefer return codes. As it seems to me, the friends of return codes won. However, I got the impression that they debated on the wrong point: Exceptions and return codes are equally expressive, they should however not be used to describe errors. Actually the return codes contained definitions like &lt;code&gt;ARRAY_INDEX_OUT_OF_RANGE&lt;/code&gt;. But I wondered: How shall my function react, when it gets this return code from a subroutine? Shall it send a mail to its programmer? It could return this code to its caller in turn, but it will also not know how to cope with it. Even worse, since I cannot make assumptions about the implementation of a function, I have to expect an &lt;code&gt;ARRAY_INDEX_OUT_OF_RANGE&lt;/code&gt; from every subroutine. My conclusion is that &lt;code&gt;ARRAY_INDEX_OUT_OF_RANGE&lt;/code&gt; is a (programming) error. It cannot be handled or fixed at runtime, it can only be fixed by its developer. Thus there should be no according return code, but instead there should be asserts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Akka provides a great way for dealing with failures/errors based on these tenets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Single responsibility principle: failure management is delegated to supervisors, creating focused business actors. We agreed some time ago that lifecycle management, e.g. object creation, should be moved to factories, therefore an object is not responsible for creating itself. Resuming or restarting an object, after some failure happened, is part of that lifecycle management and Akka enforces you to move that responsibility to supervisors. The resulting code will be loosely coupled and highly cohesive.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Default recovery strategies: it&amp;rsquo;s important to understand which are our options after the system is under some failure condition. Is the DB temporarily down? Has some input, in combination with the existing data, created an undesired state? Is that a bug? Do we need to abandon that particular request or that part of the system is messed up until some patch is applied? Those questions will determine our response to that incident, and Akka provides some &lt;a href=&#34;http://doc.akka.io/docs/akka/2.4.4/scala/fault-tolerance.html#fault-tolerance-scala&#34;&gt;built-in strategies&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;override val supervisorStrategy =
  OneForOneStrategy(maxNrOfRetries = 10, withinTimeRange = 1 minute) {
    case _: ArithmeticException      =&amp;gt; Resume
    case _: NullPointerException     =&amp;gt; Restart
    case _: IllegalArgumentException =&amp;gt; Stop
    case _: Exception                =&amp;gt; Escalate
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Failure as first class citizen: some libraries or ecosystems hide failures through obscure APIs. Akka is usually deployed in distributed environments, therefore using unreliable resources like networks. That forces us to bring failure to the front. Even in &amp;lsquo;safer&amp;rsquo; environments as monoliths, failures are all around, so using toolkits like Akka is critical to create reliable and robust software.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;concurrency-and-parallelism&#34;&gt;Concurrency and parallelism&lt;/h2&gt;

&lt;p&gt;With Akka we&amp;rsquo;re not going to deal directly with threads, they&amp;rsquo;re hidden under an abstraction layer. The backbone of an Akka app is the &lt;a href=&#34;http://doc.akka.io/api/akka/2.0/akka/actor/ActorSystem.html&#34;&gt;Actor System&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An actor system is a hierarchical group of actors which share common configuration, e.g. dispatchers, deployments, remote capabilities and addresses. It is also the entry point for creating or looking up actors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A Dispatcher is also an Execution Context, so in the end it is where the thread pool is located. Let&amp;rsquo;s assume that your app uses a single dispatcher with 4 threads allocated. As you can see threads are a scarce resource, if we do blocking I/O or heavy CPU work in some of the actors we&amp;rsquo;ll use exclusively one of the threads, and you can see how quickly your service will run out of threads.&lt;/p&gt;

&lt;p&gt;The solution is wrapping those operation with constructs like Scala Futures and then provide a different execution context for those tasks.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Akka is a fantastic toolkit full of well suited abstractions for modern problems. In the next post we&amp;rsquo;ll see with the help of some code how to coordinate and supervise actors with the constraints of our example application.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&#34;&gt;Part 1&lt;/a&gt; | &lt;a href=&#34;http://codurance.com/2016/04/30/akka-basics/&#34;&gt;Part 2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Async systems with sync clients</title>
      <link>http://codurance.com/blog/Async-systems-with-sync-clients/</link>
      <pubDate>Thu, 28 Apr 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/Async-systems-with-sync-clients/</guid>
      <description>

&lt;p&gt;As the &lt;a href=&#34;http://www.reactivemanifesto.org/&#34;&gt;Reactive Manifesto&lt;/a&gt; says Reactive systems are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive&lt;/li&gt;
&lt;li&gt;Resilient&lt;/li&gt;
&lt;li&gt;Elastic&lt;/li&gt;
&lt;li&gt;Message Driven&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last principle often goes together with non-blocking async protocols. This style of communication &amp;ldquo;allows recipients to only consume resources while staying active, leading to less system overhead&amp;rdquo;. This fits perfectly with new demands of efficiency derived from the elastic model of cloud providers. However not every system is async and integrating an async system with a sync client could be tricky.&lt;/p&gt;

&lt;h2 id=&#34;integration-strategies&#34;&gt;Integration Strategies&lt;/h2&gt;

&lt;p&gt;We can fix the mismatch of communication styles through a couple of strategies.&lt;/p&gt;

&lt;h3 id=&#34;polling&#34;&gt;Polling&lt;/h3&gt;

&lt;p&gt;This involves work for both parties. First round trip of this protocol involves client sending some request to the server with an outcome of ACK/NACK. This is called fire and forget. Assuming HTTP, the server will return status code 202 (Accepted). The async process will eventually succeed or fail and that result will be exposed by the server via a different endpoint. The client will have to periodically poll that endpoint to figure out the status of the operation.&lt;/p&gt;

&lt;p&gt;Polling is by nature inefficient but could be a good solution when the technological stack doesn&amp;rsquo;t allow bidirectional protocols like &lt;a href=&#34;https://www.wikiwand.com/en/WebSocket&#34;&gt;Web Sockets&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;hiding-asynchronicity&#34;&gt;Hiding asynchronicity&lt;/h3&gt;

&lt;p&gt;If we don&amp;rsquo;t have control over those clients, we&amp;rsquo;ll probably have to hide our async nature under some sync layer. That layer will implement a polling or pub/sub mechanism bounded by a timeout.&lt;/p&gt;

&lt;h2 id=&#34;learning-by-example&#34;&gt;Learning by example&lt;/h2&gt;

&lt;p&gt;In this series of posts we&amp;rsquo;ll implement last strategy with a pub/sub mechanism. We&amp;rsquo;ll add some essential complexities to our domain to make the exercise more juicy.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll be working on something similar to &lt;a href=&#34;https://craigslist.org&#34;&gt;Craiglist&lt;/a&gt;, a website with classified advertisements. However our platform will have a social focus (as everything nowadays). That means that a user can post an item into some group and/or to her followers. People can report dubious items and we will take seriously those reports as they&amp;rsquo;re threats to our reputation. So much so that the authorities have direct access to an API that can take down an item immediately.&lt;/p&gt;

&lt;p&gt;Our system is formed by several microservices based on &lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt;, using &lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt; for inter-process communication. The police platform has only sync clients and they don&amp;rsquo;t seem keen to implement a polling mechanism to verify that an item has been actually removed. We need to communicate with them synchronously and that&amp;rsquo;s not negotiable. In the next posts we&amp;rsquo;ll see the details of our solution, but as an advancement, let&amp;rsquo;s see the high level architecture. Don&amp;rsquo;t worry if you don&amp;rsquo;t understand everything yet.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/law_enforcement.png&#34; alt=&#34;Law enforcement architecture&#34; title=&#34;Law enforcement architecture&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;&lt;a href=&#34;http://codurance.com/2016/04/28/async-systems-with-sync-clients/&#34;&gt;Part 1&lt;/a&gt; | &lt;a href=&#34;http://codurance.com/2016/04/30/akka-basics/&#34;&gt;Part 2&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sorted pagination in Cassandra</title>
      <link>http://codurance.com/blog/sorted-pagination-in-cassandra/</link>
      <pubDate>Sun, 17 Apr 2016 00:20:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/sorted-pagination-in-cassandra/</guid>
      <description>

&lt;p&gt;Cassandra is a fantastic database for different use cases. There are different situations when you need to twist Cassandra a little and studying one of those could be a helpful exercise to better understand what is Cassandra about. Databases are complex beasts, approaching them with the right level of abstraction is vital. Their final goal is not storing data per se, but make that data accessible. Those read patterns will define which database is the best tool for the job.&lt;/p&gt;

&lt;h2 id=&#34;time-series-in-cassandra&#34;&gt;Time series in Cassandra&lt;/h2&gt;

&lt;p&gt;A time series is a collection of data related to some variable. Facebook&amp;rsquo;s timeline would be a great example. A user will write a serie of posts over time. The access patterns to that data will be something like &amp;lsquo;return the 20 last posts of user 1234&amp;rsquo;. The DDL of a table that models that query would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE timeline (
	user_id uuid,
	post_id timeuuid,
	content text,
	PRIMARY KEY (user_id, post_id)
)
WITH CLUSTERING ORDER BY (post_id DESC);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Cassandra Primary Keys are formed by Partition Keys and Clustering Keys. Primary keys enforce the uniqueness of some cells in a different way to relational databases. There is no strong enforcement of that uniqueness, if you try to insert some cell related to an already existing primary key, that will be updated. Also the other way around: a &amp;lsquo;missing&amp;rsquo; update will end up as insert. That&amp;rsquo;s called upsert.&lt;/p&gt;

&lt;p&gt;Partition keys ensure in which node of the cluster the data is going to live. If you include at least one clustering key, the partition key will identify N rows. That could be confusing for someone coming from traditional relational databases. Cassandra does its best trying to bring its concepts into SQL terminology, but sometimes it could be weird for newbies. An example of Timeline table would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;user_id--------------------------------post_id--------content
346e896a-c6b4-4d4e-826d-a5a9eda50636---today----------Hi
346e896a-c6b4-4d4e-826d-a5a9eda50636---yesterday------Hola
346e896a-c6b4-4d4e-826d-a5a9eda50636---one week ago---Bye
346e896a-c6b4-4d4e-826d-a5a9eda50636---two weeks ago--Ciao
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to understand the example I converted post_id values into something that makes sense for the reader. As you can see there are several values with the same partition key (user_id) and that works as we defined a clustering key (post_id) that clusters those values and sorts them (descending in this case). Remember that uniqueness is defined by the primary key (partition plus clustering key) so if we insert a row identified with &amp;lsquo;346e896a-c6b4-4d4e-826d-a5a9eda50636&amp;rsquo; and &amp;lsquo;today&amp;rsquo; the content will be updated. Nothing gets really updated in disk as Cassandra works with immutable structures in disk, but at read time different writes with the same primary key will be resolved in descending order.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see some queries to finish this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM timeline
where user_id = 346e896a-c6b4-4d4e-826d-a5a9eda50636
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-&amp;gt; It will return four rows sorted by post_id DESC&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT content FROM timeline
where user_id = 346e896a-c6b4-4d4e-826d-a5a9eda50636 LIMIT 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-&amp;gt; It will return &amp;lsquo;Hi&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT content FROM
timeline where user_id = 346e896a-c6b4-4d4e-826d-a5a9eda50636 and post_id &amp;gt; today LIMIT 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-&amp;gt; It will return &amp;lsquo;Hola&amp;rsquo; and &amp;lsquo;Bye&amp;rsquo;&lt;/p&gt;

&lt;p&gt;As you can see implementing sorted pagination is extremely easy when modeling Time Series in Cassandra. Besides it will be super performant as Cassandra stores all the rows identified by a single partition key in the same node, so a single roundtrip will be needed to fetch this data (assuming read consistency level ONE)&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what happens when we want to implement sorted pagination in a different use case.&lt;/p&gt;

&lt;h2 id=&#34;sorted-sets-in-cassandra&#34;&gt;Sorted sets in Cassandra&lt;/h2&gt;

&lt;p&gt;If we think in the previous example at data structure abstraction level, we can see that we just modeled a Map whose values are Sorted Sets. What happens if we want to model something like a Sorted Set with Cassandra?&lt;/p&gt;

&lt;p&gt;Our scenario is the following. The users of our system can be suspended or unsuspended through some admin portal. The admins would like to have a look into the last users that have been suspended along the suspension&amp;rsquo;s reason in order to verify that decision or revoke it. That&amp;rsquo;s pretty similar to our previous paginated queries so let&amp;rsquo;s how we can model that with Cassandra.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE suspended_users (
	user_id uuid,
	occurred_on timestamp,
	reason text
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve deliberately left out the Primary Key from this DDL so we can discuss different options.&lt;/p&gt;

&lt;h2 id=&#34;understanding-clustering-keys&#34;&gt;Understanding Clustering Keys&lt;/h2&gt;

&lt;p&gt;Previously we used clustering keys to provide some order into our data. Let&amp;rsquo;s go with that option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;PRIMARY KEY (user_id, occurred_on)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can you see what is wrong with this? Forget about implementation details for a second and answer this question, how many times a user will appear in this table? As your self-elected product owner I&amp;rsquo;ll say that only one. Once a user is unsuspended I&amp;rsquo;d like to remove the user from that table and a user that is suspended can&amp;rsquo;t be suspended again. Next question: where do we want to keep some order? Not inside users (even less in this case, as our single user will be always &amp;lsquo;ordered&amp;rsquo;), but amongst users. This design won&amp;rsquo;t work.&lt;/p&gt;

&lt;h2 id=&#34;understanding-partition-keys-and-partitioners&#34;&gt;Understanding Partition Keys and Partitioners&lt;/h2&gt;

&lt;p&gt;I have a new bit of information that might help you. This table will be updated in real time, so that means that this table should keep some kind of logical insertion order. As we didn&amp;rsquo;t get into the details of Cassandra we could think that the following will work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;PRIMARY KEY (user_id)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s see how that logical insertion order maps into the physical one. Cassandra stores its data in a ring of nodes. Each node gets assigned one token (or several if we use vnodes). When you CRUD some data Cassandra will calculate where in the ring lives that data using a &lt;a href=&#34;http://docs.datastax.com/en/cassandra/2.0/cassandra/architecture/architecturePartitionerM3P_c.html&#34;&gt;Partitioner&lt;/a&gt; that will hash the Partition Key. When using recommended partitioners &lt;a href=&#34;http://docs.datastax.com/en/cql/3.1/cql/cql_using/paging_c.html&#34;&gt;Cassandra rows are ordered by the hash of their value and hence the order of rows is not meaningful&lt;/a&gt;, so that logical insertion order will be logical and nothing else. That means that this query will return 20 users without any meaningful order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM suspended_users LIMIT 20;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the token function we could paginate large sets of data as it was explained in &lt;a href=&#34;http://docs.datastax.com/en/cql/3.1/cql/cql_using/paging_c.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM suspended_users where token(user_id) &amp;gt; token([Last user_id received]) LIMIT 20;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, we want to paginate a sorted set by suspension time and descending.&lt;/p&gt;

&lt;h2 id=&#34;presenting-reverse-lookups&#34;&gt;Presenting Reverse Lookups&lt;/h2&gt;

&lt;p&gt;Denormalisation is something usual in Cassandra. In order to overcome restrictions imposed by Cassandra implementation, denormalising our data is a suggested approach. Thanks to our previous example we understood that to keep some order between data we need to cluster it. Nobody forces us to use a suspended_users table even if our domain talks about it. As we need some fixed variable to create a time serie, we&amp;rsquo;ll go with the status:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE users_by_status (
  status text,
  occurred_on timestamp,
  user_id uuid
  reason text,
  PRIMARY KEY (status, occurred_on, user_id)
) WITH CLUSTERING ORDER BY (occurred_on DESC);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Partition and clustering keys can be compounded. In this particular key, &amp;lsquo;status&amp;rsquo; will be the partition key and &amp;lsquo;occurred_on&amp;rsquo;/&amp;lsquo;user_id&amp;rsquo; the clustering key. Default order is ASC, so that&amp;rsquo;s why we specified &amp;lsquo;occurred_on&amp;rsquo; DESC inside of CLUSTERING ORDER BY. It&amp;rsquo;s important to note that &amp;lsquo;user_id&amp;rsquo; will serve for uniqueness purposes in this design even if it will order rows in the unlikely case of two users being suspended at the very exact time.&lt;/p&gt;

&lt;p&gt;Now that we created an &amp;lsquo;artificial&amp;rsquo; clustering, we can paginate in a sorted way like in our first example. This presents several problems though. Cassandra won&amp;rsquo;t split data inside of a row, and the recommended maximum size of rows inside of a partition is 200k. If you foresee that your system will grow more than that you can split the rows with the technique of compounds partitions keys using temporal buckets.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE users_by_status (
  bucket text,
  status text,
  occurred_on timestamp,
  user_id uuid
  reason text,
  PRIMARY KEY ((bucket, status), occurred_on, user_id)
) WITH CLUSTERING ORDER BY (occurred_on DESC);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Being the bucket something like MM-YYYY or whatever fine-grained precission that your data will suggest you. Here I present a new bit of CQL (Cassandra Query Language) that is compounded partition keys. As you can see whatever is inside of those nested parentheses will be the partition key.&lt;/p&gt;

&lt;p&gt;Next issue is how we will delete or update users that need to be unsuspended. The admin could have the user_id and occured_on and that wouldn&amp;rsquo;t be a problem as he could do a query like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;DELETE FROM users_by_status WHERE status = &#39;SUSPENDED&#39; and occurred_on = ... and user_id = ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately that admin could get a request from some privileged managers to unsuspend a user. The manager don&amp;rsquo;t know when the suspension happened, they only know who is the user. That means that we can&amp;rsquo;t access to the concrete row as we don&amp;rsquo;t have &amp;lsquo;occurred_on&amp;rsquo;. Remember that to query in Cassandra you need to provide the whole partition key (otherwise Cassandra won&amp;rsquo;t know in which node it has to go to fetch the data) and optional parts of the clustering key (but always from left to right).&lt;/p&gt;

&lt;p&gt;In order to overcome this issue we could create a secondary index into &amp;lsquo;user_id&amp;rsquo; column. In relational databases, indexes allow us to query faster some data creating a denormalised structure. In Cassandra those secondary indexes allows us query by columns that otherwise will be impossible to use. However, they&amp;rsquo;re disencouraged as they&amp;rsquo;re a great hit in performance, as they require several roundtrips into different nodes.&lt;/p&gt;

&lt;p&gt;Next solution is creating our own secondary index manually in something called reverse lookup. Let&amp;rsquo;s see how it looks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE suspended_users (
  user_id uuid,
  occurred_on timestamp,
  PRIMARY KEY (user_id)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This table will serve us as reverse lookup. Just having the &amp;lsquo;user_id&amp;rsquo; we&amp;rsquo;ll be able to access to &amp;lsquo;occurred_on&amp;rsquo; value and then we&amp;rsquo;ll be able to query users_by_status table. This approach has some drawbacks. Whenever we insert or delete a user we&amp;rsquo;ll have to go to two tables, but that&amp;rsquo;s a fixed number. With a secondary index we will have to go to N nodes in the worst case. So it goes from O(1) to O(N). Our code will be more complicated also, as we&amp;rsquo;ll have to contact with two different tables.&lt;/p&gt;

&lt;p&gt;That presents a more serious drawback that is eventual consistency and transactions in Cassandra. Transactions are not built in the core of Cassandra (there are concepts like lightweight transactions or batches, but those are inefficient too), so that means that our code needs to take care manually about transactions.&lt;/p&gt;

&lt;p&gt;If we want to delete a user we should start from users_by_status table. If we start the other way around, and the second deletion fails, we&amp;rsquo;ll be unable to delete in the future that row as we&amp;rsquo;ve deleted the reverse lookup entry. We can introduce the Saga pattern that basically defines a rollback nemesis in every single step of a programmatic transaction.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;As you could see, something pretty straightforward in a relational database as querying paginated a set of sorted data, could be tricky in Cassandra as soon as we introduce some requirements. If your infrastructure allows it, you should use a polyglot persistence approach that uses the best tool for every use case. Anyway, Cassandra gives you enough flexibility to model data even when it&amp;rsquo;s not its best use case.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>We did it wrong, but not all was in vain</title>
      <link>http://codurance.com/blog/we-did-it-wrong-but-not-in-vain/</link>
      <pubDate>Tue, 12 Apr 2016 00:24:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/we-did-it-wrong-but-not-in-vain/</guid>
      <description>&lt;p&gt;Yes, there was over engineering. Loads of it. Back in the mid 90s, when I started my career as a developer, the goal was to become an architect. No serious developer would dare writing a single line of code before selecting our preferred design patterns—we would then decide how the business requirements would fit into them. Yes, we would first come up with our architecture, then our macro design (layers) and domain model (including UML diagrams), and then we would think about the business requirements and detailed use cases. Yes, user stories were not really a thing back then. We had long use cases with a basic flow and many alternative flows.&lt;/p&gt;

&lt;p&gt;The 90s were an interesting period to be a developer. We finally had the Internet and a few academic papers on structured design from 70s and 80s became available to us. We also had a few books focusing on Object-Oriented Programming, still a novelty in many places.&lt;/p&gt;

&lt;p&gt;I still remember the countless months we spent drawing class, sequence, component, deployment, and many other diagrams, trying to come up with the best design for the software that one day we would build. We built some prototypes as well, so I can’t say we were not coding or experimenting during the &lt;em&gt;elaboration phase&lt;/em&gt;. All the learnings from the prototypes would be fed back into our diagrams, of course.&lt;/p&gt;

&lt;p&gt;Besides the internal design, in the 90s we had an explosion of distributed systems as well. We had CORBA and DCOM. We had client/server and multi-tier architecture. We learnt about single point of failure when using databases as a communication point between applications. Yes, we had nasty problems with that. We learnt how to create “services”—SOA was emerging as an architectural concept. We learnt how to think about scalability and security. Many projects outside governments and banks were also becoming very large and complex.&lt;/p&gt;

&lt;p&gt;Creating a great design was the goal for most passionate software developers; it was also the path to become an architect and career evolution. We had to study and be good at software design. We had to understand in depth principles of structured and object-oriented design. We had to understand principles of distributed system. We had to understand in depth all levels of cohesion and coupling. We had to understand covariance and contravariance. We had to learn how to design components boundaries including their contracts and invariant. We had to learn to how to understand verbs and nouns, the language of the business, and map them into software. We would never pass a job interview without knowing how to model data in our relational databases, and mostly important, how to make our queries perform well. We had to define our proprietary protocols in the right granularity in order to make it easier for other systems to consume them and at the same time address I/O and bandwidth concerns. Yes, we spent a lot of time doing that.&lt;/p&gt;

&lt;p&gt;Software development in the 90s was all about design and architecture. And yes, it had to be done with UML.&lt;/p&gt;

&lt;p&gt;But although we learnt how to design, we failed in many other aspects. We didn’t deliver fast enough. In fact, in some projects we didn’t deliver anything at all. Most of the times, all the thinking we did trying to create a perfect design was completely wasted due to lack of quick feedback and our inability to cope with rapid business evolution. I still remember the huge spreadsheets we used to control change requests even before we had any code written. Yes, we screwed up big time. Many times.&lt;/p&gt;

&lt;p&gt;Fast-forwarding 20 years, some of us understood what we were doing was wrong. We then incorporated Agile, Lean, and many other principles and practices into the way we work. We incorporated many new design and architecture techniques into our tool kit. We incorporated new technologies. We incorporated different ways to collaborate with the business and also how to structure our teams. We learned that although design was important, nothing was more important than continuously delivering software. We learnt how to get feedback and iterate. We learnt we were responsible to test our own code. We learnt we had to support our software in production. We learnt the value of creating prototypes and throwing them away. We learnt the value of experimentation. But we also learnt we didn’t need to throw away all the design skills we acquired over the years in order to work in a better way. We didn’t need to discard all the great work done before and during our time, mainly around software design during the 70s, 80s and 90s. But the most important lesson we learnt was that context is king and that software design is all about trade offs. Design is pointless without delivery. But can we keep delivering code without a solid design foundation? I don’t think so.&lt;/p&gt;

&lt;p&gt;One of the biggest problems I see today in software design is binary thinking. If X is bad, than Y must be good. If X worked for company A, than it will also work for us. If a well-known person said something in a 45-minute talk in a conference or we found something written in a blog, it must be true. Always.&lt;/p&gt;

&lt;p&gt;Another common mistake caused by binary thinking is the belief that all features in a software project have the same degree of complexity and a single design choice will fit them all. But the truth is, some features are quite simple, others very complex, and many others are somewhere in between. Sometimes the complexity is found in the implementation; other times it is found on understanding and modelling the domain. Sometimes the complexity is in understanding what we should be building. Other times the complexity is in the integration with other systems. Parts of the same feature can also vary a lot in complexity: some parts may be trivial and quickly implemented while others can be extremely complex and demand a lot thinking up front. Some features are shallow (very few lines of code) while others are deep (thousands of lines of code spread through different modules). Non-functional requirements can also make the implementation of simple features (business-wise) very complex. And the interesting thing is that all of that can be found within the same software project. So, if we agree that different features in a software project have different degrees of complexity and size, there is no way we can apply binary thinking into software design—no single design approach will ever work in a reasonably complex software project.&lt;/p&gt;

&lt;p&gt;We live in a world where information is easily and quickly accessible. One search on Google and we can find many ready-made solutions to our problems. My fear is that, as an industry, we are losing the ability to think. We are losing the ability to research and make our own choices. More and more we are looking for a ready-made recipe. A shortcut. I call them a “Stack Overflow solution.”&lt;/p&gt;

&lt;p&gt;It makes me sad that, to some people, software design is synonymous of over-engineering. It also makes me sad to see that &amp;ldquo;no design at all” is becoming synonymous of Agile, Lean Startup, and fast delivery. I don’t think the originators and main proponents of good software design, Agile, and Lean principles ever meant that. Over-engineering is bad, but so is no design at all. Simple doesn’t mean crap. Simple means just enough design for what we know today, but not less. Paraphrasing Einstein, software design should be made as simple as possible, but not simpler. Or another way of putting it: code must be well-designed but not over-designed.&lt;/p&gt;

&lt;p&gt;After interviewing a lot of developers and reviewing a lot of code in the past few years, my main concern is that we are developing a hacker culture. Many developers I met who have been in the industry for less than a decade, have very little knowledge of good software design. They will claim otherwise, of course. If you think I’m exaggerating, ask developers in your team to explain cohesion and its different levels. Ask them about connascence, covariance and contravariance. Ask them about different degrees and types of coupling. Ask them about design by contract and invariant. For those that have heard about SOLID principles ask them where the SOLID principles came from. Many developers today say design patterns are bad. Ask them to describe some patterns, their differences, and when they should or should not be applied. Ask them about the different pattern classifications. Ask them about the difference between a Bridge, Adapter, and Mediator. What problem a Visitor is supposed to solve? Ask them what is a Memento? If they can’t explain that, how can they say patterns are bad?&lt;/p&gt;

&lt;p&gt;Many developers today are not aware of the software design foundation laid during the 70s, 80s, and 90s. Others prefer to ignore it: &lt;em&gt;That is over-engineering and they don’t need that.&lt;/em&gt; That’s fine, I can respect that. But why do we still have software that sucks then? Is the software being produced today really better than the software being produced 20 years ago? Why developers still struggle to design code with TDD? Why are we still talking about legacy code? For me, legacy code is synonymous of code that is badly designed, hence difficult to test and maintain.&lt;/p&gt;

&lt;p&gt;By no means I’m defending over-engineering or wasting time drawing diagrams in UML. What I’m trying to say is that at the same time I would never spend hours to design classes inside my core domain up front, I would also not try to build an enterprise application, one test at a time, without thinking about its overall design before start coding. Design is essential for software development. If I’m building an application that will live in an ecosystem alongside many applications, or with heavy non-functional requirements, or that needs to comply to regulations, yes, of course I would put a lot of thought about its overall structure (macro-design) before I start coding but I would still develop its features (“micro-level”) one test at a time. Design happens at all levels: from up-front at the architectural level to just-in-time at micro level as part of my TDD flow. Decide how much to design is a skill—it&amp;rsquo;s all about finding the &lt;a href=&#34;http://codurance.com/2015/06/17/inflection-point/&#34;&gt;inflection point&lt;/a&gt;, subject I covered on a &lt;a href=&#34;http://codurance.com/2015/06/17/inflection-point/&#34;&gt;previous blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Software design is one of the most important skills in software development. Good design enables developers to collaborate, business features to be added and changed frequently, and reliable test automation to be done. With experience, we learn how to quickly identify problems and decide the amount of time we should spend on it. We also learn that most design decisions should be made in the last responsible moment, that means, we try not to commit to a design too early, while we don’t know enough about the problem.&lt;/p&gt;

&lt;p&gt;And that’s why I say that not everything we did in the 90s was in vain. Although we over-engineered every thing and didn’t deliver too much, we learnt how to design. We learnt how to think for ourselves. We learnt how research. We learnt how to reason about trade offs. It took us a while but we also learnt how to avoid binary thinking and refrain our excitement with new trends. The combination of a strong software design foundation with Agile and Lean principles and practices, put us in a much better position today not only to deliver software fast but also to deliver software continuously.&lt;/p&gt;

&lt;p&gt;Our goal is to enable business agility and that can be achieved through software that can be continuously deployed into production. Deploy software to production once is not that hard but to deploy software to production multiple times a day and keep this rhythm for months if not years, well, that’s not so simple. We need a lot of discipline and engineering to achieve continuous delivery, which makes software design and TDD two of the most important technical disciplines we have to master.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mutual Problems</title>
      <link>http://codurance.com/blog/mutual-problems/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/mutual-problems/</guid>
      <description>

&lt;p&gt;The HTTPS protocol is the well-established standard for securing our connections. Understanding how this protocol works is not a problem and the corresponding &lt;a href=&#34;https://tools.ietf.org/html/rfc2818&#34;&gt;RFC document&lt;/a&gt; is available since 2000.&lt;/p&gt;

&lt;p&gt;Despite HTTPS is used so widely, you can still find a software which doesn&amp;rsquo;t handle this protocol without unnecessary complexity. Unfortunately I&amp;rsquo;v experienced  problems during the implementation of &lt;a href=&#34;https://en.wikipedia.org/wiki/Mutual_authentication&#34;&gt;mutual authentication&lt;/a&gt; in the language which should not surprise me at all. It is &lt;strong&gt;Java&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;how-does-https-work&#34;&gt;How does HTTPS work?&lt;/h2&gt;

&lt;p&gt;Before I describe what kind of problems I&amp;rsquo;ve got with my implementation, I will describe how mutual authentication works. The HTTPS protocol uses the TLS/SSL protocol to secure the connection. The TLS/SSL protocol defines the authentication handshake which allows to connect any client with the server in a secure way.
During &lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_handshake&#34;&gt;The handshake&lt;/a&gt; the following steps are performed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A client sends the message which initiates the connection.&lt;/li&gt;
&lt;li&gt;The server sends its certificate to the client.&lt;/li&gt;
&lt;li&gt;The client verifies the certificate using the certificate issued by the trusted authority.&lt;/li&gt;
&lt;li&gt;The server sends the request for the client&amp;rsquo;s certificate.&lt;/li&gt;
&lt;li&gt;The client sends its certificate to the server.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;The server verifies the client&amp;rsquo;s certificate.&lt;/li&gt;
&lt;li&gt;The server and the client exchange the master secret which is used during the encryption of data.&lt;/li&gt;
&lt;li&gt;The connection is established.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together with my teammate we tried to implemented the HTTPS client in &lt;strong&gt;Java&lt;/strong&gt;. Combining our knowledge about the TLS/SSL handshake and the experience from the manual test with &lt;code&gt;curl&lt;/code&gt; we assumed that only three files were required to implement the client side: &lt;strong&gt;a client&amp;rsquo;s certificate&lt;/strong&gt;, &lt;strong&gt;a client&amp;rsquo;s private key&lt;/strong&gt; and &lt;strong&gt;a trusted certificate to verify the server&amp;rsquo;s certificate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Oh, how wrong we were to think so.&lt;/p&gt;

&lt;h2 id=&#34;java-the-problem-the-solution-and-why-is-it-so-hard&#34;&gt;Java - the problem, the solution and why is it so hard&lt;/h2&gt;

&lt;p&gt;Because it is quite unusual to use mutual authentication every day, we asked the best source in the world for a small assistance. A first look at the results served by &lt;em&gt;uncle Google&lt;/em&gt; didn&amp;rsquo;t revealed the complexity behind the implementation, but each click on the results led us to more and more confusing solutions (some of them where from 90&amp;rsquo;s). To make matters worse we had to use &lt;a href=&#34;https://hc.apache.org/&#34;&gt;Apache HttpComponents&lt;/a&gt; to implement our connection, but most of the proposed solutions were based on the pure &lt;strong&gt;Java&lt;/strong&gt; libraries.&lt;/p&gt;

&lt;p&gt;The knowledge from the internet allows us to establish that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Java&lt;/strong&gt; cannot use directly any certificates or private keys (like e.g. &lt;code&gt;curl&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Java&lt;/strong&gt; requires separate files (&lt;strong&gt;Java Keystores&lt;/strong&gt;) which can contain original certificates and keys.&lt;/li&gt;
&lt;li&gt;We needed a trusted keystore with the certificate required for the server&amp;rsquo;s certificate verification for each HTTPS connection.&lt;/li&gt;
&lt;li&gt;We needed a keys keystore with the client&amp;rsquo;s certificate and the client&amp;rsquo;s private key for mutual authentication.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First we had to create the trusted keystore. We created the keystore with the certificate using the &lt;code&gt;keytool&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ keytool -import -alias trusted_certificate -keystore trusted.jks -file trusted.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We stored in the keystore file &lt;code&gt;trusted.jks&lt;/code&gt; the certificate &lt;code&gt;trusted.crt&lt;/code&gt; under the alias &lt;code&gt;trusted_certificate&lt;/code&gt;. During the execution of this command we were asked to input a password for this keystore. We used this password later to get access to the keystore file.&lt;/p&gt;

&lt;p&gt;To create a keystore a few additional steps were required. In most cases you will probably receive two files from the company which issues the client&amp;rsquo;s certificate. The first file will be the client&amp;rsquo;s certificate in the &lt;code&gt;pem&lt;/code&gt; format. This certificate will be sent to the server. The second file is the client&amp;rsquo;s private key (also in the &lt;code&gt;pem&lt;/code&gt; format) which is used during the handshake to confirm that you are the owner of the client&amp;rsquo;s certificate.&lt;/p&gt;

&lt;p&gt;Unfortunately &lt;strong&gt;Java&lt;/strong&gt; only supports the &lt;code&gt;PKCS12&lt;/code&gt; format. So we had to translate our certificate and private key to &lt;code&gt;PKCS12&lt;/code&gt; format. We can do that using OpenSSL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ openssl pkcs12 -export \
    -in client.crt \
    -inkey client.key \
    -out key.p12 \
    -name client
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We generated the file &lt;code&gt;key.p12&lt;/code&gt; from the files &lt;code&gt;client.crt&lt;/code&gt; and &lt;code&gt;client.key&lt;/code&gt;. Once again a password input was required. This password is used to protect the private key.&lt;/p&gt;

&lt;p&gt;From the file in the &lt;code&gt;PKCS12&lt;/code&gt; format we can generate another keystore by importing our &lt;code&gt;PKCS12&lt;/code&gt; into the new keystore:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ keytool -importkeystore \
    -destkeystore key.jks \
    -deststorepass &amp;lt;&amp;lt;keystore_password&amp;gt;&amp;gt; \
    -destkeypass &amp;lt;&amp;lt;key_password_in_keystore&amp;gt;&amp;gt; \
    -alias client \
    -srckeystore key.p12 \
    -srcstoretype PKCS12 \
    -srcstorepass &amp;lt;&amp;lt;original_password_of_PKCS12_file&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command looks a little bit more complex, but it is fairly easy to decrypt. At the beginning of the command we declare the parameters of the new keystore named &lt;code&gt;key.jks&lt;/code&gt;. We define the password for the keystore and the password for the private key which will be used by this keystore. We also assign the private key to some alias in the keystore (in this case it is &lt;code&gt;client&lt;/code&gt;).
Next we specify the source file (&lt;code&gt;key.p12&lt;/code&gt;), the format of this file and the original password.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;trusted.jks&lt;/code&gt; and &lt;code&gt;key.jks&lt;/code&gt; we were ready to code. In the first step we had to describe how we wanted to use our keystores.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;File trustedKeystoreFile = new File(&amp;quot;trusted.jks&amp;quot;);
File keystoreFile = new File(&amp;quot;key.jks&amp;quot;);

SSLContext sslcontext = SSLContexts.custom()
    .loadTrustMaterial(trustedKeystoreFile, 
                    &amp;quot;&amp;lt;&amp;lt;trusted_keystore_password&amp;gt;&amp;gt;&amp;quot;.toCharArray())
    .loadKeyMaterial(keystoreFile, 
                    &amp;quot;&amp;lt;&amp;lt;keystore_password&amp;gt;&amp;gt;&amp;quot;.toCharArray(), 
                    &amp;quot;&amp;lt;&amp;lt;original_password_of_PKCS12_file&amp;gt;&amp;gt;&amp;quot;.toCharArray())
    .build();

SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(
                sslcontext,
                new String[]{&amp;quot;TLSv1.2&amp;quot;},
                null,
                SSLConnectionSocketFactory.getDefaultHostnameVerifier());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We took our keystore files and we built an SSL context. Next we created the socket factory which provides proper HTTPS connection for our requests.&lt;/p&gt;

&lt;p&gt;And finally we where able to call our endpoint from &lt;strong&gt;Java&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try (CloseableHttpClient httpclient = HttpClients.custom()
        .setSSLSocketFactory(sslsf)
        .build()) {

    HttpGet httpGet = new HttpGet(&amp;quot;https://ourserver.com/our/endpoint&amp;quot;);

    try (CloseableHttpResponse response = httpclient.execute(httGet)) {
        HttpEntity entity = response.getEntity();
        System.out.println(response.getStatusLine());
        EntityUtils.consume(entity);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done. After creating two additional files (keystores) which were the equivalent of our original certificate and the private key we implemented &lt;strong&gt;mutual authentication&lt;/strong&gt; with &lt;strong&gt;Java&lt;/strong&gt;. Maybe the implementation of HTTPS connections in &lt;strong&gt;Java&lt;/strong&gt; has some justification, but now it is just a headache.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I want to thank Marco Vermeulen (&lt;a href=&#34;https://twitter.com/marc0der&#34;&gt;twitter: marc0der&lt;/a&gt;) for the inspiration and the pairing session.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Smells – Part I</title>
      <link>http://codurance.com/blog/code-smells-part-one/</link>
      <pubDate>Thu, 17 Mar 2016 12:10:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/code-smells-part-one/</guid>
      <description>

&lt;p&gt;Last weekend I was at &lt;a href=&#34;https://twitter.com/hashtag/socracan16&#34;&gt;SoCraTes Canaries&lt;/a&gt; and I gave my first talk ever about code smells. Oh boy! How nervous was I! But now that has passed, I was wondering what I should do with all information I gathered. And then I thought, maybe it&amp;rsquo;s a good idea to put it all in a nice blog post.&lt;/p&gt;

&lt;h2 id=&#34;so-what-are-code-smells&#34;&gt;So what are code smells?&lt;/h2&gt;

&lt;p&gt;As &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt; said in his book &lt;a href=&#34;http://martinfowler.com/books/refactoring.html&#34;&gt;&amp;ldquo;Refactoring: Improving the Design of Existing Code&amp;rdquo;&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A code smell is a surface indication that usually corresponds to a deeper problem in the system.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like to think that a code smell is something that makes your developer instinct cry out to you, and you just know that something is wrong. This doesn’t mean you have to make changes in your code: there are occasions where these code smells are ok, but I think it’s important for us to detect them and know exactly why they are there.&lt;/p&gt;

&lt;p&gt;There are five categories of code smells:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bloaters&lt;/li&gt;
&lt;li&gt;Object-Orientation Abusers&lt;/li&gt;
&lt;li&gt;Change Preventers&lt;/li&gt;
&lt;li&gt;Dispensables&lt;/li&gt;
&lt;li&gt;Couplers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today I&amp;rsquo;m going to talk about Bloaters. I&amp;rsquo;ll leave the other categories for a future post.&lt;/p&gt;

&lt;h2 id=&#34;bloaters&#34;&gt;Bloaters&lt;/h2&gt;

&lt;p&gt;Bloaters can be big methods or classes, primitive obsessions, data clumps, or long parameter lists.&lt;/p&gt;

&lt;h4 id=&#34;long-parameter-list-data-clumps&#34;&gt;Long Parameter List/Data Clumps&lt;/h4&gt;

&lt;p&gt;The Long Parameter List is when you have a method that has more than 3 parameters. Sometimes we see that when we receive an object, and instead of passing it all we pass some of its data. In this case, the best policy is to pass the whole object. Data Clumps are a bit different: they are, in general, primitive values that start to &amp;ldquo;get together&amp;rdquo;. A good example of this is a startDate and endDate&amp;hellip; Maybe it&amp;rsquo;s worth creating a DateRange.&lt;/p&gt;

&lt;h4 id=&#34;primitive-obsession&#34;&gt;Primitive Obsession&lt;/h4&gt;

&lt;p&gt;This case is when we use primitives instead of value types for simple tasks. Sometimes the use of primitives is justifiable, but when you start to have behaviour attached to this primitives, then it&amp;rsquo;s time to stop and think that maybe a value type is in order. A simple example is a currency: we tend to put it in a float or double, instead of encapsulating it in a value type.&lt;/p&gt;

&lt;h4 id=&#34;long-method-large-class&#34;&gt;Long Method / Large Class&lt;/h4&gt;

&lt;p&gt;This kind of code smell happens when you have a big method. But when do you know that a method has become too big? Well, I have the rule that with more than five lines, you should, at least, look at it again. But, as &lt;a href=&#34;https://twitter.com/sandromancuso&#34;&gt;Sandro&lt;/a&gt; told me before, the right number of lines is just enough lines so a method only does one thing (and so it conforms to the 1st principle of &lt;a href=&#34;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID&lt;/a&gt; the &lt;a href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;Single responsibility principle&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To do this blog I started to look at my old code when I hadn&amp;rsquo;t woken up yet to craftsmanship: if it was working that was good enough for me. Here&amp;rsquo;s the code in Objective-C:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void) postToServer
{
    PostSerializer* postSerializer = [[PostSerializer alloc] init];
    NSString *post = [postSerializer serializePostWithTitle:self.txtTitle.text description:self.txtDescription.text author:self.txtUser.text game:self.game];

    NSMutableDictionary *postParams = [NSMutableDictionary dictionary];
	  [postParams setObject:txtTitle.text forKey:@&amp;quot;title&amp;quot;];
	  [postParams setObject:post forKey:@&amp;quot;data&amp;quot;];
	  [postParams setObject:txtUser.text forKey:@&amp;quot;username&amp;quot;];
    [postParams setObject:txtPassword.text forKey:@&amp;quot;password&amp;quot;];

	  NSArray *args = [NSArray arrayWithObjects:[NSNumber numberWithInt:0], postParams, nil];

#ifdef DEBUG_LOG
    XMLRPCRequest *request = [[XMLRPCRequest alloc] initWithURL:
                              [NSURL URLWithString:@&amp;quot;http://localhost:8888/letsbasket/xmlrpc.php&amp;quot;]];
    DLog(@&amp;quot;Debug&amp;quot;);
#else
    XMLRPCRequest *request = [[XMLRPCRequest alloc] initWithURL:[NSURL URLWithString:[UtilsHelper localizeString:@&amp;quot;UrlXmlRPCKey&amp;quot;]]];
    DLog(@&amp;quot;Producao&amp;quot;);
#endif

	  [request setMethod:@&amp;quot;letsBasket.AddPost&amp;quot; withParameters:args];

    NSError *error = nil;
	  XMLRPCResponse* result = [XMLRPCConnection sendSynchronousXMLRPCRequest:request error:&amp;amp;error];

    UIApplication *app = [UIApplication sharedApplication];
    app.networkActivityIndicatorVisible = NO;

    [self dismissWaitingAlert];

    if(error != nil || [[result body] rangeOfString:@&amp;quot;&amp;lt;name&amp;gt;error&amp;lt;/name&amp;gt;&amp;quot;].location != NSNotFound)
    {
        int location_start = [[result body] rangeOfString:@&amp;quot;&amp;lt;string&amp;gt;&amp;quot;].location + 8;
        int location_end = [[result body] rangeOfString:@&amp;quot;&amp;lt;/string&amp;gt;&amp;quot;].location;

        NSString *message = [[[result body] substringWithRange:NSMakeRange(location_start, location_end- location_start)] unescapedString];
        NSString* title = [UtilsHelper localizeString:@&amp;quot;PublishVC_ErrorRetreivingAlertTitle_key&amp;quot;];
        [self showAlertWithErrorMessage:message Title:title];
	      return;
	  }

    [self processPublishResult:result];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow! This is a really big method. And it is inside a ViewController class, so this should definitely be extracted into a service class, so we have a correct separation of concerns. But for the sake of the brevity, let&amp;rsquo;s focus on how can we refactor this big method.
The refactoring technique to apply here is &lt;strong&gt;Extract Method&lt;/strong&gt;: you can aggregate code together and extract to a new method. So let&amp;rsquo;s see what we can come up with:&lt;/p&gt;

&lt;p&gt;We can start with grouping the code that refers to serializing a post:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (NSString *)serializePost
{
    PostSerializer* postSerializer = [[PostSerializer alloc] init];
    NSString *post = [postSerializer serializePostWithTitle:self.txtTitle.text description:self.txtDescription.text author:self.txtUser.text game:self.game];
    return post;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can do it for the parameters of the request:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (NSArray *)createPostParams:(NSString *)post
{
    NSMutableDictionary *postParams = [NSMutableDictionary dictionary];
    [postParams setObject:txtTitle.text forKey:@&amp;quot;title&amp;quot;];
    [postParams setObject:post forKey:@&amp;quot;data&amp;quot;];
    [postParams setObject:txtUser.text forKey:@&amp;quot;username&amp;quot;];
    [postParams setObject:txtPassword.text forKey:@&amp;quot;password&amp;quot;];

    NSArray *args = [NSArray arrayWithObjects:[NSNumber numberWithInt:0], postParams, nil];
    return args;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With all this in place we are now ready to create a XMLRPCRequest:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (XMLRPCRequest *)createXMLRPCRequestWithArgs:(NSArray*)args {

    XMLRPCRequest *request;

#ifdef DEBUG_LOG
   request = [[XMLRPCRequest alloc] initWithURL:
                              [NSURL URLWithString:@&amp;quot;http://localhost:8888/letsbasket/xmlrpc.php&amp;quot;]];
    DLog(@&amp;quot;Debug&amp;quot;);
#else
    request = [[XMLRPCRequest alloc] initWithURL:[NSURL URLWithString:[UtilsHelper localizeString:@&amp;quot;UrlXmlRPCKey&amp;quot;]]];
    DLog(@&amp;quot;Producao&amp;quot;);
#endif

    [request setMethod:@&amp;quot;letsBasket.AddPost&amp;quot; withParameters:args];

    return request;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also extract a method with some display updates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)updateDisplay
{
    UIApplication *app = [UIApplication sharedApplication];
    app.networkActivityIndicatorVisible = NO;

    [self dismissWaitingAlert];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And last but not least we can extract the preparation for displaying the error message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void)showError:(NSString*)bodyResult {

    int location_start = [bodyResult rangeOfString:@&amp;quot;&amp;lt;string&amp;gt;&amp;quot;].location + 8;
    int location_end = [bodyResult rangeOfString:@&amp;quot;&amp;lt;/string&amp;gt;&amp;quot;].location;

    NSString *message = [[bodyResult substringWithRange:NSMakeRange(location_start, location_end- location_start)] unescapedString];
    NSString* title = [UtilsHelper localizeString:@&amp;quot;PublishVC_ErrorRetreivingAlertTitle_key&amp;quot;];
    [self showAlertWithErrorMessage:message Title:title];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With all these extractions our method now looks pretty neat:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void) postToServer
{
    NSString *post = [self serializePost];
    NSArray *args = [self createPostParams:post];
    XMLRPCRequest *request = [self createXMLRPCRequestWithArgs: args];
    NSError *error = nil;

	  XMLRPCResponse* result = [XMLRPCConnection sendSynchronousXMLRPCRequest:request error:&amp;amp;error];

    [self updateDisplay];

    if(error != nil || [[result body] rangeOfString:@&amp;quot;&amp;lt;name&amp;gt;error&amp;lt;/name&amp;gt;&amp;quot;].location != NSNotFound)
    {
        [self showError:[result body]];
		    return;
	  }

    [self processPublishResult:result];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm&amp;hellip; we can do this even better! Let&amp;rsquo;s take a look at the method &lt;code&gt;createXMLRCPRequest&lt;/code&gt; and see if we can call the others from there. In this case, it makes sense to have all together.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (XMLRPCRequest *)createXMLRPCRequest {

    NSString *post = [self serializePost];
    NSArray *args = [self createPostParams:post];

    XMLRPCRequest *request;

#ifdef DEBUG_LOG
   request = [[XMLRPCRequest alloc] initWithURL:
                              [NSURL URLWithString:@&amp;quot;http://localhost:8888/letsbasket/xmlrpc.php&amp;quot;]];
    DLog(@&amp;quot;Debug&amp;quot;);
#else
    request = [[XMLRPCRequest alloc] initWithURL:[NSURL URLWithString:[UtilsHelper localizeString:@&amp;quot;UrlXmlRPCKey&amp;quot;]]];
    DLog(@&amp;quot;Producao&amp;quot;);
#endif

    [request setMethod:@&amp;quot;letsBasket.AddPost&amp;quot; withParameters:args];

    return request;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And our original method now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objectivec&#34;&gt;- (void) postToServer
{
    XMLRPCRequest *request = [self createXMLRPCRequest];
    NSError *error = nil;

    XMLRPCResponse* result = [XMLRPCConnection sendSynchronousXMLRPCRequest:request error:&amp;amp;error];

    [self updateDisplay];

    if(error != nil || [[result body] rangeOfString:@&amp;quot;&amp;lt;name&amp;gt;error&amp;lt;/name&amp;gt;&amp;quot;].location != NSNotFound)
    {
        [self showError:[result body]];
        return;
    }

    [self processPublishResult:result];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, here you go: a method with more than 5 lines and I think that&amp;rsquo;s ok. :)
As we can see it&amp;rsquo;s really easy to let a method grow. But it&amp;rsquo;s really easy to refactor and have a cleaner code too.&lt;/p&gt;

&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;In general, bloaters are viewed as code that, over time, &amp;ldquo;gets out of hand&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Remember, code smells sometimes can&amp;rsquo;t be removed, but it&amp;rsquo;s good to know that they are there and you know &lt;strong&gt;why&lt;/strong&gt; they are there.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Containers all the way through...</title>
      <link>http://codurance.com/blog/containers-all-the-way-through/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://codurance.com/blog/containers-all-the-way-through/</guid>
      <description>

&lt;p&gt;In this post I will attempt to cover fundamentals of &lt;strong&gt;Bare Metal Systems&lt;/strong&gt;, &lt;strong&gt;Virtual Systems&lt;/strong&gt; and &lt;strong&gt;Container Systems&lt;/strong&gt;. And the purpose for doing so is to learn about these systems as they stand and also the differences between them, focusing on how they execute programs in their respective environments.&lt;/p&gt;

&lt;h3 id=&#34;bare-metal-systems&#34;&gt;Bare Metal Systems&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s think of our Bare Metal Systems as desktops and laptops we use on a daily basis (or even servers in server rooms and data-centers), and we have the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the hardware (outer physical layer)&lt;/li&gt;
&lt;li&gt;the OS platform (running inside the hardware)&lt;/li&gt;
&lt;li&gt;the programs running on the OS (as processes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Programs are stored on the hard drive in the form of executable files (a format understandable by the OS) and loaded into memory via one or more processes. Programs interact with the kernel, which forms a core part of the OS architecture and the hardware. The OS coordinate communication between hardware i.e. CPU, I/O devices, Memory, etc… and the programs.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-16-containers-all-the-way-through/bare-metal-systems.png&#34; alt=&#34;Bare Metal Systems&#34; title=&#34;Bare Metal Systems&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;p&gt;A more detailed explanation of what programs or executables are, how programs execute and where an Operating System come into play, can be found &lt;a href=&#34;http://stackoverflow.com/questions/1599434/how-does-program-execute-where-does-the-operating-systems-come-into-play&#34;&gt;on this Stackoverflow page [2]&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;virtual-systems&#34;&gt;Virtual Systems&lt;/h3&gt;

&lt;p&gt;On the other hand Virtual Systems, with the help of Virtual System controllers like, &lt;em&gt;Virtual Box&lt;/em&gt; or &lt;em&gt;VMWare&lt;/em&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypervisor&#34;&gt;&lt;em&gt;a&lt;/em&gt; &lt;em&gt;hypervisor [1]&lt;/em&gt;&lt;/a&gt; run an operating system on a bare metal system. These systems emulate bare-metal hardware as software abstraction(s) inside which we run the real OS platform. Such systems can be made up of the following layers, and also referred to as a Virtual Machines (VM):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a software abstraction of the hardware (Virtual Machine)&lt;/li&gt;
&lt;li&gt;the OS platform running inside the software abstraction (guest OS)&lt;/li&gt;
&lt;li&gt;one or more programs running in the guest OS (processes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s like running a computer (abstracted as software) inside another computer. And the rest of the fundamentals from the Bare Metal System applies to this abstraction layer as well. When a process is created inside the Virtual System, then the host OS which runs the Virtual System might also be spawning one or more processes.&lt;/p&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-16-containers-all-the-way-through/virtual-systems.png&#34; alt=&#34;Virtual Systems&#34; title=&#34;Virtual Systems&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h3 id=&#34;container-systems&#34;&gt;Container Systems&lt;/h3&gt;

&lt;p&gt;Now looking at Container Systems we can say the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they run on top of OS platforms running inside Bare Metal Systems or Virtual Systems&lt;/li&gt;
&lt;li&gt;containers which allow isolating processes and sharing the kernel between each other (such isolation from other processes and resources are possible in some OSes like say Linux, due to OS kernel features like &lt;a href=&#34;https://en.wikipedia.org/wiki/Cgroups&#34;&gt;&lt;em&gt;cgroups&lt;/em&gt;&lt;/a&gt;[3] and &lt;a href=&#34;http://man7.org/linux/man-pages/man7/namespaces.7.html&#34;&gt;&lt;em&gt;namespaces&lt;/em&gt;&lt;/a&gt;)[4]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A container creates an OS like environment, inside which one or more programs can be executed. Each of these executions could result in a one or more processes on the host OS. Container Systems are composed of these layers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hardware (accessible via kernel features)&lt;/li&gt;
&lt;li&gt;the OS platform (shared kernel)&lt;/li&gt;
&lt;li&gt;one or more programs running inside the container (as processes)&lt;/li&gt;
&lt;/ul&gt;


&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-16-containers-all-the-way-through/container-systems.png&#34; alt=&#34;Container Systems&#34; title=&#34;Container Systems&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;


&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Looking at these enclosures or rounded rectangles within each other, we can already see how it is containers all the way through.&lt;/p&gt;

&lt;div class=&#34;row blog-boxes&#34;&gt;
   &lt;div class=&#34;blog-box homepage-blog-thumb col-md-4&#34;&gt; 
    
&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-16-containers-all-the-way-through/bare-metal-systems.png&#34; alt=&#34;Bare Metal Systems&#34; title=&#34;Bare Metal Systems&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;
 
   &lt;/div&gt;
   &lt;div class=&#34;blog-box homepage-blog-thumb col-md-4&#34;&gt;
    
&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-16-containers-all-the-way-through/virtual-systems.png&#34; alt=&#34;Virtual Systems&#34; title=&#34;Virtual Systems&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;

   &lt;/div&gt;
   &lt;div class=&#34;blog-box homepage-blog-thumb col-md-4&#34;&gt;
    
&lt;img src=&#34;http://codurance.com/assets/img/custom/blog/2016-03-16-containers-all-the-way-through/container-systems.png&#34; alt=&#34;Container Systems&#34; title=&#34;Container Systems&#34; class=&#34;img img-responsive style-screengrab&#34;/&gt;
 
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There is an increasing number of distinctions between &lt;strong&gt;Bare Metal Systems&lt;/strong&gt;, &lt;strong&gt;Virtual Systems&lt;/strong&gt; and &lt;strong&gt;Container Systems&lt;/strong&gt;. While Virtual Systems encapsulate the Operating System inside a thick hardware virtualisation, Container Systems do something similar but with a much thinner virtualisation layer.&lt;/p&gt;

&lt;p&gt;There are a number of pros and cons between these systems when we look at them individually, i.e. portability, performance, resource consumption, time to recreate such systems, maintenance, et al.&lt;/p&gt;

&lt;h3 id=&#34;word-of-thanks-and-stay-in-touch&#34;&gt;Word of thanks and stay in touch&lt;/h3&gt;

&lt;p&gt;Thank you for your time, feel free to send your queries and comments to &lt;a href=&#34;http://twitter.com/theNeomatrix369&#34;&gt;theNeomatrix369&lt;/a&gt;. Big thanks to my colleagues, our DevOps craftsman &lt;a href=&#34;https://twitter.com/robertfirek&#34;&gt;Robert Firek&lt;/a&gt; and craftsman &lt;a href=&#34;https://twitter.com/dhatanian&#34;&gt;David Hatanian&lt;/a&gt; from &lt;a href=&#34;http://codurance.com/aboutus/ourcompany/&#34;&gt;Codurance&lt;/a&gt; for giving invaluable feedback on my post and steering me in the right direction.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&#34;https://en.wikipedia.org/wiki/Hypervisor&#34;&gt;Wikipedia page for Hypervisor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&#34;http://stackoverflow.com/questions/1599434/how-does-program-execute-where-does-the-operating-systems-come-into-play&#34;&gt;Stackoverflow page for &amp;ldquo;How does a program execute? Where does the operating systems come into play ?&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[3] &lt;a href=&#34;https://en.wikipedia.org/wiki/Cgroups&#34;&gt;Wikipedia page on cgroups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[4] &lt;a href=&#34;http://man7.org/linux/man-pages/man7/namespaces.7.html&#34;&gt;Linux man page on namespaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>